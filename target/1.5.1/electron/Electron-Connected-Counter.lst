
/Users/chipmc/Documents/Maker/Particle/Projects/Electron-Connected-Counter/target/1.5.1/electron/Electron-Connected-Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006e70  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  40024000  08086e90  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000134  20000000  08087694  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000824  20000134  20000134  00040134  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  080877c8  080877c8  000377c8  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  080877f4  080877f4  000377f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d5022  00000000  00000000  000377f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012966  00000000  00000000  0010c81a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001986b  00000000  00000000  0011f180  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002710  00000000  00000000  001389eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004280  00000000  00000000  0013b0fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002884a  00000000  00000000  0013f37b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002b3d5  00000000  00000000  00167bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b1ac9  00000000  00000000  00192f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d374  00000000  00000000  00244a64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f005 fc75 	bl	8085920 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f005 fc95 	bl	808596c <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	08087694 	.word	0x08087694
 8080050:	20000134 	.word	0x20000134
 8080054:	20000134 	.word	0x20000134
 8080058:	20000958 	.word	0x20000958
 808005c:	20000958 	.word	0x20000958

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f004 f907 	bl	8084274 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	08086e4c 	.word	0x08086e4c
 8080088:	08086e84 	.word	0x08086e84

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f001 babc 	b.w	8081608 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f001 f87d 	bl	8081190 <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f004 b8ad 	b.w	80841f8 <_post_loop>

0808009e <_Znwj>:
 808009e:	f002 bcc5 	b.w	8082a2c <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f002 bccb 	b.w	8082a3c <free>
	...

080800a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80800a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800aa:	4a03      	ldr	r2, [pc, #12]	; (80800b8 <__cxa_pure_virtual+0x10>)
 80800ac:	2100      	movs	r1, #0
 80800ae:	200c      	movs	r0, #12
 80800b0:	f002 fb82 	bl	80827b8 <panic_>
 80800b4:	e7fe      	b.n	80800b4 <__cxa_pure_virtual+0xc>
 80800b6:	bf00      	nop
 80800b8:	08082509 	.word	0x08082509

080800bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800bc:	7800      	ldrb	r0, [r0, #0]
 80800be:	fab0 f080 	clz	r0, r0
 80800c2:	0940      	lsrs	r0, r0, #5
 80800c4:	4770      	bx	lr

080800c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800c6:	2301      	movs	r3, #1
 80800c8:	7003      	strb	r3, [r0, #0]
 80800ca:	4770      	bx	lr

080800cc <_Z11watchdogISRv>:
  else frontTireFlag = true;
}

void watchdogISR()
{
  watchdogFlag = true;
 80800cc:	4b01      	ldr	r3, [pc, #4]	; (80800d4 <_Z11watchdogISRv+0x8>)
 80800ce:	2201      	movs	r2, #1
 80800d0:	701a      	strb	r2, [r3, #0]
 80800d2:	4770      	bx	lr
 80800d4:	20000188 	.word	0x20000188

080800d8 <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
 80800d8:	b538      	push	{r3, r4, r5, lr}
 80800da:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
 80800dc:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
 80800de:	b128      	cbz	r0, 80800ec <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
 80800e0:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
 80800e2:	210c      	movs	r1, #12
 80800e4:	f004 fa33 	bl	808454e <_ZdlPvj>
            wakeupSource = next;
 80800e8:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
 80800ea:	e7f8      	b.n	80800de <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
 80800ec:	4620      	mov	r0, r4
 80800ee:	bd38      	pop	{r3, r4, r5, pc}

080800f0 <_Z9resetFRAM6String>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
  return !Particle.connected();
}

int resetFRAM(String command)                                     // Will reset the local counts
{
 80800f0:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80800f2:	4904      	ldr	r1, [pc, #16]	; (8080104 <_Z9resetFRAM6String+0x14>)
 80800f4:	f003 fc8a 	bl	8083a0c <_ZNK6String6equalsEPKc>
  if (command == "1")
 80800f8:	b118      	cbz	r0, 8080102 <_Z9resetFRAM6String+0x12>
  {
    fram.erase();
 80800fa:	4803      	ldr	r0, [pc, #12]	; (8080108 <_Z9resetFRAM6String+0x18>)
 80800fc:	f001 fd64 	bl	8081bc8 <_ZN6MB85RC5eraseEv>
    return 1;
 8080100:	2001      	movs	r0, #1
  }
  else return 0;
}
 8080102:	bd08      	pop	{r3, pc}
 8080104:	080867c0 	.word	0x080867c0
 8080108:	20000144 	.word	0x20000144

0808010c <_Z7sendNow6String>:
  }
  else return 0;
}

int sendNow(String command) // Function to force sending data in current hour
{
 808010c:	b508      	push	{r3, lr}
 808010e:	4904      	ldr	r1, [pc, #16]	; (8080120 <_Z7sendNow6String+0x14>)
 8080110:	f003 fc7c 	bl	8083a0c <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080114:	b118      	cbz	r0, 808011e <_Z7sendNow6String+0x12>
  {
    state = REPORTING_STATE;
 8080116:	4b03      	ldr	r3, [pc, #12]	; (8080124 <_Z7sendNow6String+0x18>)
 8080118:	2205      	movs	r2, #5
 808011a:	701a      	strb	r2, [r3, #0]
    return 1;
 808011c:	2001      	movs	r0, #1
  }
  else return 0;
}
 808011e:	bd08      	pop	{r3, pc}
 8080120:	080867c0 	.word	0x080867c0
 8080124:	20000174 	.word	0x20000174

08080128 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
 8080128:	b510      	push	{r4, lr}
 808012a:	4604      	mov	r4, r0
 808012c:	4b02      	ldr	r3, [pc, #8]	; (8080138 <_ZN17PublishQueueAsyncD1Ev+0x10>)
 808012e:	6003      	str	r3, [r0, #0]
 8080130:	f001 ff26 	bl	8081f80 <_ZN25PublishQueueAsyncRetainedD1Ev>
 8080134:	4620      	mov	r0, r4
 8080136:	bd10      	pop	{r4, pc}
 8080138:	08086310 	.word	0x08086310

0808013c <_ZN17PublishQueueAsyncD0Ev>:
 808013c:	b510      	push	{r4, lr}
 808013e:	4604      	mov	r4, r0
 8080140:	f7ff fff2 	bl	8080128 <_ZN17PublishQueueAsyncD1Ev>
 8080144:	4620      	mov	r0, r4
 8080146:	2138      	movs	r1, #56	; 0x38
 8080148:	f004 fa01 	bl	808454e <_ZdlPvj>
 808014c:	4620      	mov	r0, r4
 808014e:	bd10      	pop	{r4, pc}

08080150 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
 8080150:	b510      	push	{r4, lr}
 8080152:	4604      	mov	r4, r0
 8080154:	4b02      	ldr	r3, [pc, #8]	; (8080160 <_ZN8MB85RC64D1Ev+0x10>)
 8080156:	6003      	str	r3, [r0, #0]
 8080158:	f001 fcfe 	bl	8081b58 <_ZN6MB85RCD1Ev>
 808015c:	4620      	mov	r0, r4
 808015e:	bd10      	pop	{r4, pc}
 8080160:	080862f4 	.word	0x080862f4

08080164 <_ZN8MB85RC64D0Ev>:
 8080164:	b510      	push	{r4, lr}
 8080166:	4604      	mov	r4, r0
 8080168:	f7ff fff2 	bl	8080150 <_ZN8MB85RC64D1Ev>
 808016c:	4620      	mov	r0, r4
 808016e:	2110      	movs	r1, #16
 8080170:	f004 f9ed 	bl	808454e <_ZdlPvj>
 8080174:	4620      	mov	r0, r4
 8080176:	bd10      	pop	{r4, pc}

08080178 <_Z11resetCounts6String>:
  }
  else return 0;
}

int resetCounts(String command)                                       // Resets the current hourly and daily counts
{
 8080178:	b508      	push	{r3, lr}
 808017a:	490a      	ldr	r1, [pc, #40]	; (80801a4 <_Z11resetCounts6String+0x2c>)
 808017c:	f003 fc46 	bl	8083a0c <_ZNK6String6equalsEPKc>
 8080180:	2300      	movs	r3, #0
  if (command == "1")
 8080182:	b168      	cbz	r0, 80801a0 <_Z11resetCounts6String+0x28>
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
 8080184:	4a08      	ldr	r2, [pc, #32]	; (80801a8 <_Z11resetCounts6String+0x30>)
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
 8080186:	4909      	ldr	r1, [pc, #36]	; (80801ac <_Z11resetCounts6String+0x34>)
int resetCounts(String command)                                       // Resets the current hourly and daily counts
{
  if (command == "1")
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
 8080188:	6013      	str	r3, [r2, #0]

int resetCounts(String command)                                       // Resets the current hourly and daily counts
{
  if (command == "1")
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
 808018a:	6093      	str	r3, [r2, #8]
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
    current.alertCount = 0;                                           // Reset count variables
 808018c:	6153      	str	r3, [r2, #20]
    current.hourlyCountInFlight = 0;                                  // In the off-chance there is data in flight
 808018e:	6053      	str	r3, [r2, #4]
    dataInFlight = false;
 8080190:	4a07      	ldr	r2, [pc, #28]	; (80801b0 <_Z11resetCounts6String+0x38>)
{
  if (command == "1")
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
 8080192:	610b      	str	r3, [r1, #16]
    current.alertCount = 0;                                           // Reset count variables
    current.hourlyCountInFlight = 0;                                  // In the off-chance there is data in flight
    dataInFlight = false;
 8080194:	7013      	strb	r3, [r2, #0]
    currentCountsWriteNeeded = true;                                  // Make sure we write to FRAM back in the main loop
 8080196:	4b07      	ldr	r3, [pc, #28]	; (80801b4 <_Z11resetCounts6String+0x3c>)
 8080198:	2001      	movs	r0, #1
 808019a:	7018      	strb	r0, [r3, #0]
    systemStatusWriteNeeded = true;
 808019c:	4b06      	ldr	r3, [pc, #24]	; (80801b8 <_Z11resetCounts6String+0x40>)
 808019e:	7018      	strb	r0, [r3, #0]
    return 1;
  }
  else return 0;
}
 80801a0:	bd08      	pop	{r3, pc}
 80801a2:	bf00      	nop
 80801a4:	080867c0 	.word	0x080867c0
 80801a8:	2000020c 	.word	0x2000020c
 80801ac:	20000268 	.word	0x20000268
 80801b0:	20000228 	.word	0x20000228
 80801b4:	20000204 	.word	0x20000204
 80801b8:	20000264 	.word	0x20000264

080801bc <_ZN10CloudClass8syncTimeEv.isra.15>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
 80801bc:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80801be:	f002 fbad 	bl	808291c <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
 80801c2:	b120      	cbz	r0, 80801ce <_ZN10CloudClass8syncTimeEv.isra.15+0x12>
            return false;
        }
        return spark_sync_time(NULL);
    }
 80801c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bool syncTime(void)
    {
        if (!connected()) {
            return false;
        }
        return spark_sync_time(NULL);
 80801c8:	2000      	movs	r0, #0
 80801ca:	f002 bbc7 	b.w	808295c <spark_sync_time>
    }
 80801ce:	bd08      	pop	{r3, pc}

080801d0 <_ZN10CloudClass12syncTimeDoneEv.isra.17>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80801d0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80801d2:	2000      	movs	r0, #0
 80801d4:	f002 fbca 	bl	808296c <spark_sync_time_pending>
 80801d8:	b128      	cbz	r0, 80801e6 <_ZN10CloudClass12syncTimeDoneEv.isra.17+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80801da:	f002 fb9f 	bl	808291c <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80801de:	f080 0001 	eor.w	r0, r0, #1
 80801e2:	b2c0      	uxtb	r0, r0
 80801e4:	bd08      	pop	{r3, pc}
 80801e6:	2001      	movs	r0, #1
    }
 80801e8:	bd08      	pop	{r3, pc}
	...

080801ec <_Z9sensorISRv>:

// Here are the various hardware and timer interrupt service routines
void sensorISR()
{
  static bool frontTireFlag = false;
  if (frontTireFlag) {
 80801ec:	4b0c      	ldr	r3, [pc, #48]	; (8080220 <_Z9sensorISRv+0x34>)
 80801ee:	2201      	movs	r2, #1
 80801f0:	7819      	ldrb	r1, [r3, #0]
 80801f2:	b191      	cbz	r1, 808021a <_Z9sensorISRv+0x2e>
    sensorDetect = true;                              // sets the sensor flag for the main loop
 80801f4:	490b      	ldr	r1, [pc, #44]	; (8080224 <_Z9sensorISRv+0x38>)
 80801f6:	700a      	strb	r2, [r1, #0]
      }

      _GLIBCXX_ALWAYS_INLINE __int_type
      fetch_add(__int_type __i,
		memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_i, __i, __m); }
 80801f8:	4a0b      	ldr	r2, [pc, #44]	; (8080228 <_Z9sensorISRv+0x3c>)
 80801fa:	e852 1f00 	ldrex	r1, [r2]
 80801fe:	3101      	adds	r1, #1
 8080200:	e842 1000 	strex	r0, r1, [r2]
 8080204:	2800      	cmp	r0, #0
 8080206:	d1f8      	bne.n	80801fa <_Z9sensorISRv+0xe>
 8080208:	4a08      	ldr	r2, [pc, #32]	; (808022c <_Z9sensorISRv+0x40>)
 808020a:	e852 1f00 	ldrex	r1, [r2]
 808020e:	3101      	adds	r1, #1
 8080210:	e842 1000 	strex	r0, r1, [r2]
 8080214:	2800      	cmp	r0, #0
 8080216:	d1f8      	bne.n	808020a <_Z9sensorISRv+0x1e>
    hourlyAtomic.fetch_add(1, std::memory_order_relaxed);
    dailyAtomic.fetch_add(1, std::memory_order_relaxed);
    frontTireFlag = false;
 8080218:	2200      	movs	r2, #0
  }
  else frontTireFlag = true;
 808021a:	701a      	strb	r2, [r3, #0]
 808021c:	4770      	bx	lr
 808021e:	bf00      	nop
 8080220:	200001fc 	.word	0x200001fc
 8080224:	20000138 	.word	0x20000138
 8080228:	2000017c 	.word	0x2000017c
 808022c:	20000178 	.word	0x20000178

08080230 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080230:	b510      	push	{r4, lr}
 8080232:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 8080234:	6800      	ldr	r0, [r0, #0]
 8080236:	b108      	cbz	r0, 808023c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 8080238:	f002 fc00 	bl	8082a3c <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 808023c:	4620      	mov	r0, r4
 808023e:	bd10      	pop	{r4, pc}

08080240 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>:
    hal_wakeup_source_base_t* wakeupSource() const {
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
 8080240:	6803      	ldr	r3, [r0, #0]
 8080242:	68d8      	ldr	r0, [r3, #12]
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
 8080244:	b120      	cbz	r0, 8080250 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
 8080246:	8883      	ldrh	r3, [r0, #4]
 8080248:	428b      	cmp	r3, r1
 808024a:	d001      	beq.n	8080250 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
                return start;
            }
            start = start->next;
 808024c:	6880      	ldr	r0, [r0, #8]
 808024e:	e7f9      	b.n	8080244 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x4>
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }
 8080250:	4770      	bx	lr
	...

08080254 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
 8080254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (valid_) {
 8080258:	7d03      	ldrb	r3, [r0, #20]
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
 808025a:	4605      	mov	r5, r0
 808025c:	460f      	mov	r7, r1
 808025e:	4616      	mov	r6, r2
        if (valid_) {
 8080260:	b33b      	cbz	r3, 80802b2 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
            // Check if this pin has been featured.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO);
 8080262:	2101      	movs	r1, #1
 8080264:	f7ff ffec 	bl	8080240 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            while (wakeup) {
 8080268:	b150      	cbz	r0, 8080280 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x2c>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
 808026a:	8983      	ldrh	r3, [r0, #12]
 808026c:	42bb      	cmp	r3, r7
 808026e:	d104      	bne.n	808027a <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
                    gpioWakeup->mode = mode;
 8080270:	7386      	strb	r6, [r0, #14]
                    return *this;
 8080272:	e01e      	b.n	80802b2 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
 8080274:	8883      	ldrh	r3, [r0, #4]
 8080276:	2b01      	cmp	r3, #1
 8080278:	d0f6      	beq.n	8080268 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x14>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
 808027a:	6880      	ldr	r0, [r0, #8]
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
 808027c:	2800      	cmp	r0, #0
 808027e:	d1f9      	bne.n	8080274 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x20>
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
 8080280:	490d      	ldr	r1, [pc, #52]	; (80802b8 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
 8080282:	2010      	movs	r0, #16
 8080284:	f004 f96e 	bl	8084564 <_ZnwjRKSt9nothrow_t>
 8080288:	4604      	mov	r4, r0
 808028a:	b188      	cbz	r0, 80802b0 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
 808028c:	f04f 0810 	mov.w	r8, #16
 8080290:	4642      	mov	r2, r8
 8080292:	2100      	movs	r1, #0
 8080294:	f005 fb6a 	bl	808596c <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
 8080298:	2302      	movs	r3, #2
 808029a:	8063      	strh	r3, [r4, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
 808029c:	2301      	movs	r3, #1
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
 808029e:	f8a4 8000 	strh.w	r8, [r4]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
 80802a2:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
 80802a4:	692b      	ldr	r3, [r5, #16]
            wakeupSource->pin = pin;
 80802a6:	81a7      	strh	r7, [r4, #12]
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
            wakeupSource->base.next = config_.wakeup_sources;
 80802a8:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
 80802aa:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
 80802ac:	612c      	str	r4, [r5, #16]
 80802ae:	e000      	b.n	80802b2 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
 80802b0:	7528      	strb	r0, [r5, #20]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
 80802b2:	4628      	mov	r0, r5
 80802b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80802b8:	08086bf4 	.word	0x08086bf4

080802bc <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80802bc:	2000      	movs	r0, #0
 80802be:	f002 b943 	b.w	8082548 <hal_timer_millis>

080802c2 <_ZN8particle13constexpr_powIfjEET_S1_T0_>:
                typename std::conditional<bits_fit_in_type<S, bits, int32_t>::value, typename bits_fit_in_type<S, bits, int32_t>::type,
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
 80802c2:	b510      	push	{r4, lr}
 80802c4:	4604      	mov	r4, r0
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
 80802c6:	b139      	cbz	r1, 80802d8 <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x16>
 80802c8:	3901      	subs	r1, #1
 80802ca:	f7ff fffa 	bl	80802c2 <_ZN8particle13constexpr_powIfjEET_S1_T0_>
 80802ce:	4601      	mov	r1, r0
 80802d0:	4620      	mov	r0, r4
 80802d2:	f004 fff3 	bl	80852bc <__aeabi_fmul>
 80802d6:	bd10      	pop	{r4, pc}
 80802d8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
}
 80802dc:	bd10      	pop	{r4, pc}

080802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	 * @return true if the event was queued or false if it was not.
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
 80802de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80802e0:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
 80802e4:	6804      	ldr	r4, [r0, #0]
 80802e6:	f88d 3000 	strb.w	r3, [sp]
 80802ea:	f88d 5004 	strb.w	r5, [sp, #4]
 80802ee:	68e4      	ldr	r4, [r4, #12]
 80802f0:	233c      	movs	r3, #60	; 0x3c
 80802f2:	47a0      	blx	r4
	}
 80802f4:	b003      	add	sp, #12
 80802f6:	bd30      	pop	{r4, r5, pc}

080802f8 <_Z14UbidotsHandlerPKcS0_>:
  webhookTimeStamp = millis();
  currentHourlyPeriod = Time.hour();
  current.hourlyCountInFlight = current.hourlyCount;                  // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
 80802f8:	b510      	push	{r4, lr}
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
 80802fa:	780b      	ldrb	r3, [r1, #0]
  webhookTimeStamp = millis();
  currentHourlyPeriod = Time.hour();
  current.hourlyCountInFlight = current.hourlyCount;                  // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
 80802fc:	b092      	sub	sp, #72	; 0x48
 80802fe:	460c      	mov	r4, r1
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
 8080300:	b923      	cbnz	r3, 808030c <_Z14UbidotsHandlerPKcS0_+0x14>
    snprintf(responseString, sizeof(responseString),"No Data");
 8080302:	4919      	ldr	r1, [pc, #100]	; (8080368 <_Z14UbidotsHandlerPKcS0_+0x70>)
 8080304:	a802      	add	r0, sp, #8
 8080306:	f005 fb6b 	bl	80859e0 <strcpy>
 808030a:	e017      	b.n	808033c <_Z14UbidotsHandlerPKcS0_+0x44>
  }
  else if (atoi(data) == 200 || atoi(data) == 201) {
 808030c:	4608      	mov	r0, r1
 808030e:	f005 f9fd 	bl	808570c <atoi>
 8080312:	28c8      	cmp	r0, #200	; 0xc8
 8080314:	d004      	beq.n	8080320 <_Z14UbidotsHandlerPKcS0_+0x28>
 8080316:	4620      	mov	r0, r4
 8080318:	f005 f9f8 	bl	808570c <atoi>
 808031c:	28c9      	cmp	r0, #201	; 0xc9
 808031e:	d119      	bne.n	8080354 <_Z14UbidotsHandlerPKcS0_+0x5c>
    snprintf(responseString, sizeof(responseString),"Response Received");
 8080320:	4912      	ldr	r1, [pc, #72]	; (808036c <_Z14UbidotsHandlerPKcS0_+0x74>)
 8080322:	a802      	add	r0, sp, #8
 8080324:	f005 fb5c 	bl	80859e0 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
 8080328:	f003 fd9b 	bl	8083e62 <_ZN9TimeClass3nowEv>
 808032c:	4b10      	ldr	r3, [pc, #64]	; (8080370 <_Z14UbidotsHandlerPKcS0_+0x78>)
    systemStatusWriteNeeded = true;
 808032e:	2201      	movs	r2, #1
  if (!strlen(data)) {                                                // No data in response - Error
    snprintf(responseString, sizeof(responseString),"No Data");
  }
  else if (atoi(data) == 200 || atoi(data) == 201) {
    snprintf(responseString, sizeof(responseString),"Response Received");
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
 8080330:	6258      	str	r0, [r3, #36]	; 0x24
    systemStatusWriteNeeded = true;
 8080332:	4b10      	ldr	r3, [pc, #64]	; (8080374 <_Z14UbidotsHandlerPKcS0_+0x7c>)
 8080334:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
 8080336:	4b10      	ldr	r3, [pc, #64]	; (8080378 <_Z14UbidotsHandlerPKcS0_+0x80>)
 8080338:	2200      	movs	r2, #0
 808033a:	701a      	strb	r2, [r3, #0]
 808033c:	4b0f      	ldr	r3, [pc, #60]	; (808037c <_Z14UbidotsHandlerPKcS0_+0x84>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 808033e:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080340:	781b      	ldrb	r3, [r3, #0]
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
  }
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
 8080342:	490f      	ldr	r1, [pc, #60]	; (8080380 <_Z14UbidotsHandlerPKcS0_+0x88>)
 8080344:	f88d 2000 	strb.w	r2, [sp]
 8080348:	480e      	ldr	r0, [pc, #56]	; (8080384 <_Z14UbidotsHandlerPKcS0_+0x8c>)
 808034a:	aa02      	add	r2, sp, #8
 808034c:	f7ff ffc7 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
 8080350:	b012      	add	sp, #72	; 0x48
 8080352:	bd10      	pop	{r4, pc}
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
    systemStatusWriteNeeded = true;
    dataInFlight = false;                                             // Data has been received
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
 8080354:	4620      	mov	r0, r4
 8080356:	f005 f9d9 	bl	808570c <atoi>
 808035a:	4a0b      	ldr	r2, [pc, #44]	; (8080388 <_Z14UbidotsHandlerPKcS0_+0x90>)
 808035c:	4603      	mov	r3, r0
 808035e:	2140      	movs	r1, #64	; 0x40
 8080360:	a802      	add	r0, sp, #8
 8080362:	f002 fb8b 	bl	8082a7c <snprintf>
 8080366:	e7e9      	b.n	808033c <_Z14UbidotsHandlerPKcS0_+0x44>
 8080368:	08086374 	.word	0x08086374
 808036c:	08086389 	.word	0x08086389
 8080370:	20000268 	.word	0x20000268
 8080374:	20000264 	.word	0x20000264
 8080378:	20000228 	.word	0x20000228
 808037c:	20000154 	.word	0x20000154
 8080380:	0808637c 	.word	0x0808637c
 8080384:	2000022c 	.word	0x2000022c
 8080388:	0808639b 	.word	0x0808639b

0808038c <_Z12hardResetNow6String>:
    return 1;
  }
  else return 0;
}

int hardResetNow(String command)   {                                    // Will perform a hard reset on the Electron
 808038c:	b507      	push	{r0, r1, r2, lr}
 808038e:	490d      	ldr	r1, [pc, #52]	; (80803c4 <_Z12hardResetNow6String+0x38>)
 8080390:	f003 fb3c 	bl	8083a0c <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080394:	b198      	cbz	r0, 80803be <_Z12hardResetNow6String+0x32>
 8080396:	4a0c      	ldr	r2, [pc, #48]	; (80803c8 <_Z12hardResetNow6String+0x3c>)
 8080398:	4b0c      	ldr	r3, [pc, #48]	; (80803cc <_Z12hardResetNow6String+0x40>)
 808039a:	7812      	ldrb	r2, [r2, #0]
 808039c:	781b      	ldrb	r3, [r3, #0]
  {
    publishQueue.publish("Reset","Hard Reset in 2 seconds",PRIVATE, WITH_ACK);
 808039e:	490c      	ldr	r1, [pc, #48]	; (80803d0 <_Z12hardResetNow6String+0x44>)
 80803a0:	f88d 2000 	strb.w	r2, [sp]
 80803a4:	480b      	ldr	r0, [pc, #44]	; (80803d4 <_Z12hardResetNow6String+0x48>)
 80803a6:	4a0c      	ldr	r2, [pc, #48]	; (80803d8 <_Z12hardResetNow6String+0x4c>)
 80803a8:	f7ff ff99 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(2000);
 80803ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80803b0:	f002 fb7c 	bl	8082aac <delay>
    digitalWrite(hardResetPin,HIGH);                                    // This will cut all power to the Electron AND the carrir board
 80803b4:	2004      	movs	r0, #4
 80803b6:	2101      	movs	r1, #1
 80803b8:	f003 fff7 	bl	80843aa <digitalWrite>
 80803bc:	2001      	movs	r0, #1
    return 1;                                                           // Unfortunately, this will never be sent
  }
  else return 0;
}
 80803be:	b003      	add	sp, #12
 80803c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80803c4:	080867c0 	.word	0x080867c0
 80803c8:	2000015d 	.word	0x2000015d
 80803cc:	20000154 	.word	0x20000154
 80803d0:	08086605 	.word	0x08086605
 80803d4:	2000022c 	.word	0x2000022c
 80803d8:	080863b8 	.word	0x080863b8

080803dc <_Z14setverboseMode6String>:
  }
  else return 0;
}

int setverboseMode(String command) // Function to force sending data in current hour
{
 80803dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80803de:	491a      	ldr	r1, [pc, #104]	; (8080448 <_Z14setverboseMode6String+0x6c>)
 80803e0:	4604      	mov	r4, r0
 80803e2:	f003 fb13 	bl	8083a0c <_ZNK6String6equalsEPKc>
  if (command == "1")
 80803e6:	4605      	mov	r5, r0
 80803e8:	b1a0      	cbz	r0, 8080414 <_Z14setverboseMode6String+0x38>
  {
    sysStatus.verboseMode = true;
 80803ea:	4b18      	ldr	r3, [pc, #96]	; (808044c <_Z14setverboseMode6String+0x70>)
 80803ec:	2401      	movs	r4, #1
 80803ee:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
 80803f0:	4b17      	ldr	r3, [pc, #92]	; (8080450 <_Z14setverboseMode6String+0x74>)
 80803f2:	701c      	strb	r4, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80803f4:	f002 fa92 	bl	808291c <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
 80803f8:	b908      	cbnz	r0, 80803fe <_Z14setverboseMode6String+0x22>
    return 1;
 80803fa:	2001      	movs	r0, #1
 80803fc:	e022      	b.n	8080444 <_Z14setverboseMode6String+0x68>
 80803fe:	4b15      	ldr	r3, [pc, #84]	; (8080454 <_Z14setverboseMode6String+0x78>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080400:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080402:	781b      	ldrb	r3, [r3, #0]
{
  if (command == "1")
  {
    sysStatus.verboseMode = true;
    systemStatusWriteNeeded = true;
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
 8080404:	4914      	ldr	r1, [pc, #80]	; (8080458 <_Z14setverboseMode6String+0x7c>)
 8080406:	f88d 2000 	strb.w	r2, [sp]
 808040a:	4814      	ldr	r0, [pc, #80]	; (808045c <_Z14setverboseMode6String+0x80>)
 808040c:	4a14      	ldr	r2, [pc, #80]	; (8080460 <_Z14setverboseMode6String+0x84>)
 808040e:	f7ff ff66 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 8080412:	e7f2      	b.n	80803fa <_Z14setverboseMode6String+0x1e>
 8080414:	4913      	ldr	r1, [pc, #76]	; (8080464 <_Z14setverboseMode6String+0x88>)
 8080416:	4620      	mov	r0, r4
 8080418:	f003 faf8 	bl	8083a0c <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 808041c:	b190      	cbz	r0, 8080444 <_Z14setverboseMode6String+0x68>
  {
    sysStatus.verboseMode = false;
 808041e:	4b0b      	ldr	r3, [pc, #44]	; (808044c <_Z14setverboseMode6String+0x70>)
    systemStatusWriteNeeded = true;
 8080420:	2401      	movs	r4, #1
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    sysStatus.verboseMode = false;
 8080422:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
 8080424:	4b0a      	ldr	r3, [pc, #40]	; (8080450 <_Z14setverboseMode6String+0x74>)
 8080426:	701c      	strb	r4, [r3, #0]
 8080428:	f002 fa78 	bl	808291c <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE);
 808042c:	2800      	cmp	r0, #0
 808042e:	d0e4      	beq.n	80803fa <_Z14setverboseMode6String+0x1e>
 8080430:	4b08      	ldr	r3, [pc, #32]	; (8080454 <_Z14setverboseMode6String+0x78>)
 8080432:	4a0d      	ldr	r2, [pc, #52]	; (8080468 <_Z14setverboseMode6String+0x8c>)
 8080434:	781b      	ldrb	r3, [r3, #0]
 8080436:	4908      	ldr	r1, [pc, #32]	; (8080458 <_Z14setverboseMode6String+0x7c>)
 8080438:	f88d 5000 	strb.w	r5, [sp]
 808043c:	4807      	ldr	r0, [pc, #28]	; (808045c <_Z14setverboseMode6String+0x80>)
 808043e:	f7ff ff4e 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 8080442:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
 8080444:	b003      	add	sp, #12
 8080446:	bd30      	pop	{r4, r5, pc}
 8080448:	080867c0 	.word	0x080867c0
 808044c:	20000268 	.word	0x20000268
 8080450:	20000264 	.word	0x20000264
 8080454:	20000154 	.word	0x20000154
 8080458:	08086542 	.word	0x08086542
 808045c:	2000022c 	.word	0x2000022c
 8080460:	080863d0 	.word	0x080863d0
 8080464:	080863e1 	.word	0x080863e1
 8080468:	080863e3 	.word	0x080863e3
 808046c:	00000000 	.word	0x00000000

08080470 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
 8080470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8080474:	b0cb      	sub	sp, #300	; 0x12c
 8080476:	4604      	mov	r4, r0
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
 8080478:	f7ff fea0 	bl	80801bc <_ZN10CloudClass8syncTimeEv.isra.15>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
 808047c:	f7ff ff1e 	bl	80802bc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080480:	f247 582f 	movw	r8, #29999	; 0x752f
 8080484:	4606      	mov	r6, r0
 8080486:	2700      	movs	r7, #0
 8080488:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 808048c:	f7ff ff16 	bl	80802bc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080490:	1b80      	subs	r0, r0, r6
 8080492:	eb61 0107 	sbc.w	r1, r1, r7
 8080496:	4589      	cmp	r9, r1
 8080498:	bf08      	it	eq
 808049a:	4580      	cmpeq	r8, r0
 808049c:	d305      	bcc.n	80804aa <_Z11setTimeZone6String+0x3a>
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
 808049e:	f7ff fe97 	bl	80801d0 <_ZN10CloudClass12syncTimeDoneEv.isra.17>
 80804a2:	b910      	cbnz	r0, 80804aa <_Z11setTimeZone6String+0x3a>
            spark_process();
 80804a4:	f002 fa22 	bl	80828ec <spark_process>
 80804a8:	e7f0      	b.n	808048c <_Z11setTimeZone6String+0x1c>
 80804aa:	f7ff fe91 	bl	80801d0 <_ZN10CloudClass12syncTimeDoneEv.isra.17>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 80804ae:	220a      	movs	r2, #10
 80804b0:	a905      	add	r1, sp, #20
 80804b2:	6820      	ldr	r0, [r4, #0]
 80804b4:	f005 fb6e 	bl	8085b94 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
 80804b8:	f100 030c 	add.w	r3, r0, #12
 80804bc:	b2db      	uxtb	r3, r3
 80804be:	2b18      	cmp	r3, #24
 80804c0:	d847      	bhi.n	8080552 <_Z11setTimeZone6String+0xe2>
{
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 80804c2:	b245      	sxtb	r5, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
  sysStatus.timezone = (float)tempTimeZoneOffset;
 80804c4:	4628      	mov	r0, r5
 80804c6:	f004 fea5 	bl	8085214 <__aeabi_i2f>
 80804ca:	4b27      	ldr	r3, [pc, #156]	; (8080568 <_Z11setTimeZone6String+0xf8>)
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
 80804cc:	2401      	movs	r4, #1
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
  sysStatus.timezone = (float)tempTimeZoneOffset;
 80804ce:	6158      	str	r0, [r3, #20]
  Time.zone(sysStatus.timezone);
 80804d0:	f003 fc3e 	bl	8083d50 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
 80804d4:	4b25      	ldr	r3, [pc, #148]	; (808056c <_Z11setTimeZone6String+0xfc>)
 80804d6:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
 80804d8:	f003 fc2c 	bl	8083d34 <_ZN9TimeClass5localEv>
 80804dc:	4606      	mov	r6, r0
 80804de:	f003 fcc0 	bl	8083e62 <_ZN9TimeClass3nowEv>
 80804e2:	1a30      	subs	r0, r6, r0
 80804e4:	f004 faec 	bl	8084ac0 <__aeabi_i2d>
 80804e8:	a31d      	add	r3, pc, #116	; (adr r3, 8080560 <_Z11setTimeZone6String+0xf0>)
 80804ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80804ee:	f004 fc77 	bl	8084de0 <__aeabi_ddiv>
 80804f2:	4a1f      	ldr	r2, [pc, #124]	; (8080570 <_Z11setTimeZone6String+0x100>)
 80804f4:	e9cd 0100 	strd	r0, r1, [sp]
 80804f8:	210a      	movs	r1, #10
 80804fa:	481e      	ldr	r0, [pc, #120]	; (8080574 <_Z11setTimeZone6String+0x104>)
 80804fc:	f002 fabe 	bl	8082a7c <snprintf>
 8080500:	f002 fa0c 	bl	808291c <spark_cloud_flag_connected>
  if (Particle.connected()) {
 8080504:	b318      	cbz	r0, 808054e <_Z11setTimeZone6String+0xde>
 8080506:	4e1c      	ldr	r6, [pc, #112]	; (8080578 <_Z11setTimeZone6String+0x108>)
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8080508:	462b      	mov	r3, r5
 808050a:	4a1c      	ldr	r2, [pc, #112]	; (808057c <_Z11setTimeZone6String+0x10c>)
 808050c:	f44f 7180 	mov.w	r1, #256	; 0x100
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080510:	2500      	movs	r5, #0
 8080512:	a80a      	add	r0, sp, #40	; 0x28
 8080514:	f002 fab2 	bl	8082a7c <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080518:	7833      	ldrb	r3, [r6, #0]
    publishQueue.publish("Time",data, PRIVATE);
 808051a:	aa0a      	add	r2, sp, #40	; 0x28
 808051c:	4918      	ldr	r1, [pc, #96]	; (8080580 <_Z11setTimeZone6String+0x110>)
 808051e:	f88d 5000 	strb.w	r5, [sp]
 8080522:	4818      	ldr	r0, [pc, #96]	; (8080584 <_Z11setTimeZone6String+0x114>)
 8080524:	f7ff fedb 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
 8080528:	f003 fc9b 	bl	8083e62 <_ZN9TimeClass3nowEv>
 808052c:	4601      	mov	r1, r0
 808052e:	a806      	add	r0, sp, #24
 8080530:	f003 fc54 	bl	8083ddc <_ZN9TimeClass7timeStrEl>
 8080534:	9b06      	ldr	r3, [sp, #24]
 8080536:	4912      	ldr	r1, [pc, #72]	; (8080580 <_Z11setTimeZone6String+0x110>)
 8080538:	9303      	str	r3, [sp, #12]
 808053a:	9a03      	ldr	r2, [sp, #12]
 808053c:	7833      	ldrb	r3, [r6, #0]
 808053e:	4811      	ldr	r0, [pc, #68]	; (8080584 <_Z11setTimeZone6String+0x114>)
 8080540:	f88d 5000 	strb.w	r5, [sp]
 8080544:	f7ff fecb 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 8080548:	a806      	add	r0, sp, #24
 808054a:	f003 f9eb 	bl	8083924 <_ZN6StringD1Ev>
  }

  return 1;
 808054e:	4620      	mov	r0, r4
 8080550:	e000      	b.n	8080554 <_Z11setTimeZone6String+0xe4>
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
 8080552:	2000      	movs	r0, #0
    publishQueue.publish("Time",data, PRIVATE);
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
  }

  return 1;
}
 8080554:	b04b      	add	sp, #300	; 0x12c
 8080556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808055a:	bf00      	nop
 808055c:	f3af 8000 	nop.w
 8080560:	00000000 	.word	0x00000000
 8080564:	40ac2000 	.word	0x40ac2000
 8080568:	20000268 	.word	0x20000268
 808056c:	20000264 	.word	0x20000264
 8080570:	080863f8 	.word	0x080863f8
 8080574:	20000139 	.word	0x20000139
 8080578:	20000154 	.word	0x20000154
 808057c:	08086402 	.word	0x08086402
 8080580:	080866a4 	.word	0x080866a4
 8080584:	2000022c 	.word	0x2000022c

08080588 <_Z11setOpenTime6String.part.36>:

int setOpenTime(String command)
 8080588:	b500      	push	{lr}
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (Particle.connected()) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
 808058a:	4b0b      	ldr	r3, [pc, #44]	; (80805b8 <_Z11setOpenTime6String.part.36+0x30>)
  }

  return 1;
}

int setOpenTime(String command)
 808058c:	b0c3      	sub	sp, #268	; 0x10c
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (Particle.connected()) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
 808058e:	69db      	ldr	r3, [r3, #28]
 8080590:	4a0a      	ldr	r2, [pc, #40]	; (80805bc <_Z11setOpenTime6String.part.36+0x34>)
 8080592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080596:	a802      	add	r0, sp, #8
 8080598:	f002 fa70 	bl	8082a7c <snprintf>
 808059c:	4b08      	ldr	r3, [pc, #32]	; (80805c0 <_Z11setOpenTime6String.part.36+0x38>)
    publishQueue.publish("Time",data, PRIVATE);
 808059e:	2200      	movs	r2, #0
 80805a0:	781b      	ldrb	r3, [r3, #0]
 80805a2:	4908      	ldr	r1, [pc, #32]	; (80805c4 <_Z11setOpenTime6String.part.36+0x3c>)
 80805a4:	f88d 2000 	strb.w	r2, [sp]
 80805a8:	4807      	ldr	r0, [pc, #28]	; (80805c8 <_Z11setOpenTime6String.part.36+0x40>)
 80805aa:	aa02      	add	r2, sp, #8
 80805ac:	f7ff fe97 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  return 1;
}
 80805b0:	2001      	movs	r0, #1
 80805b2:	b043      	add	sp, #268	; 0x10c
 80805b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80805b8:	20000268 	.word	0x20000268
 80805bc:	08086416 	.word	0x08086416
 80805c0:	20000154 	.word	0x20000154
 80805c4:	080866a4 	.word	0x080866a4
 80805c8:	2000022c 	.word	0x2000022c

080805cc <_Z11setOpenTime6String>:

  return 1;
}

int setOpenTime(String command)
{
 80805cc:	b513      	push	{r0, r1, r4, lr}
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
 80805ce:	220a      	movs	r2, #10
 80805d0:	a901      	add	r1, sp, #4
 80805d2:	6800      	ldr	r0, [r0, #0]
 80805d4:	f005 fade 	bl	8085b94 <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
 80805d8:	2817      	cmp	r0, #23
 80805da:	d80a      	bhi.n	80805f2 <_Z11setOpenTime6String+0x26>
  sysStatus.openTime = tempTime;
 80805dc:	4b07      	ldr	r3, [pc, #28]	; (80805fc <_Z11setOpenTime6String+0x30>)
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
 80805de:	2401      	movs	r4, #1
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
 80805e0:	61d8      	str	r0, [r3, #28]
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
 80805e2:	4b07      	ldr	r3, [pc, #28]	; (8080600 <_Z11setOpenTime6String+0x34>)
 80805e4:	701c      	strb	r4, [r3, #0]
 80805e6:	f002 f999 	bl	808291c <spark_cloud_flag_connected>
  if (Particle.connected()) {
 80805ea:	b120      	cbz	r0, 80805f6 <_Z11setOpenTime6String+0x2a>
 80805ec:	f7ff ffcc 	bl	8080588 <_Z11setOpenTime6String.part.36>
 80805f0:	e002      	b.n	80805f8 <_Z11setOpenTime6String+0x2c>
int setOpenTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
 80805f2:	2000      	movs	r0, #0
 80805f4:	e000      	b.n	80805f8 <_Z11setOpenTime6String+0x2c>
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (Particle.connected()) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
    publishQueue.publish("Time",data, PRIVATE);
  }
  return 1;
 80805f6:	4620      	mov	r0, r4
}
 80805f8:	b002      	add	sp, #8
 80805fa:	bd10      	pop	{r4, pc}
 80805fc:	20000268 	.word	0x20000268
 8080600:	20000264 	.word	0x20000264

08080604 <_Z12setCloseTime6String>:

int setCloseTime(String command)
{
 8080604:	b510      	push	{r4, lr}
 8080606:	b0c4      	sub	sp, #272	; 0x110
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080608:	220a      	movs	r2, #10
 808060a:	a903      	add	r1, sp, #12
 808060c:	6800      	ldr	r0, [r0, #0]
 808060e:	f005 fac1 	bl	8085b94 <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080612:	2818      	cmp	r0, #24

int setCloseTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080614:	4603      	mov	r3, r0
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080616:	d818      	bhi.n	808064a <_Z12setCloseTime6String+0x46>
  sysStatus.closeTime = tempTime;
 8080618:	4a0e      	ldr	r2, [pc, #56]	; (8080654 <_Z12setCloseTime6String+0x50>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
 808061a:	2401      	movs	r4, #1
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  sysStatus.closeTime = tempTime;
 808061c:	6210      	str	r0, [r2, #32]
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
 808061e:	4a0e      	ldr	r2, [pc, #56]	; (8080658 <_Z12setCloseTime6String+0x54>)
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
 8080620:	f44f 7180 	mov.w	r1, #256	; 0x100
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  sysStatus.closeTime = tempTime;
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
 8080624:	7014      	strb	r4, [r2, #0]
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
 8080626:	a804      	add	r0, sp, #16
 8080628:	4a0c      	ldr	r2, [pc, #48]	; (808065c <_Z12setCloseTime6String+0x58>)
 808062a:	f002 fa27 	bl	8082a7c <snprintf>
 808062e:	f002 f975 	bl	808291c <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Time",data, PRIVATE);
 8080632:	b160      	cbz	r0, 808064e <_Z12setCloseTime6String+0x4a>
 8080634:	4b0a      	ldr	r3, [pc, #40]	; (8080660 <_Z12setCloseTime6String+0x5c>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080636:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080638:	781b      	ldrb	r3, [r3, #0]
 808063a:	490a      	ldr	r1, [pc, #40]	; (8080664 <_Z12setCloseTime6String+0x60>)
 808063c:	f88d 2000 	strb.w	r2, [sp]
 8080640:	4809      	ldr	r0, [pc, #36]	; (8080668 <_Z12setCloseTime6String+0x64>)
 8080642:	aa04      	add	r2, sp, #16
 8080644:	f7ff fe4b 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 8080648:	e001      	b.n	808064e <_Z12setCloseTime6String+0x4a>
int setCloseTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 808064a:	2000      	movs	r0, #0
 808064c:	e000      	b.n	8080650 <_Z12setCloseTime6String+0x4c>
  sysStatus.closeTime = tempTime;
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
  if (Particle.connected()) publishQueue.publish("Time",data, PRIVATE);
  return 1;
 808064e:	4620      	mov	r0, r4
}
 8080650:	b044      	add	sp, #272	; 0x110
 8080652:	bd10      	pop	{r4, pc}
 8080654:	20000268 	.word	0x20000268
 8080658:	20000264 	.word	0x20000264
 808065c:	0808642a 	.word	0x0808642a
 8080660:	20000154 	.word	0x20000154
 8080664:	080866a4 	.word	0x080866a4
 8080668:	2000022c 	.word	0x2000022c

0808066c <_Z11recordCountv>:
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
  
}

void recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the Arduino
{
 808066c:	b5f0      	push	{r4, r5, r6, r7, lr}
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 808066e:	4d2b      	ldr	r5, [pc, #172]	; (808071c <_Z11recordCountv+0xb0>)
  static byte currentMinutePeriod;                                    // Current minute

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
 8080670:	4e2b      	ldr	r6, [pc, #172]	; (8080720 <_Z11recordCountv+0xb4>)
 8080672:	682b      	ldr	r3, [r5, #0]
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
  
}

void recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the Arduino
{
 8080674:	b0c3      	sub	sp, #268	; 0x10c
 8080676:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 808067a:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
  static byte currentMinutePeriod;                                    // Current minute

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
 808067e:	7834      	ldrb	r4, [r6, #0]
 8080680:	8313      	strh	r3, [r2, #24]
 8080682:	f003 fbff 	bl	8083e84 <_ZN9TimeClass6minuteEv>
 8080686:	4284      	cmp	r4, r0
 8080688:	4c26      	ldr	r4, [pc, #152]	; (8080724 <_Z11recordCountv+0xb8>)
 808068a:	d004      	beq.n	8080696 <_Z11recordCountv+0x2a>
    currentMinutePeriod = Time.minute();                            // Reset period
 808068c:	f003 fbfa 	bl	8083e84 <_ZN9TimeClass6minuteEv>
    current.maxMinValue = 1;                                        // Reset for the new minute
 8080690:	2301      	movs	r3, #1
  static byte currentMinutePeriod;                                    // Current minute

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
    currentMinutePeriod = Time.minute();                            // Reset period
 8080692:	7030      	strb	r0, [r6, #0]
    current.maxMinValue = 1;                                        // Reset for the new minute
 8080694:	61a3      	str	r3, [r4, #24]
  }
  current.maxMinValue++;
 8080696:	69a3      	ldr	r3, [r4, #24]
 8080698:	4f22      	ldr	r7, [pc, #136]	; (8080724 <_Z11recordCountv+0xb8>)
 808069a:	3301      	adds	r3, #1
 808069c:	61a3      	str	r3, [r4, #24]

  current.lastCountTime = Time.now();
 808069e:	f003 fbe0 	bl	8083e62 <_ZN9TimeClass3nowEv>
      { return __atomic_fetch_sub(&_M_i, __i, __m); }

      _GLIBCXX_ALWAYS_INLINE __int_type
      fetch_and(__int_type __i,
		memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_and(&_M_i, __i, __m); }
 80806a2:	4a21      	ldr	r2, [pc, #132]	; (8080728 <_Z11recordCountv+0xbc>)
 80806a4:	60e0      	str	r0, [r4, #12]
 80806a6:	2600      	movs	r6, #0
 80806a8:	e852 3f00 	ldrex	r3, [r2]
 80806ac:	e842 6100 	strex	r1, r6, [r2]
 80806b0:	2900      	cmp	r1, #0
 80806b2:	d1f9      	bne.n	80806a8 <_Z11recordCountv+0x3c>
  current.hourlyCount += hourlyAtomic.fetch_and(0,std::memory_order_relaxed);   // Increment the hourlyCount from the atomic variable
 80806b4:	6822      	ldr	r2, [r4, #0]
 80806b6:	4413      	add	r3, r2
 80806b8:	4a1c      	ldr	r2, [pc, #112]	; (808072c <_Z11recordCountv+0xc0>)
 80806ba:	6023      	str	r3, [r4, #0]
 80806bc:	e852 3f00 	ldrex	r3, [r2]
 80806c0:	e842 6100 	strex	r1, r6, [r2]
 80806c4:	2900      	cmp	r1, #0
 80806c6:	d1f9      	bne.n	80806bc <_Z11recordCountv+0x50>
  current.dailyCount += dailyAtomic.fetch_and(0,std::memory_order_relaxed);    // Increment the dailyCount from the atomic vairable
 80806c8:	68a2      	ldr	r2, [r4, #8]
 80806ca:	4413      	add	r3, r2
 80806cc:	60a3      	str	r3, [r4, #8]
  if (sysStatus.verboseMode && Particle.connected()) {
 80806ce:	4b18      	ldr	r3, [pc, #96]	; (8080730 <_Z11recordCountv+0xc4>)
 80806d0:	791b      	ldrb	r3, [r3, #4]
 80806d2:	b113      	cbz	r3, 80806da <_Z11recordCountv+0x6e>
 80806d4:	f002 f922 	bl	808291c <spark_cloud_flag_connected>
 80806d8:	b968      	cbnz	r0, 80806f6 <_Z11recordCountv+0x8a>
    char data[256];                                                    // Store the date in this character array - not global
    snprintf(data, sizeof(data), "Count, hourly: %i, daily: %i",current.hourlyCount,current.dailyCount);
    publishQueue.publish("Count",data, PRIVATE);                           // Helpful for monitoring and calibration
  }

  currentCountsWriteNeeded = true;                                    // Write updated values to FRAM
 80806da:	4b16      	ldr	r3, [pc, #88]	; (8080734 <_Z11recordCountv+0xc8>)
 80806dc:	2201      	movs	r2, #1
 80806de:	701a      	strb	r2, [r3, #0]
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80806e0:	682b      	ldr	r3, [r5, #0]
 80806e2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80806e6:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80806ea:	8353      	strh	r3, [r2, #26]
  pinResetFast(blueLED);                                              // Turn off the blue LED
  sensorDetect = false;                                               // Reset the flag
 80806ec:	4b12      	ldr	r3, [pc, #72]	; (8080738 <_Z11recordCountv+0xcc>)
 80806ee:	2200      	movs	r2, #0
 80806f0:	701a      	strb	r2, [r3, #0]
}
 80806f2:	b043      	add	sp, #268	; 0x10c
 80806f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  current.lastCountTime = Time.now();
  current.hourlyCount += hourlyAtomic.fetch_and(0,std::memory_order_relaxed);   // Increment the hourlyCount from the atomic variable
  current.dailyCount += dailyAtomic.fetch_and(0,std::memory_order_relaxed);    // Increment the dailyCount from the atomic vairable
  if (sysStatus.verboseMode && Particle.connected()) {
    char data[256];                                                    // Store the date in this character array - not global
    snprintf(data, sizeof(data), "Count, hourly: %i, daily: %i",current.hourlyCount,current.dailyCount);
 80806f6:	68bb      	ldr	r3, [r7, #8]
 80806f8:	4a10      	ldr	r2, [pc, #64]	; (808073c <_Z11recordCountv+0xd0>)
 80806fa:	9300      	str	r3, [sp, #0]
 80806fc:	683b      	ldr	r3, [r7, #0]
 80806fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080702:	a802      	add	r0, sp, #8
 8080704:	f002 f9ba 	bl	8082a7c <snprintf>
 8080708:	4b0d      	ldr	r3, [pc, #52]	; (8080740 <_Z11recordCountv+0xd4>)
    publishQueue.publish("Count",data, PRIVATE);                           // Helpful for monitoring and calibration
 808070a:	aa02      	add	r2, sp, #8
 808070c:	781b      	ldrb	r3, [r3, #0]
 808070e:	490d      	ldr	r1, [pc, #52]	; (8080744 <_Z11recordCountv+0xd8>)
 8080710:	f88d 6000 	strb.w	r6, [sp]
 8080714:	480c      	ldr	r0, [pc, #48]	; (8080748 <_Z11recordCountv+0xdc>)
 8080716:	f7ff fde2 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 808071a:	e7de      	b.n	80806da <_Z11recordCountv+0x6e>
 808071c:	200001b4 	.word	0x200001b4
 8080720:	20000180 	.word	0x20000180
 8080724:	2000020c 	.word	0x2000020c
 8080728:	2000017c 	.word	0x2000017c
 808072c:	20000178 	.word	0x20000178
 8080730:	20000268 	.word	0x20000268
 8080734:	20000204 	.word	0x20000204
 8080738:	20000138 	.word	0x20000138
 808073c:	08086441 	.word	0x08086441
 8080740:	20000154 	.word	0x20000154
 8080744:	0808666d 	.word	0x0808666d
 8080748:	2000022c 	.word	0x2000022c

0808074c <_Z9sendEventv>:
  pinResetFast(blueLED);                                              // Turn off the blue LED
  sensorDetect = false;                                               // Reset the flag
}


void sendEvent() {
 808074c:	b510      	push	{r4, lr}
 808074e:	b0c8      	sub	sp, #288	; 0x120
  char data[256];                                                     // Store the date in this character array - not global
  unsigned long timeStampValue = Time.now();                          // Going to start sending timestamps - and will modify for midnight to fix reporting issue
 8080750:	f003 fb87 	bl	8083e62 <_ZN9TimeClass3nowEv>
  int secondsPastHour = timeStampValue % 3600;
 8080754:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8080758:	fbb0 f3f2 	udiv	r3, r0, r2
 808075c:	fb02 0313 	mls	r3, r2, r3, r0
  timeStampValue = timeStampValue - (secondsPastHour + 1);            // This ensures that the midnight report is back-dated 5 minutes 
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"daily\":%i,\"battery\":%i,  \"key1\":\"%s\", \"temp\":%i, \"resets\":%i, \"alerts\":%i, \"maxmin\":%i, \"timestamp\":%lu000}",current.hourlyCount, current.dailyCount, sysStatus.stateOfCharge, batteryContextStr, current.temperature, sysStatus.resetCount, current.alertCount, current.maxMinValue, timeStampValue);
 8080760:	4c19      	ldr	r4, [pc, #100]	; (80807c8 <_Z9sendEventv+0x7c>)
 8080762:	3801      	subs	r0, #1
 8080764:	1ac0      	subs	r0, r0, r3
 8080766:	69a3      	ldr	r3, [r4, #24]
 8080768:	9007      	str	r0, [sp, #28]
 808076a:	9306      	str	r3, [sp, #24]
 808076c:	6963      	ldr	r3, [r4, #20]
 808076e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080772:	9305      	str	r3, [sp, #20]
 8080774:	4b15      	ldr	r3, [pc, #84]	; (80807cc <_Z9sendEventv+0x80>)
 8080776:	a808      	add	r0, sp, #32
 8080778:	691a      	ldr	r2, [r3, #16]
 808077a:	9204      	str	r2, [sp, #16]
 808077c:	6922      	ldr	r2, [r4, #16]
 808077e:	9203      	str	r2, [sp, #12]
 8080780:	4a13      	ldr	r2, [pc, #76]	; (80807d0 <_Z9sendEventv+0x84>)
 8080782:	9202      	str	r2, [sp, #8]
 8080784:	689b      	ldr	r3, [r3, #8]
 8080786:	4a13      	ldr	r2, [pc, #76]	; (80807d4 <_Z9sendEventv+0x88>)
 8080788:	9301      	str	r3, [sp, #4]
 808078a:	68a3      	ldr	r3, [r4, #8]
 808078c:	9300      	str	r3, [sp, #0]
 808078e:	6823      	ldr	r3, [r4, #0]
 8080790:	f002 f974 	bl	8082a7c <snprintf>
 8080794:	4b10      	ldr	r3, [pc, #64]	; (80807d8 <_Z9sendEventv+0x8c>)
  publishQueue.publish("Electron-Connected-Counter-Ubidots", data, PRIVATE);
 8080796:	2200      	movs	r2, #0
 8080798:	4910      	ldr	r1, [pc, #64]	; (80807dc <_Z9sendEventv+0x90>)
 808079a:	781b      	ldrb	r3, [r3, #0]
 808079c:	4810      	ldr	r0, [pc, #64]	; (80807e0 <_Z9sendEventv+0x94>)
 808079e:	f88d 2000 	strb.w	r2, [sp]
 80807a2:	aa08      	add	r2, sp, #32
 80807a4:	f7ff fd9b 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                // set the data inflight flag
 80807a8:	4b0e      	ldr	r3, [pc, #56]	; (80807e4 <_Z9sendEventv+0x98>)
 80807aa:	2201      	movs	r2, #1
 80807ac:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80807ae:	f001 feb3 	bl	8082518 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
 80807b2:	4b0d      	ldr	r3, [pc, #52]	; (80807e8 <_Z9sendEventv+0x9c>)
 80807b4:	6018      	str	r0, [r3, #0]
  currentHourlyPeriod = Time.hour();
 80807b6:	f003 fb5b 	bl	8083e70 <_ZN9TimeClass4hourEv>
 80807ba:	4b0c      	ldr	r3, [pc, #48]	; (80807ec <_Z9sendEventv+0xa0>)
 80807bc:	6018      	str	r0, [r3, #0]
  current.hourlyCountInFlight = current.hourlyCount;                  // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
 80807be:	6823      	ldr	r3, [r4, #0]
 80807c0:	6063      	str	r3, [r4, #4]
}
 80807c2:	b048      	add	sp, #288	; 0x120
 80807c4:	bd10      	pop	{r4, pc}
 80807c6:	bf00      	nop
 80807c8:	2000020c 	.word	0x2000020c
 80807cc:	20000268 	.word	0x20000268
 80807d0:	2000015e 	.word	0x2000015e
 80807d4:	0808645e 	.word	0x0808645e
 80807d8:	20000154 	.word	0x20000154
 80807dc:	080864d9 	.word	0x080864d9
 80807e0:	2000022c 	.word	0x2000022c
 80807e4:	20000228 	.word	0x20000228
 80807e8:	20000170 	.word	0x20000170
 80807ec:	20000184 	.word	0x20000184

080807f0 <_Z17getSignalStrengthv>:
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
  systemStatusWriteNeeded=true;
}


void getSignalStrength() {
 80807f0:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
 80807f2:	4d17      	ldr	r5, [pc, #92]	; (8080850 <_Z17getSignalStrengthv+0x60>)
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
  systemStatusWriteNeeded=true;
}


void getSignalStrength() {
 80807f4:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
 80807f6:	ac04      	add	r4, sp, #16
 80807f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80807fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80807fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80807fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8080800:	e895 0003 	ldmia.w	r5, {r0, r1}
 8080804:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
 8080808:	4912      	ldr	r1, [pc, #72]	; (8080854 <_Z17getSignalStrengthv+0x64>)
 808080a:	a80e      	add	r0, sp, #56	; 0x38
 808080c:	f002 f9bc 	bl	8082b88 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
 8080810:	a80e      	add	r0, sp, #56	; 0x38
 8080812:	f002 fa0c 	bl	8082c2e <_ZNK14CellularSignal19getAccessTechnologyEv>
 8080816:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
 8080818:	a80e      	add	r0, sp, #56	; 0x38
 808081a:	f002 fa4f 	bl	8082cbc <_ZNK14CellularSignal11getStrengthEv>
 808081e:	4605      	mov	r5, r0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
 8080820:	a80e      	add	r0, sp, #56	; 0x38
 8080822:	f002 fa33 	bl	8082c8c <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 8080826:	ab18      	add	r3, sp, #96	; 0x60
 8080828:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 808082c:	f004 f95a 	bl	8084ae4 <__aeabi_f2d>
 8080830:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080834:	4628      	mov	r0, r5
 8080836:	f004 f955 	bl	8084ae4 <__aeabi_f2d>
 808083a:	e9cd 0100 	strd	r0, r1, [sp]
 808083e:	4a06      	ldr	r2, [pc, #24]	; (8080858 <_Z17getSignalStrengthv+0x68>)
 8080840:	f854 3c50 	ldr.w	r3, [r4, #-80]
 8080844:	2140      	movs	r1, #64	; 0x40
 8080846:	4805      	ldr	r0, [pc, #20]	; (808085c <_Z17getSignalStrengthv+0x6c>)
 8080848:	f002 f918 	bl	8082a7c <snprintf>
}
 808084c:	b019      	add	sp, #100	; 0x64
 808084e:	bd30      	pop	{r4, r5, pc}
 8080850:	08086330 	.word	0x08086330
 8080854:	20000294 	.word	0x20000294
 8080858:	080864fc 	.word	0x080864fc
 808085c:	200001bc 	.word	0x200001bc

08080860 <_Z14getTemperaturev>:
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);

}

int getTemperature()
{
 8080860:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
 8080862:	200a      	movs	r0, #10
 8080864:	f003 fdcd 	bl	8084402 <analogRead>
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
 8080868:	f004 f92a 	bl	8084ac0 <__aeabi_i2d>
 808086c:	a316      	add	r3, pc, #88	; (adr r3, 80808c8 <_Z14getTemperaturev+0x68>)
 808086e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080872:	f004 f98b 	bl	8084b8c <__aeabi_dmul>
 8080876:	f004 fbc3 	bl	8085000 <__aeabi_d2f>
  voltage /= 4096.0;                                                  // Electron is different than the Arduino where there are only 1024 steps
  int temperatureC = int(((voltage - 0.5) * 100));                    //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);              // now convert to Fahrenheit
 808087a:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 808087e:	f004 fd1d 	bl	80852bc <__aeabi_fmul>
 8080882:	f004 f92f 	bl	8084ae4 <__aeabi_f2d>
 8080886:	2200      	movs	r2, #0
 8080888:	4b11      	ldr	r3, [pc, #68]	; (80808d0 <_Z14getTemperaturev+0x70>)
 808088a:	f003 ffcb 	bl	8084824 <__aeabi_dsub>
 808088e:	2200      	movs	r2, #0
 8080890:	4b10      	ldr	r3, [pc, #64]	; (80808d4 <_Z14getTemperaturev+0x74>)
 8080892:	f004 f97b 	bl	8084b8c <__aeabi_dmul>
 8080896:	f004 fb8b 	bl	8084fb0 <__aeabi_d2iz>
 808089a:	f004 f911 	bl	8084ac0 <__aeabi_i2d>
 808089e:	2200      	movs	r2, #0
 80808a0:	4b0d      	ldr	r3, [pc, #52]	; (80808d8 <_Z14getTemperaturev+0x78>)
 80808a2:	f004 f973 	bl	8084b8c <__aeabi_dmul>
 80808a6:	2200      	movs	r2, #0
 80808a8:	4b0c      	ldr	r3, [pc, #48]	; (80808dc <_Z14getTemperaturev+0x7c>)
 80808aa:	f004 fa99 	bl	8084de0 <__aeabi_ddiv>
 80808ae:	2200      	movs	r2, #0
 80808b0:	4b0b      	ldr	r3, [pc, #44]	; (80808e0 <_Z14getTemperaturev+0x80>)
 80808b2:	f003 ffb9 	bl	8084828 <__adddf3>
 80808b6:	f004 fb7b 	bl	8084fb0 <__aeabi_d2iz>
 80808ba:	4b0a      	ldr	r3, [pc, #40]	; (80808e4 <_Z14getTemperaturev+0x84>)
  currentCountsWriteNeeded=true;
 80808bc:	2201      	movs	r2, #1
{
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
  voltage /= 4096.0;                                                  // Electron is different than the Arduino where there are only 1024 steps
  int temperatureC = int(((voltage - 0.5) * 100));                    //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);              // now convert to Fahrenheit
 80808be:	6118      	str	r0, [r3, #16]
  currentCountsWriteNeeded=true;
 80808c0:	4b09      	ldr	r3, [pc, #36]	; (80808e8 <_Z14getTemperaturev+0x88>)
 80808c2:	701a      	strb	r2, [r3, #0]
  return current.temperature;
}
 80808c4:	bd08      	pop	{r3, pc}
 80808c6:	bf00      	nop
 80808c8:	66666666 	.word	0x66666666
 80808cc:	400a6666 	.word	0x400a6666
 80808d0:	3fe00000 	.word	0x3fe00000
 80808d4:	40590000 	.word	0x40590000
 80808d8:	40220000 	.word	0x40220000
 80808dc:	40140000 	.word	0x40140000
 80808e0:	40400000 	.word	0x40400000
 80808e4:	2000020c 	.word	0x2000020c
 80808e8:	20000204 	.word	0x20000204

080808ec <_Z11petWatchdogv>:
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80808ec:	4b07      	ldr	r3, [pc, #28]	; (808090c <_Z11petWatchdogv+0x20>)
 80808ee:	681b      	ldr	r3, [r3, #0]
 80808f0:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80808f4:	f8b3 10ac 	ldrh.w	r1, [r3, #172]	; 0xac
 80808f8:	8311      	strh	r1, [r2, #24]
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80808fa:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80808fe:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8080902:	8353      	strh	r3, [r2, #26]

void petWatchdog()
{
  digitalWriteFast(donePin, HIGH);                                        // Pet the watchdog
  digitalWriteFast(donePin, LOW);
  watchdogFlag = false;
 8080904:	4b02      	ldr	r3, [pc, #8]	; (8080910 <_Z11petWatchdogv+0x24>)
 8080906:	2200      	movs	r2, #0
 8080908:	701a      	strb	r2, [r3, #0]
 808090a:	4770      	bx	lr
 808090c:	200001b4 	.word	0x200001b4
 8080910:	20000188 	.word	0x20000188

08080914 <_Z14enableChargingb>:
    return res;
  }
}

bool enableCharging(bool enableCharge)
{
 8080914:	b513      	push	{r0, r1, r4, lr}
 8080916:	4604      	mov	r4, r0
  PMIC pmic(true);
 8080918:	2101      	movs	r1, #1
 808091a:	a801      	add	r0, sp, #4
 808091c:	f002 fee1 	bl	80836e2 <_ZN4PMICC1Eb>
  if(enableCharge) {
    pmic.enableCharging();
 8080920:	a801      	add	r0, sp, #4
}

bool enableCharging(bool enableCharge)
{
  PMIC pmic(true);
  if(enableCharge) {
 8080922:	b11c      	cbz	r4, 808092c <_Z14enableChargingb+0x18>
    pmic.enableCharging();
 8080924:	f002 ff78 	bl	8083818 <_ZN4PMIC14enableChargingEv>
    return TRUE;
 8080928:	2401      	movs	r4, #1
 808092a:	e001      	b.n	8080930 <_Z14enableChargingb+0x1c>
  }
  else {
    pmic.disableCharging();
 808092c:	f002 ff44 	bl	80837b8 <_ZN4PMIC15disableChargingEv>
  }
}

bool enableCharging(bool enableCharge)
{
  PMIC pmic(true);
 8080930:	a801      	add	r0, sp, #4
 8080932:	f002 fee5 	bl	8083700 <_ZN4PMICD1Ev>
  }
  else {
    pmic.disableCharging();
    return FALSE;
  }
}
 8080936:	4620      	mov	r0, r4
 8080938:	b002      	add	sp, #8
 808093a:	bd10      	pop	{r4, pc}

0808093c <_Z14setPowerConfigv>:
  watchdogFlag = false;
}


// Power Management function
int setPowerConfig() {
 808093c:	b510      	push	{r4, lr}

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
 808093e:	2420      	movs	r4, #32
 8080940:	b090      	sub	sp, #64	; 0x40
 8080942:	4622      	mov	r2, r4
 8080944:	2100      	movs	r1, #0
 8080946:	4668      	mov	r0, sp
 8080948:	f005 f810 	bl	808596c <memset>
 808094c:	4622      	mov	r2, r4
 808094e:	2100      	movs	r1, #0
 8080950:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
 8080954:	f88d 4005 	strb.w	r4, [sp, #5]

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
 8080958:	f005 f808 	bl	808596c <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
 808095c:	2100      	movs	r1, #0
 808095e:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
 8080962:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
 8080966:	f001 ff9d 	bl	80828a4 <system_power_management_set_config>
  SystemPowerConfiguration conf;
  System.setPowerConfiguration(SystemPowerConfiguration());  // To restore the default configuration

  if (sysStatus.solarPowerMode) {
 808096a:	4b19      	ldr	r3, [pc, #100]	; (80809d0 <_Z14setPowerConfigv+0x94>)
 808096c:	f241 0070 	movw	r0, #4208	; 0x1070
 8080970:	7959      	ldrb	r1, [r3, #5]
 8080972:	9b00      	ldr	r3, [sp, #0]
 8080974:	b191      	cbz	r1, 808099c <_Z14setPowerConfigv+0x60>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
 8080976:	f240 2226 	movw	r2, #550	; 0x226
 808097a:	f8ad 2008 	strh.w	r2, [sp, #8]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
 808097e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8080982:	f8ad 200a 	strh.w	r2, [sp, #10]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
 8080986:	f241 0272 	movw	r2, #4210	; 0x1072
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
 808098a:	f443 7300 	orr.w	r3, r3, #512	; 0x200

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
 808098e:	f8ad 0006 	strh.w	r0, [sp, #6]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
 8080992:	f8ad 200c 	strh.w	r2, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
 8080996:	9300      	str	r3, [sp, #0]
 8080998:	2100      	movs	r1, #0
 808099a:	e00e      	b.n	80809ba <_Z14setPowerConfigv+0x7e>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
 808099c:	f44f 7261 	mov.w	r2, #900	; 0x384
 80809a0:	f8ad 2008 	strh.w	r2, [sp, #8]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
 80809a4:	f8ad 200a 	strh.w	r2, [sp, #10]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
 80809a8:	f241 0210 	movw	r2, #4112	; 0x1010
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
 80809ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
 80809b0:	f8ad 0006 	strh.w	r0, [sp, #6]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
 80809b4:	f8ad 200c 	strh.w	r2, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
 80809b8:	9300      	str	r3, [sp, #0]
 80809ba:	4668      	mov	r0, sp
 80809bc:	f001 ff72 	bl	80828a4 <system_power_management_set_config>
 80809c0:	4604      	mov	r4, r0
        .powerSourceMinVoltage(4208)                                  // This is the default value for the Boron
        .batteryChargeCurrent(900)                                    // higher charge current from DC-IN when not solar powered
        .batteryChargeVoltage(4112)                                   // default is 4.112V termination voltage
        .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST) ;
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    enableCharging(true);
 80809c2:	2001      	movs	r0, #1
 80809c4:	f7ff ffa6 	bl	8080914 <_Z14enableChargingb>
    return res;
  }
}
 80809c8:	4620      	mov	r0, r4
 80809ca:	b010      	add	sp, #64	; 0x40
 80809cc:	bd10      	pop	{r4, pc}
 80809ce:	bf00      	nop
 80809d0:	20000268 	.word	0x20000268

080809d4 <_Z12setSolarMode6String>:
  currentCountsWriteNeeded=true;
  systemStatusWriteNeeded=true;
}

int setSolarMode(String command) // Function to force sending data in current hour
{
 80809d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80809d6:	491c      	ldr	r1, [pc, #112]	; (8080a48 <_Z12setSolarMode6String+0x74>)
 80809d8:	4604      	mov	r4, r0
 80809da:	f003 f817 	bl	8083a0c <_ZNK6String6equalsEPKc>
  if (command == "1")
 80809de:	4605      	mov	r5, r0
 80809e0:	b1b0      	cbz	r0, 8080a10 <_Z12setSolarMode6String+0x3c>
  {
    sysStatus.solarPowerMode = true;
 80809e2:	4b1a      	ldr	r3, [pc, #104]	; (8080a4c <_Z12setSolarMode6String+0x78>)
 80809e4:	2401      	movs	r4, #1
 80809e6:	715c      	strb	r4, [r3, #5]
    setPowerConfig();                                               // Change the power management Settings
 80809e8:	f7ff ffa8 	bl	808093c <_Z14setPowerConfigv>
    systemStatusWriteNeeded=true;
 80809ec:	4b18      	ldr	r3, [pc, #96]	; (8080a50 <_Z12setSolarMode6String+0x7c>)
 80809ee:	701c      	strb	r4, [r3, #0]
 80809f0:	f001 ff94 	bl	808291c <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set Solar Powered Mode", PRIVATE);
 80809f4:	b908      	cbnz	r0, 80809fa <_Z12setSolarMode6String+0x26>
    return 1;
 80809f6:	2001      	movs	r0, #1
 80809f8:	e024      	b.n	8080a44 <_Z12setSolarMode6String+0x70>
 80809fa:	4b16      	ldr	r3, [pc, #88]	; (8080a54 <_Z12setSolarMode6String+0x80>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80809fc:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80809fe:	781b      	ldrb	r3, [r3, #0]
  if (command == "1")
  {
    sysStatus.solarPowerMode = true;
    setPowerConfig();                                               // Change the power management Settings
    systemStatusWriteNeeded=true;
    if (Particle.connected()) publishQueue.publish("Mode","Set Solar Powered Mode", PRIVATE);
 8080a00:	4915      	ldr	r1, [pc, #84]	; (8080a58 <_Z12setSolarMode6String+0x84>)
 8080a02:	f88d 2000 	strb.w	r2, [sp]
 8080a06:	4815      	ldr	r0, [pc, #84]	; (8080a5c <_Z12setSolarMode6String+0x88>)
 8080a08:	4a15      	ldr	r2, [pc, #84]	; (8080a60 <_Z12setSolarMode6String+0x8c>)
 8080a0a:	f7ff fc68 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 8080a0e:	e7f2      	b.n	80809f6 <_Z12setSolarMode6String+0x22>
 8080a10:	4914      	ldr	r1, [pc, #80]	; (8080a64 <_Z12setSolarMode6String+0x90>)
 8080a12:	4620      	mov	r0, r4
 8080a14:	f002 fffa 	bl	8083a0c <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 8080a18:	b1a0      	cbz	r0, 8080a44 <_Z12setSolarMode6String+0x70>
  {
    sysStatus.solarPowerMode = false;
 8080a1a:	4b0c      	ldr	r3, [pc, #48]	; (8080a4c <_Z12setSolarMode6String+0x78>)
    systemStatusWriteNeeded=true;
 8080a1c:	2401      	movs	r4, #1
    if (Particle.connected()) publishQueue.publish("Mode","Set Solar Powered Mode", PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    sysStatus.solarPowerMode = false;
 8080a1e:	715d      	strb	r5, [r3, #5]
    systemStatusWriteNeeded=true;
 8080a20:	4b0b      	ldr	r3, [pc, #44]	; (8080a50 <_Z12setSolarMode6String+0x7c>)
 8080a22:	701c      	strb	r4, [r3, #0]
    setPowerConfig();                                                // Change the power management settings
 8080a24:	f7ff ff8a 	bl	808093c <_Z14setPowerConfigv>
 8080a28:	f001 ff78 	bl	808291c <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Solar Powered Mode", PRIVATE);
 8080a2c:	2800      	cmp	r0, #0
 8080a2e:	d0e2      	beq.n	80809f6 <_Z12setSolarMode6String+0x22>
 8080a30:	4b08      	ldr	r3, [pc, #32]	; (8080a54 <_Z12setSolarMode6String+0x80>)
 8080a32:	4a0d      	ldr	r2, [pc, #52]	; (8080a68 <_Z12setSolarMode6String+0x94>)
 8080a34:	781b      	ldrb	r3, [r3, #0]
 8080a36:	4908      	ldr	r1, [pc, #32]	; (8080a58 <_Z12setSolarMode6String+0x84>)
 8080a38:	f88d 5000 	strb.w	r5, [sp]
 8080a3c:	4807      	ldr	r0, [pc, #28]	; (8080a5c <_Z12setSolarMode6String+0x88>)
 8080a3e:	f7ff fc4e 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 8080a42:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
 8080a44:	b003      	add	sp, #12
 8080a46:	bd30      	pop	{r4, r5, pc}
 8080a48:	080867c0 	.word	0x080867c0
 8080a4c:	20000268 	.word	0x20000268
 8080a50:	20000264 	.word	0x20000264
 8080a54:	20000154 	.word	0x20000154
 8080a58:	08086542 	.word	0x08086542
 8080a5c:	2000022c 	.word	0x2000022c
 8080a60:	08086515 	.word	0x08086515
 8080a64:	080863e1 	.word	0x080863e1
 8080a68:	0808652c 	.word	0x0808652c

08080a6c <_Z17connectToParticlev>:

 // These are the particle functions that allow you to configure and run the device
 // They are intended to allow for customization and control during installations
 // and to allow for management.

bool connectToParticle() {
 8080a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8080a70:	481f      	ldr	r0, [pc, #124]	; (8080af0 <_Z17connectToParticlev+0x84>)
 8080a72:	2300      	movs	r3, #0
 8080a74:	461a      	mov	r2, r3
 8080a76:	4619      	mov	r1, r3
 8080a78:	6840      	ldr	r0, [r0, #4]
 8080a7a:	f001 ffa7 	bl	80829cc <network_on>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080a7e:	f240 36e7 	movw	r6, #999	; 0x3e7
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8080a82:	f001 ff3b 	bl	80828fc <spark_cloud_flag_connect>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
 8080a86:	4d1b      	ldr	r5, [pc, #108]	; (8080af4 <_Z17connectToParticlev+0x88>)
 8080a88:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8080a8c:	2700      	movs	r7, #0
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
 8080a8e:	f7ff fc15 	bl	80802bc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080a92:	4680      	mov	r8, r0
 8080a94:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8080a98:	f7ff fc10 	bl	80802bc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080a9c:	ebb0 0008 	subs.w	r0, r0, r8
 8080aa0:	eb61 0109 	sbc.w	r1, r1, r9
 8080aa4:	428f      	cmp	r7, r1
 8080aa6:	bf08      	it	eq
 8080aa8:	4286      	cmpeq	r6, r0
 8080aaa:	d305      	bcc.n	8080ab8 <_Z17connectToParticlev+0x4c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080aac:	f001 ff36 	bl	808291c <spark_cloud_flag_connected>
 8080ab0:	b910      	cbnz	r0, 8080ab8 <_Z17connectToParticlev+0x4c>
            spark_process();
 8080ab2:	f001 ff1b 	bl	80828ec <spark_process>
 8080ab6:	e7ef      	b.n	8080a98 <_Z17connectToParticlev+0x2c>
 8080ab8:	f001 ff30 	bl	808291c <spark_cloud_flag_connected>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 8080abc:	b148      	cbz	r0, 8080ad2 <_Z17connectToParticlev+0x66>
 8080abe:	f001 ff2d 	bl	808291c <spark_cloud_flag_connected>
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
    Particle.process();
  }
  if (Particle.connected()) {
 8080ac2:	b198      	cbz	r0, 8080aec <_Z17connectToParticlev+0x80>
    sysStatus.connectedStatus = true;
 8080ac4:	4a0c      	ldr	r2, [pc, #48]	; (8080af8 <_Z17connectToParticlev+0x8c>)
 8080ac6:	2301      	movs	r3, #1
 8080ac8:	70d3      	strb	r3, [r2, #3]
    systemStatusWriteNeeded = true;
 8080aca:	4a0c      	ldr	r2, [pc, #48]	; (8080afc <_Z17connectToParticlev+0x90>)
 8080acc:	7013      	strb	r3, [r2, #0]
    return 1;                               // Were able to connect successfully
 8080ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
 8080ad2:	782b      	ldrb	r3, [r5, #0]
 8080ad4:	b10b      	cbz	r3, 8080ada <_Z17connectToParticlev+0x6e>
 8080ad6:	f7ff fdc9 	bl	808066c <_Z11recordCountv>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080ada:	f001 fd1d 	bl	8082518 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080ade:	4b08      	ldr	r3, [pc, #32]	; (8080b00 <_Z17connectToParticlev+0x94>)
 8080ae0:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080ae2:	f001 ff03 	bl	80828ec <spark_process>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 8080ae6:	3c01      	subs	r4, #1
 8080ae8:	d0e9      	beq.n	8080abe <_Z17connectToParticlev+0x52>
 8080aea:	e7d0      	b.n	8080a8e <_Z17connectToParticlev+0x22>
    return 1;                               // Were able to connect successfully
  }
  else {
    return 0;                                                    // Failed to connect
  }
}
 8080aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8080af0:	20000294 	.word	0x20000294
 8080af4:	20000138 	.word	0x20000138
 8080af8:	20000268 	.word	0x20000268
 8080afc:	20000264 	.word	0x20000264
 8080b00:	20000850 	.word	0x20000850

08080b04 <_Z15setLowPowerMode6String>:
  if (Particle.connected()) publishQueue.publish("Time",data, PRIVATE);
  return 1;
}

int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
 8080b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 8080b06:	4923      	ldr	r1, [pc, #140]	; (8080b94 <_Z15setLowPowerMode6String+0x90>)
 8080b08:	4604      	mov	r4, r0
 8080b0a:	f002 ff7f 	bl	8083a0c <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
 8080b0e:	b928      	cbnz	r0, 8080b1c <_Z15setLowPowerMode6String+0x18>
 8080b10:	4921      	ldr	r1, [pc, #132]	; (8080b98 <_Z15setLowPowerMode6String+0x94>)
 8080b12:	4620      	mov	r0, r4
 8080b14:	f002 ff7a 	bl	8083a0c <_ZNK6String6equalsEPKc>
 8080b18:	2800      	cmp	r0, #0
 8080b1a:	d039      	beq.n	8080b90 <_Z15setLowPowerMode6String+0x8c>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080b1c:	491d      	ldr	r1, [pc, #116]	; (8080b94 <_Z15setLowPowerMode6String+0x90>)
 8080b1e:	4620      	mov	r0, r4
 8080b20:	f002 ff74 	bl	8083a0c <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
 8080b24:	b188      	cbz	r0, 8080b4a <_Z15setLowPowerMode6String+0x46>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080b26:	f001 fef9 	bl	808291c <spark_cloud_flag_connected>
  {
    if (Particle.connected()) {
 8080b2a:	b148      	cbz	r0, 8080b40 <_Z15setLowPowerMode6String+0x3c>
 8080b2c:	4b1b      	ldr	r3, [pc, #108]	; (8080b9c <_Z15setLowPowerMode6String+0x98>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080b2e:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080b30:	781b      	ldrb	r3, [r3, #0]
      publishQueue.publish("Mode","Low Power Mode", PRIVATE);
 8080b32:	491b      	ldr	r1, [pc, #108]	; (8080ba0 <_Z15setLowPowerMode6String+0x9c>)
 8080b34:	f88d 2000 	strb.w	r2, [sp]
 8080b38:	481a      	ldr	r0, [pc, #104]	; (8080ba4 <_Z15setLowPowerMode6String+0xa0>)
 8080b3a:	4a1b      	ldr	r2, [pc, #108]	; (8080ba8 <_Z15setLowPowerMode6String+0xa4>)
 8080b3c:	f7ff fbcf 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    }
    sysStatus.lowPowerMode = true;
 8080b40:	4b1a      	ldr	r3, [pc, #104]	; (8080bac <_Z15setLowPowerMode6String+0xa8>)
 8080b42:	2201      	movs	r2, #1
 8080b44:	719a      	strb	r2, [r3, #6]
    strcpy(lowPowerModeStr,"True");
 8080b46:	491a      	ldr	r1, [pc, #104]	; (8080bb0 <_Z15setLowPowerMode6String+0xac>)
 8080b48:	e01c      	b.n	8080b84 <_Z15setLowPowerMode6String+0x80>
 8080b4a:	4913      	ldr	r1, [pc, #76]	; (8080b98 <_Z15setLowPowerMode6String+0x94>)
 8080b4c:	4620      	mov	r0, r4
 8080b4e:	f002 ff5d 	bl	8083a0c <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
 8080b52:	b1d0      	cbz	r0, 8080b8a <_Z15setLowPowerMode6String+0x86>
 8080b54:	f001 fee2 	bl	808291c <spark_cloud_flag_connected>
 8080b58:	4c14      	ldr	r4, [pc, #80]	; (8080bac <_Z15setLowPowerMode6String+0xa8>)
  {
    if (!Particle.connected()) {                                      // In case we are not connected, we will do so now.
 8080b5a:	b918      	cbnz	r0, 8080b64 <_Z15setLowPowerMode6String+0x60>
      connectToParticle();
 8080b5c:	f7ff ff86 	bl	8080a6c <_Z17connectToParticlev>
      sysStatus.connectedStatus = true;
 8080b60:	2301      	movs	r3, #1
 8080b62:	70e3      	strb	r3, [r4, #3]
 8080b64:	4b0d      	ldr	r3, [pc, #52]	; (8080b9c <_Z15setLowPowerMode6String+0x98>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080b66:	2500      	movs	r5, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080b68:	781b      	ldrb	r3, [r3, #0]
    }
    publishQueue.publish("Mode","Normal Operations", PRIVATE);
 8080b6a:	490d      	ldr	r1, [pc, #52]	; (8080ba0 <_Z15setLowPowerMode6String+0x9c>)
 8080b6c:	4a11      	ldr	r2, [pc, #68]	; (8080bb4 <_Z15setLowPowerMode6String+0xb0>)
 8080b6e:	f88d 5000 	strb.w	r5, [sp]
 8080b72:	480c      	ldr	r0, [pc, #48]	; (8080ba4 <_Z15setLowPowerMode6String+0xa0>)
 8080b74:	f7ff fbb3 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(1000);                                                      // Need to make sure the message gets out.
 8080b78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080b7c:	f001 ff96 	bl	8082aac <delay>
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
    strcpy(lowPowerModeStr,"False");                                  // Use capitalization so we know that we set this.
 8080b80:	490d      	ldr	r1, [pc, #52]	; (8080bb8 <_Z15setLowPowerMode6String+0xb4>)
      connectToParticle();
      sysStatus.connectedStatus = true;
    }
    publishQueue.publish("Mode","Normal Operations", PRIVATE);
    delay(1000);                                                      // Need to make sure the message gets out.
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
 8080b82:	71a5      	strb	r5, [r4, #6]
    strcpy(lowPowerModeStr,"False");                                  // Use capitalization so we know that we set this.
 8080b84:	480d      	ldr	r0, [pc, #52]	; (8080bbc <_Z15setLowPowerMode6String+0xb8>)
 8080b86:	f004 ff2b 	bl	80859e0 <strcpy>
  }
  systemStatusWriteNeeded = true;
 8080b8a:	4b0d      	ldr	r3, [pc, #52]	; (8080bc0 <_Z15setLowPowerMode6String+0xbc>)
 8080b8c:	2001      	movs	r0, #1
 8080b8e:	7018      	strb	r0, [r3, #0]
  return 1;
}
 8080b90:	b003      	add	sp, #12
 8080b92:	bd30      	pop	{r4, r5, pc}
 8080b94:	080867c0 	.word	0x080867c0
 8080b98:	080863e1 	.word	0x080863e1
 8080b9c:	20000154 	.word	0x20000154
 8080ba0:	08086542 	.word	0x08086542
 8080ba4:	2000022c 	.word	0x2000022c
 8080ba8:	08086547 	.word	0x08086547
 8080bac:	20000268 	.word	0x20000268
 8080bb0:	08086556 	.word	0x08086556
 8080bb4:	0808655b 	.word	0x0808655b
 8080bb8:	0808656d 	.word	0x0808656d
 8080bbc:	20000205 	.word	0x20000205
 8080bc0:	20000264 	.word	0x20000264

08080bc4 <_Z12notConnectedv>:
  systemStatusWriteNeeded = true;
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
 8080bc4:	b508      	push	{r3, lr}
 8080bc6:	f001 fea9 	bl	808291c <spark_cloud_flag_connected>
  return !Particle.connected();
 8080bca:	f080 0001 	eor.w	r0, r0, #1
}
 8080bce:	b2c0      	uxtb	r0, r0
 8080bd0:	bd08      	pop	{r3, pc}
	...

08080bd4 <_Z22disconnectFromParticlev>:
    return 0;                                                    // Failed to connect
  }
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
 8080bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
 8080bd6:	f001 fe99 	bl	808290c <spark_cloud_flag_disconnect>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
 8080bda:	f7ff fb6f 	bl	80802bc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080bde:	f643 2697 	movw	r6, #14999	; 0x3a97
 8080be2:	4604      	mov	r4, r0
 8080be4:	2500      	movs	r5, #0
 8080be6:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8080be8:	f7ff fb68 	bl	80802bc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080bec:	1b00      	subs	r0, r0, r4
 8080bee:	eb61 0105 	sbc.w	r1, r1, r5
 8080bf2:	428f      	cmp	r7, r1
 8080bf4:	bf08      	it	eq
 8080bf6:	4286      	cmpeq	r6, r0
 8080bf8:	d305      	bcc.n	8080c06 <_Z22disconnectFromParticlev+0x32>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
 8080bfa:	f7ff ffe3 	bl	8080bc4 <_Z12notConnectedv>
 8080bfe:	b910      	cbnz	r0, 8080c06 <_Z22disconnectFromParticlev+0x32>
            spark_process();
 8080c00:	f001 fe74 	bl	80828ec <spark_process>
 8080c04:	e7f0      	b.n	8080be8 <_Z22disconnectFromParticlev+0x14>
 8080c06:	f7ff ffdd 	bl	8080bc4 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080c0a:	4809      	ldr	r0, [pc, #36]	; (8080c30 <_Z22disconnectFromParticlev+0x5c>)
 8080c0c:	2300      	movs	r3, #0
 8080c0e:	4619      	mov	r1, r3
 8080c10:	461a      	mov	r2, r3
 8080c12:	6840      	ldr	r0, [r0, #4]
 8080c14:	f001 fee2 	bl	80829dc <network_off>
  Cellular.off();
  sysStatus.connectedStatus = false;
 8080c18:	4b06      	ldr	r3, [pc, #24]	; (8080c34 <_Z22disconnectFromParticlev+0x60>)
 8080c1a:	2200      	movs	r2, #0
 8080c1c:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
 8080c1e:	4b06      	ldr	r3, [pc, #24]	; (8080c38 <_Z22disconnectFromParticlev+0x64>)
 8080c20:	2401      	movs	r4, #1
  delay(2000);                                                    // Bummer but only should happen once an hour
 8080c22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
  Cellular.off();
  sysStatus.connectedStatus = false;
  systemStatusWriteNeeded = true;
 8080c26:	701c      	strb	r4, [r3, #0]
  delay(2000);                                                    // Bummer but only should happen once an hour
 8080c28:	f001 ff40 	bl	8082aac <delay>
  return true;
}
 8080c2c:	4620      	mov	r0, r4
 8080c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8080c30:	20000294 	.word	0x20000294
 8080c34:	20000268 	.word	0x20000268
 8080c38:	20000264 	.word	0x20000264

08080c3c <_Z15resetEverythingv>:
    return 1;
  }
  else return 0;
}

void resetEverything() {                                            // The device is waking up in a new day or is a new install
 8080c3c:	b538      	push	{r3, r4, r5, lr}
  current.dailyCount = 0;                              // Reset the counts in FRAM as well
 8080c3e:	4d08      	ldr	r5, [pc, #32]	; (8080c60 <_Z15resetEverythingv+0x24>)
 8080c40:	2400      	movs	r4, #0
 8080c42:	60ac      	str	r4, [r5, #8]
  current.hourlyCount = 0;
 8080c44:	602c      	str	r4, [r5, #0]
  current.hourlyCountInFlight = 0;
 8080c46:	606c      	str	r4, [r5, #4]
  current.lastCountTime = Time.now();                      // Set the time context to the new day
 8080c48:	f003 f90b 	bl	8083e62 <_ZN9TimeClass3nowEv>
  sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
 8080c4c:	4b05      	ldr	r3, [pc, #20]	; (8080c64 <_Z15resetEverythingv+0x28>)
  currentCountsWriteNeeded=true;
 8080c4e:	4a06      	ldr	r2, [pc, #24]	; (8080c68 <_Z15resetEverythingv+0x2c>)
void resetEverything() {                                            // The device is waking up in a new day or is a new install
  current.dailyCount = 0;                              // Reset the counts in FRAM as well
  current.hourlyCount = 0;
  current.hourlyCountInFlight = 0;
  current.lastCountTime = Time.now();                      // Set the time context to the new day
  sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
 8080c50:	611c      	str	r4, [r3, #16]
  currentCountsWriteNeeded=true;
 8080c52:	2301      	movs	r3, #1
 8080c54:	7013      	strb	r3, [r2, #0]
  systemStatusWriteNeeded=true;
 8080c56:	4a05      	ldr	r2, [pc, #20]	; (8080c6c <_Z15resetEverythingv+0x30>)

void resetEverything() {                                            // The device is waking up in a new day or is a new install
  current.dailyCount = 0;                              // Reset the counts in FRAM as well
  current.hourlyCount = 0;
  current.hourlyCountInFlight = 0;
  current.lastCountTime = Time.now();                      // Set the time context to the new day
 8080c58:	60e8      	str	r0, [r5, #12]
  sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
 8080c5a:	616c      	str	r4, [r5, #20]
  currentCountsWriteNeeded=true;
  systemStatusWriteNeeded=true;
 8080c5c:	7013      	strb	r3, [r2, #0]
 8080c5e:	bd38      	pop	{r3, r4, r5, pc}
 8080c60:	2000020c 	.word	0x2000020c
 8080c64:	20000268 	.word	0x20000268
 8080c68:	20000204 	.word	0x20000204
 8080c6c:	20000264 	.word	0x20000264

08080c70 <_Z22publishStateTransitionv>:
  systemStatusWriteNeeded = true;
  return 1;
}

void publishStateTransition(void)
{
 8080c70:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 8080c72:	4d13      	ldr	r5, [pc, #76]	; (8080cc0 <_Z22publishStateTransitionv+0x50>)
 8080c74:	4913      	ldr	r1, [pc, #76]	; (8080cc4 <_Z22publishStateTransitionv+0x54>)
 8080c76:	782a      	ldrb	r2, [r5, #0]
 8080c78:	230e      	movs	r3, #14
 8080c7a:	fb03 1202 	mla	r2, r3, r2, r1
 8080c7e:	4c12      	ldr	r4, [pc, #72]	; (8080cc8 <_Z22publishStateTransitionv+0x58>)
  systemStatusWriteNeeded = true;
  return 1;
}

void publishStateTransition(void)
{
 8080c80:	b08d      	sub	sp, #52	; 0x34
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 8080c82:	7820      	ldrb	r0, [r4, #0]
 8080c84:	9200      	str	r2, [sp, #0]
 8080c86:	fb03 1300 	mla	r3, r3, r0, r1
 8080c8a:	4a10      	ldr	r2, [pc, #64]	; (8080ccc <_Z22publishStateTransitionv+0x5c>)
 8080c8c:	2128      	movs	r1, #40	; 0x28
 8080c8e:	a802      	add	r0, sp, #8
 8080c90:	f001 fef4 	bl	8082a7c <snprintf>
  oldState = state;
 8080c94:	782b      	ldrb	r3, [r5, #0]
 8080c96:	7023      	strb	r3, [r4, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080c98:	f001 fe40 	bl	808291c <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
 8080c9c:	b148      	cbz	r0, 8080cb2 <_Z22publishStateTransitionv+0x42>
 8080c9e:	4b0c      	ldr	r3, [pc, #48]	; (8080cd0 <_Z22publishStateTransitionv+0x60>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080ca0:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080ca2:	781b      	ldrb	r3, [r3, #0]
 8080ca4:	490b      	ldr	r1, [pc, #44]	; (8080cd4 <_Z22publishStateTransitionv+0x64>)
 8080ca6:	f88d 2000 	strb.w	r2, [sp]
 8080caa:	480b      	ldr	r0, [pc, #44]	; (8080cd8 <_Z22publishStateTransitionv+0x68>)
 8080cac:	aa02      	add	r2, sp, #8
 8080cae:	f7ff fb16 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  Serial.println(stateTransitionString);
 8080cb2:	f003 fa01 	bl	80840b8 <_Z16_fetch_usbserialv>
 8080cb6:	a902      	add	r1, sp, #8
 8080cb8:	f002 fde5 	bl	8083886 <_ZN5Print7printlnEPKc>
}
 8080cbc:	b00d      	add	sp, #52	; 0x34
 8080cbe:	bd30      	pop	{r4, r5, pc}
 8080cc0:	20000174 	.word	0x20000174
 8080cc4:	20000000 	.word	0x20000000
 8080cc8:	2000015c 	.word	0x2000015c
 8080ccc:	08086573 	.word	0x08086573
 8080cd0:	20000154 	.word	0x20000154
 8080cd4:	08086581 	.word	0x08086581
 8080cd8:	2000022c 	.word	0x2000022c

08080cdc <_Z14fullModemResetv>:

void fullModemReset() {                                                 // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
 8080cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
 8080cde:	f001 fe15 	bl	808290c <spark_cloud_flag_disconnect>
 8080ce2:	f001 fc19 	bl	8082518 <HAL_Timer_Get_Milli_Seconds>
	Particle.disconnect(); 	                                              // Disconnect from the cloud
	unsigned long startTime = millis();  	                                // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 8080ce6:	f643 2597 	movw	r5, #14999	; 0x3a97
 8080cea:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080cec:	f001 fe16 	bl	808291c <spark_cloud_flag_connected>
 8080cf0:	b140      	cbz	r0, 8080d04 <_Z14fullModemResetv+0x28>
 8080cf2:	f001 fc11 	bl	8082518 <HAL_Timer_Get_Milli_Seconds>
 8080cf6:	1b00      	subs	r0, r0, r4
 8080cf8:	42a8      	cmp	r0, r5
 8080cfa:	d803      	bhi.n	8080d04 <_Z14fullModemResetv+0x28>
		delay(100);
 8080cfc:	2064      	movs	r0, #100	; 0x64
 8080cfe:	f001 fed5 	bl	8082aac <delay>
}

void fullModemReset() {                                                 // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
	Particle.disconnect(); 	                                              // Disconnect from the cloud
	unsigned long startTime = millis();  	                                // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 8080d02:	e7f3      	b.n	8080cec <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 8080d04:	2100      	movs	r1, #0
 8080d06:	4b09      	ldr	r3, [pc, #36]	; (8080d2c <_Z14fullModemResetv+0x50>)
 8080d08:	f247 5230 	movw	r2, #30000	; 0x7530
 8080d0c:	4608      	mov	r0, r1
 8080d0e:	f001 fb8b 	bl	8082428 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
 8080d12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080d16:	f001 fec9 	bl	8082aac <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 8080d1a:	4b05      	ldr	r3, [pc, #20]	; (8080d30 <_Z14fullModemResetv+0x54>)
 8080d1c:	220a      	movs	r2, #10
 8080d1e:	681b      	ldr	r3, [r3, #0]
 8080d20:	2101      	movs	r1, #1
 8080d22:	4668      	mov	r0, sp
 8080d24:	f002 ff62 	bl	8083bec <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 8080d28:	b003      	add	sp, #12
 8080d2a:	bd30      	pop	{r4, r5, pc}
 8080d2c:	08086592 	.word	0x08086592
 8080d30:	200001a4 	.word	0x200001a4

08080d34 <_Z12dailyCleanupv>:

void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
 8080d34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8080d38:	4b1e      	ldr	r3, [pc, #120]	; (8080db4 <_Z12dailyCleanupv+0x80>)
 8080d3a:	b087      	sub	sp, #28
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080d3c:	2500      	movs	r5, #0
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
  sysStatus.verboseMode = false;
 8080d3e:	4c1e      	ldr	r4, [pc, #120]	; (8080db8 <_Z12dailyCleanupv+0x84>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080d40:	781b      	ldrb	r3, [r3, #0]
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}

void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
 8080d42:	4a1e      	ldr	r2, [pc, #120]	; (8080dbc <_Z12dailyCleanupv+0x88>)
 8080d44:	491e      	ldr	r1, [pc, #120]	; (8080dc0 <_Z12dailyCleanupv+0x8c>)
 8080d46:	f88d 5000 	strb.w	r5, [sp]
 8080d4a:	481e      	ldr	r0, [pc, #120]	; (8080dc4 <_Z12dailyCleanupv+0x90>)
 8080d4c:	f7ff fac7 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
 8080d50:	7125      	strb	r5, [r4, #4]
  Particle.syncTime();                                                // Set the clock each day
 8080d52:	f7ff fa33 	bl	80801bc <_ZN10CloudClass8syncTimeEv.isra.15>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
 8080d56:	f7ff fab1 	bl	80802bc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080d5a:	f247 582f 	movw	r8, #29999	; 0x752f
 8080d5e:	4606      	mov	r6, r0
 8080d60:	2700      	movs	r7, #0
 8080d62:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8080d66:	f7ff faa9 	bl	80802bc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080d6a:	1b80      	subs	r0, r0, r6
 8080d6c:	eb61 0107 	sbc.w	r1, r1, r7
 8080d70:	4589      	cmp	r9, r1
 8080d72:	bf08      	it	eq
 8080d74:	4580      	cmpeq	r8, r0
 8080d76:	d305      	bcc.n	8080d84 <_Z12dailyCleanupv+0x50>
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
 8080d78:	f7ff fa2a 	bl	80801d0 <_ZN10CloudClass12syncTimeDoneEv.isra.17>
 8080d7c:	b910      	cbnz	r0, 8080d84 <_Z12dailyCleanupv+0x50>
            spark_process();
 8080d7e:	f001 fdb5 	bl	80828ec <spark_process>
 8080d82:	e7f0      	b.n	8080d66 <_Z12dailyCleanupv+0x32>
 8080d84:	f7ff fa24 	bl	80801d0 <_ZN10CloudClass12syncTimeDoneEv.isra.17>
  if (sysStatus.solarPowerMode || sysStatus.stateOfCharge <= 70) {    // If Solar or if the battery is being discharged
 8080d88:	7963      	ldrb	r3, [r4, #5]
 8080d8a:	b91b      	cbnz	r3, 8080d94 <_Z12dailyCleanupv+0x60>
 8080d8c:	4b0a      	ldr	r3, [pc, #40]	; (8080db8 <_Z12dailyCleanupv+0x84>)
 8080d8e:	689b      	ldr	r3, [r3, #8]
 8080d90:	2b46      	cmp	r3, #70	; 0x46
 8080d92:	dc09      	bgt.n	8080da8 <_Z12dailyCleanupv+0x74>
    setLowPowerMode("1");
 8080d94:	490c      	ldr	r1, [pc, #48]	; (8080dc8 <_Z12dailyCleanupv+0x94>)
 8080d96:	a802      	add	r0, sp, #8
 8080d98:	f002 fe0b 	bl	80839b2 <_ZN6StringC1EPK19__FlashStringHelper>
 8080d9c:	a802      	add	r0, sp, #8
 8080d9e:	f7ff feb1 	bl	8080b04 <_Z15setLowPowerMode6String>
 8080da2:	a802      	add	r0, sp, #8
 8080da4:	f002 fdbe 	bl	8083924 <_ZN6StringD1Ev>
  }
  systemStatusWriteNeeded=true;
 8080da8:	4b08      	ldr	r3, [pc, #32]	; (8080dcc <_Z12dailyCleanupv+0x98>)
 8080daa:	2201      	movs	r2, #1
 8080dac:	701a      	strb	r2, [r3, #0]
}
 8080dae:	b007      	add	sp, #28
 8080db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8080db4:	20000154 	.word	0x20000154
 8080db8:	20000268 	.word	0x20000268
 8080dbc:	0808659f 	.word	0x0808659f
 8080dc0:	080865a7 	.word	0x080865a7
 8080dc4:	2000022c 	.word	0x2000022c
 8080dc8:	080867c0 	.word	0x080867c0
 8080dcc:	20000264 	.word	0x20000264

08080dd0 <_Z8isDSTusav>:
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
  }
  return 1;
}

bool isDSTusa() {
 8080dd0:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
 8080dd2:	f003 f861 	bl	8083e98 <_ZN9TimeClass3dayEv>
 8080dd6:	4605      	mov	r5, r0
  int month = Time.month();
 8080dd8:	f003 f86f 	bl	8083eba <_ZN9TimeClass5monthEv>
 8080ddc:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
 8080dde:	f003 f865 	bl	8083eac <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
 8080de2:	1f23      	subs	r3, r4, #4
 8080de4:	2b06      	cmp	r3, #6
 8080de6:	d90e      	bls.n	8080e06 <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
 8080de8:	1ee3      	subs	r3, r4, #3
 8080dea:	2b08      	cmp	r3, #8
 8080dec:	d80d      	bhi.n	8080e0a <_Z8isDSTusav+0x3a>
  { // before March or after October is definetly standard time
    return false;
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
 8080dee:	3801      	subs	r0, #1
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
 8080df0:	1a2d      	subs	r5, r5, r0
 8080df2:	d501      	bpl.n	8080df8 <_Z8isDSTusav+0x28>
 8080df4:	2c0b      	cmp	r4, #11
 8080df6:	e002      	b.n	8080dfe <_Z8isDSTusav+0x2e>
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
 8080df8:	2d07      	cmp	r5, #7
 8080dfa:	dd06      	ble.n	8080e0a <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
 8080dfc:	2c03      	cmp	r4, #3
 8080dfe:	bf14      	ite	ne
 8080e00:	2000      	movne	r0, #0
 8080e02:	2001      	moveq	r0, #1
 8080e04:	bd38      	pop	{r3, r4, r5, pc}
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
  { // April to October definetly DST
    return true;
 8080e06:	2001      	movs	r0, #1
 8080e08:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (month < 3 || month > 11)
  { // before March or after October is definetly standard time
    return false;
 8080e0a:	2000      	movs	r0, #0
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
 8080e0c:	bd38      	pop	{r3, r4, r5, pc}
	...

08080e10 <_Z12setDSTOffset6String>:
    setLowPowerMode("1");
  }
  systemStatusWriteNeeded=true;
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
 8080e10:	b570      	push	{r4, r5, r6, lr}
 8080e12:	b0ca      	sub	sp, #296	; 0x128
 8080e14:	4604      	mov	r4, r0
  char * pEND;
  char data[256];
  time_t t = Time.now();
 8080e16:	f003 f824 	bl	8083e62 <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
 8080e1a:	220a      	movs	r2, #10
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
 8080e1c:	4606      	mov	r6, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
 8080e1e:	a905      	add	r1, sp, #20
 8080e20:	6820      	ldr	r0, [r4, #0]
 8080e22:	f004 feb7 	bl	8085b94 <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 8080e26:	b2c3      	uxtb	r3, r0
 8080e28:	2b02      	cmp	r3, #2
 8080e2a:	d853      	bhi.n	8080ed4 <_Z12setDSTOffset6String+0xc4>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
 8080e2c:	b240      	sxtb	r0, r0
 8080e2e:	f004 f9f1 	bl	8085214 <__aeabi_i2f>
 8080e32:	4604      	mov	r4, r0
 8080e34:	f002 ffa8 	bl	8083d88 <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
 8080e38:	4b2b      	ldr	r3, [pc, #172]	; (8080ee8 <_Z12setDSTOffset6String+0xd8>)
  systemStatusWriteNeeded = true;
 8080e3a:	2201      	movs	r2, #1
  char data[256];
  time_t t = Time.now();
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
  sysStatus.dstOffset = (float)tempDSTOffset;
 8080e3c:	619c      	str	r4, [r3, #24]
  systemStatusWriteNeeded = true;
 8080e3e:	4b2b      	ldr	r3, [pc, #172]	; (8080eec <_Z12setDSTOffset6String+0xdc>)
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
 8080e40:	4620      	mov	r0, r4
  time_t t = Time.now();
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
  sysStatus.dstOffset = (float)tempDSTOffset;
  systemStatusWriteNeeded = true;
 8080e42:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
 8080e44:	f003 fe4e 	bl	8084ae4 <__aeabi_f2d>
 8080e48:	4a29      	ldr	r2, [pc, #164]	; (8080ef0 <_Z12setDSTOffset6String+0xe0>)
 8080e4a:	e9cd 0100 	strd	r0, r1, [sp]
 8080e4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080e52:	a80a      	add	r0, sp, #40	; 0x28
 8080e54:	f001 fe12 	bl	8082a7c <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
 8080e58:	f002 ffe2 	bl	8083e20 <_ZN9TimeClass7isValidEv>
 8080e5c:	b138      	cbz	r0, 8080e6e <_Z12setDSTOffset6String+0x5e>
 8080e5e:	f7ff ffb7 	bl	8080dd0 <_Z8isDSTusav>
 8080e62:	b110      	cbz	r0, 8080e6a <_Z12setDSTOffset6String+0x5a>
 8080e64:	f002 ffaa 	bl	8083dbc <_ZN9TimeClass8beginDSTEv>
 8080e68:	e001      	b.n	8080e6e <_Z12setDSTOffset6String+0x5e>
 8080e6a:	f002 ffb1 	bl	8083dd0 <_ZN9TimeClass6endDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
 8080e6e:	f002 ff61 	bl	8083d34 <_ZN9TimeClass5localEv>
 8080e72:	4604      	mov	r4, r0
 8080e74:	f002 fff5 	bl	8083e62 <_ZN9TimeClass3nowEv>
 8080e78:	1a20      	subs	r0, r4, r0
 8080e7a:	f003 fe21 	bl	8084ac0 <__aeabi_i2d>
 8080e7e:	a318      	add	r3, pc, #96	; (adr r3, 8080ee0 <_Z12setDSTOffset6String+0xd0>)
 8080e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080e84:	f003 ffac 	bl	8084de0 <__aeabi_ddiv>
 8080e88:	4a1a      	ldr	r2, [pc, #104]	; (8080ef4 <_Z12setDSTOffset6String+0xe4>)
 8080e8a:	e9cd 0100 	strd	r0, r1, [sp]
 8080e8e:	210a      	movs	r1, #10
 8080e90:	4819      	ldr	r0, [pc, #100]	; (8080ef8 <_Z12setDSTOffset6String+0xe8>)
 8080e92:	f001 fdf3 	bl	8082a7c <snprintf>
 8080e96:	f001 fd41 	bl	808291c <spark_cloud_flag_connected>
  if (Particle.connected()) {
 8080e9a:	b1e8      	cbz	r0, 8080ed8 <_Z12setDSTOffset6String+0xc8>
 8080e9c:	4d17      	ldr	r5, [pc, #92]	; (8080efc <_Z12setDSTOffset6String+0xec>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080e9e:	2400      	movs	r4, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080ea0:	782b      	ldrb	r3, [r5, #0]
    publishQueue.publish("Time",data, PRIVATE);
 8080ea2:	aa0a      	add	r2, sp, #40	; 0x28
 8080ea4:	f88d 4000 	strb.w	r4, [sp]
 8080ea8:	4915      	ldr	r1, [pc, #84]	; (8080f00 <_Z12setDSTOffset6String+0xf0>)
 8080eaa:	4816      	ldr	r0, [pc, #88]	; (8080f04 <_Z12setDSTOffset6String+0xf4>)
 8080eac:	f7ff fa17 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
 8080eb0:	4631      	mov	r1, r6
 8080eb2:	a806      	add	r0, sp, #24
 8080eb4:	f002 ff92 	bl	8083ddc <_ZN9TimeClass7timeStrEl>
 8080eb8:	9b06      	ldr	r3, [sp, #24]
 8080eba:	f88d 4000 	strb.w	r4, [sp]
 8080ebe:	9303      	str	r3, [sp, #12]
 8080ec0:	9a03      	ldr	r2, [sp, #12]
 8080ec2:	782b      	ldrb	r3, [r5, #0]
 8080ec4:	490e      	ldr	r1, [pc, #56]	; (8080f00 <_Z12setDSTOffset6String+0xf0>)
 8080ec6:	480f      	ldr	r0, [pc, #60]	; (8080f04 <_Z12setDSTOffset6String+0xf4>)
 8080ec8:	f7ff fa09 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 8080ecc:	a806      	add	r0, sp, #24
 8080ece:	f002 fd29 	bl	8083924 <_ZN6StringD1Ev>
 8080ed2:	e001      	b.n	8080ed8 <_Z12setDSTOffset6String+0xc8>
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 8080ed4:	2000      	movs	r0, #0
 8080ed6:	e000      	b.n	8080eda <_Z12setDSTOffset6String+0xca>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
  if (Particle.connected()) {
    publishQueue.publish("Time",data, PRIVATE);
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
  }
  return 1;
 8080ed8:	2001      	movs	r0, #1
}
 8080eda:	b04a      	add	sp, #296	; 0x128
 8080edc:	bd70      	pop	{r4, r5, r6, pc}
 8080ede:	bf00      	nop
 8080ee0:	00000000 	.word	0x00000000
 8080ee4:	40ac2000 	.word	0x40ac2000
 8080ee8:	20000268 	.word	0x20000268
 8080eec:	20000264 	.word	0x20000264
 8080ef0:	080865b5 	.word	0x080865b5
 8080ef4:	080863f8 	.word	0x080863f8
 8080ef8:	20000139 	.word	0x20000139
 8080efc:	20000154 	.word	0x20000154
 8080f00:	080866a4 	.word	0x080866a4
 8080f04:	2000022c 	.word	0x2000022c

08080f08 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
 8080f08:	b530      	push	{r4, r5, lr}
 8080f0a:	b085      	sub	sp, #20
 8080f0c:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
 8080f0e:	2200      	movs	r2, #0
 8080f10:	a904      	add	r1, sp, #16
 8080f12:	f841 2d10 	str.w	r2, [r1, #-16]!
    const int ret = diag_get_source(id, &src, nullptr);
 8080f16:	f001 fc67 	bl	80827e8 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
 8080f1a:	b9a8      	cbnz	r0, 8080f48 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
 8080f1c:	9c00      	ldr	r4, [sp, #0]
    }
    return get(src, data, size);
}

inline int AbstractDiagnosticData::get(const diag_source* src, void* data, size_t& size) {
    SPARK_ASSERT(src && src->callback);
 8080f1e:	b10c      	cbz	r4, 8080f24 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1c>
 8080f20:	6923      	ldr	r3, [r4, #16]
 8080f22:	b923      	cbnz	r3, 8080f2e <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x26>
 8080f24:	4a09      	ldr	r2, [pc, #36]	; (8080f4c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
 8080f26:	2100      	movs	r1, #0
 8080f28:	200a      	movs	r0, #10
 8080f2a:	f001 fc45 	bl	80827b8 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
 8080f2e:	2300      	movs	r3, #0
 8080f30:	9301      	str	r3, [sp, #4]
 8080f32:	230c      	movs	r3, #12
 8080f34:	f8ad 3004 	strh.w	r3, [sp, #4]
 8080f38:	2304      	movs	r3, #4
 8080f3a:	9303      	str	r3, [sp, #12]
 8080f3c:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
 8080f3e:	6923      	ldr	r3, [r4, #16]
 8080f40:	aa01      	add	r2, sp, #4
 8080f42:	2101      	movs	r1, #1
 8080f44:	4620      	mov	r0, r4
 8080f46:	4798      	blx	r3
    const int ret = diag_get_source(id, &src, nullptr);
    if (ret != SYSTEM_ERROR_NONE) {
        return ret;
    }
    return get(src, val);
}
 8080f48:	b005      	add	sp, #20
 8080f4a:	bd30      	pop	{r4, r5, pc}
 8080f4c:	08082509 	.word	0x08082509

08080f50 <_Z17getBatteryContextv>:
  float qualityPercentage = sig.getQuality();

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}

void getBatteryContext() {
 8080f50:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
 8080f52:	4d0e      	ldr	r5, [pc, #56]	; (8080f8c <_Z17getBatteryContextv+0x3c>)
  float qualityPercentage = sig.getQuality();

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}

void getBatteryContext() {
 8080f54:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
 8080f56:	ac01      	add	r4, sp, #4
 8080f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8080f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8080f5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8080f60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
 8080f64:	4669      	mov	r1, sp
 8080f66:	2007      	movs	r0, #7
 8080f68:	f7ff ffce 	bl	8080f08 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        return val;
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        CHECK(particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val));
 8080f6c:	2800      	cmp	r0, #0
        return val;
 8080f6e:	bfa8      	it	ge
 8080f70:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
 8080f72:	ab08      	add	r3, sp, #32
 8080f74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8080f78:	f850 3c1c 	ldr.w	r3, [r0, #-28]
 8080f7c:	4a04      	ldr	r2, [pc, #16]	; (8080f90 <_Z17getBatteryContextv+0x40>)
 8080f7e:	2110      	movs	r1, #16
 8080f80:	4804      	ldr	r0, [pc, #16]	; (8080f94 <_Z17getBatteryContextv+0x44>)
 8080f82:	f001 fd7b 	bl	8082a7c <snprintf>

}
 8080f86:	b009      	add	sp, #36	; 0x24
 8080f88:	bd30      	pop	{r4, r5, pc}
 8080f8a:	bf00      	nop
 8080f8c:	08086358 	.word	0x08086358
 8080f90:	0808657e 	.word	0x0808657e
 8080f94:	2000015e 	.word	0x2000015e

08080f98 <_Z16takeMeasurementsv>:
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
}

// These are the functions that are part of the takeMeasurements call
void takeMeasurements()
{
 8080f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080f9a:	4b19      	ldr	r3, [pc, #100]	; (8081000 <_Z16takeMeasurementsv+0x68>)
 8080f9c:	2200      	movs	r2, #0
 8080f9e:	4611      	mov	r1, r2
 8080fa0:	6858      	ldr	r0, [r3, #4]
 8080fa2:	f001 fd0b 	bl	80829bc <network_ready>
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
 8080fa6:	b108      	cbz	r0, 8080fac <_Z16takeMeasurementsv+0x14>
 8080fa8:	f7ff fc22 	bl	80807f0 <_Z17getSignalStrengthv>
  getTemperature();                                                   // Get Temperature at startup as well
 8080fac:	f7ff fc58 	bl	8080860 <_Z14getTemperaturev>
  getBatteryContext();                                                // What is the battery up to?
 8080fb0:	f7ff ffce 	bl	8080f50 <_Z17getBatteryContextv>
 8080fb4:	a901      	add	r1, sp, #4
 8080fb6:	2003      	movs	r0, #3
 8080fb8:	f7ff ffa6 	bl	8080f08 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
 8080fbc:	b9b0      	cbnz	r0, 8080fec <_Z16takeMeasurementsv+0x54>
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
 8080fbe:	2106      	movs	r1, #6
 8080fc0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8080fc4:	f7ff f97d 	bl	80802c2 <_ZN8particle13constexpr_powIfjEET_S1_T0_>
 8080fc8:	4605      	mov	r5, r0
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
 8080fca:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8080fce:	f004 f91d 	bl	808520c <__aeabi_ui2f>
 8080fd2:	4629      	mov	r1, r5
 8080fd4:	4604      	mov	r4, r0
 8080fd6:	4628      	mov	r0, r5
 8080fd8:	f004 f868 	bl	80850ac <__addsf3>
 8080fdc:	4601      	mov	r1, r0
 8080fde:	f004 f865 	bl	80850ac <__addsf3>
 8080fe2:	4601      	mov	r1, r0
 8080fe4:	4620      	mov	r0, r4
 8080fe6:	f004 fa1d 	bl	8085424 <__aeabi_fdiv>
 8080fea:	e000      	b.n	8080fee <_Z16takeMeasurementsv+0x56>
            return -1.0f;
 8080fec:	4805      	ldr	r0, [pc, #20]	; (8081004 <_Z16takeMeasurementsv+0x6c>)
  //sysStatus.stateOfCharge = int(batteryMonitor.getSoC());
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
 8080fee:	f004 fb2b 	bl	8085648 <__aeabi_f2iz>
 8080ff2:	4b05      	ldr	r3, [pc, #20]	; (8081008 <_Z16takeMeasurementsv+0x70>)
  systemStatusWriteNeeded=true;
 8080ff4:	2201      	movs	r2, #1
{
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
  getTemperature();                                                   // Get Temperature at startup as well
  getBatteryContext();                                                // What is the battery up to?
  //sysStatus.stateOfCharge = int(batteryMonitor.getSoC());
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
 8080ff6:	6098      	str	r0, [r3, #8]
  systemStatusWriteNeeded=true;
 8080ff8:	4b04      	ldr	r3, [pc, #16]	; (808100c <_Z16takeMeasurementsv+0x74>)
 8080ffa:	701a      	strb	r2, [r3, #0]
}
 8080ffc:	b003      	add	sp, #12
 8080ffe:	bd30      	pop	{r4, r5, pc}
 8081000:	20000294 	.word	0x20000294
 8081004:	bf800000 	.word	0xbf800000
 8081008:	20000268 	.word	0x20000268
 808100c:	20000264 	.word	0x20000264

08081010 <_Z18loadSystemDefaultsv>:
    pmic.disableCharging();
    return FALSE;
  }
}

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
 8081010:	b570      	push	{r4, r5, r6, lr}
 8081012:	b086      	sub	sp, #24
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
 8081014:	f7ff fd2a 	bl	8080a6c <_Z17connectToParticlev>
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
 8081018:	f7ff ffbe 	bl	8080f98 <_Z16takeMeasurementsv>
 808101c:	f001 fc7e 	bl	808291c <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
 8081020:	b148      	cbz	r0, 8081036 <_Z18loadSystemDefaultsv+0x26>
 8081022:	4b18      	ldr	r3, [pc, #96]	; (8081084 <_Z18loadSystemDefaultsv+0x74>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8081024:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8081026:	781b      	ldrb	r3, [r3, #0]
 8081028:	4917      	ldr	r1, [pc, #92]	; (8081088 <_Z18loadSystemDefaultsv+0x78>)
 808102a:	f88d 2000 	strb.w	r2, [sp]
 808102e:	4817      	ldr	r0, [pc, #92]	; (808108c <_Z18loadSystemDefaultsv+0x7c>)
 8081030:	4a17      	ldr	r2, [pc, #92]	; (8081090 <_Z18loadSystemDefaultsv+0x80>)
 8081032:	f7ff f954 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.structuresVersion = 1;
 8081036:	4c17      	ldr	r4, [pc, #92]	; (8081094 <_Z18loadSystemDefaultsv+0x84>)
 8081038:	2501      	movs	r5, #1
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
 808103a:	68a3      	ldr	r3, [r4, #8]
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
 808103c:	4916      	ldr	r1, [pc, #88]	; (8081098 <_Z18loadSystemDefaultsv+0x88>)
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
 808103e:	2b1d      	cmp	r3, #29
 8081040:	bfcc      	ite	gt
 8081042:	2300      	movgt	r3, #0
 8081044:	2301      	movle	r3, #1
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
  sysStatus.metricUnits = false;
 8081046:	2600      	movs	r6, #0
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
 8081048:	a802      	add	r0, sp, #8
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
 808104a:	71e3      	strb	r3, [r4, #7]

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
 808104c:	7025      	strb	r5, [r4, #0]
  sysStatus.metricUnits = false;
 808104e:	70a6      	strb	r6, [r4, #2]
  sysStatus.verboseMode = true;
 8081050:	7125      	strb	r5, [r4, #4]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
 8081052:	f002 fcae 	bl	80839b2 <_ZN6StringC1EPK19__FlashStringHelper>
 8081056:	a802      	add	r0, sp, #8
 8081058:	f7ff fd54 	bl	8080b04 <_Z15setLowPowerMode6String>
 808105c:	a802      	add	r0, sp, #8
 808105e:	f002 fc61 	bl	8083924 <_ZN6StringD1Ev>
  sysStatus.timezone = -5;                                          // Default is East Coast Time
 8081062:	4b0e      	ldr	r3, [pc, #56]	; (808109c <_Z18loadSystemDefaultsv+0x8c>)
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
 8081064:	4622      	mov	r2, r4
 8081066:	6163      	str	r3, [r4, #20]
  sysStatus.dstOffset = 1;
 8081068:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 808106c:	61a3      	str	r3, [r4, #24]
  sysStatus.openTime = 0;
  sysStatus.closeTime = 24;
 808106e:	2318      	movs	r3, #24
 8081070:	6223      	str	r3, [r4, #32]
 8081072:	4629      	mov	r1, r5
 8081074:	2328      	movs	r3, #40	; 0x28
 8081076:	480a      	ldr	r0, [pc, #40]	; (80810a0 <_Z18loadSystemDefaultsv+0x90>)
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
  sysStatus.timezone = -5;                                          // Default is East Coast Time
  sysStatus.dstOffset = 1;
  sysStatus.openTime = 0;
 8081078:	61e6      	str	r6, [r4, #28]
 808107a:	f000 fe33 	bl	8081ce4 <_ZN6MB85RC9writeDataEjPKhj>
  sysStatus.closeTime = 24;
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}
 808107e:	b006      	add	sp, #24
 8081080:	bd70      	pop	{r4, r5, r6, pc}
 8081082:	bf00      	nop
 8081084:	20000154 	.word	0x20000154
 8081088:	08086542 	.word	0x08086542
 808108c:	2000022c 	.word	0x2000022c
 8081090:	080865c6 	.word	0x080865c6
 8081094:	20000268 	.word	0x20000268
 8081098:	080863e1 	.word	0x080863e1
 808109c:	c0a00000 	.word	0xc0a00000
 80810a0:	20000144 	.word	0x20000144

080810a4 <_Z17checkSystemValuesv>:

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
 80810a4:	b530      	push	{r4, r5, lr}
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
 80810a6:	4c34      	ldr	r4, [pc, #208]	; (8081178 <_Z17checkSystemValuesv+0xd4>)
  sysStatus.openTime = 0;
  sysStatus.closeTime = 24;
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
 80810a8:	b085      	sub	sp, #20
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
 80810aa:	f7ff ff75 	bl	8080f98 <_Z16takeMeasurementsv>
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
 80810ae:	78a3      	ldrb	r3, [r4, #2]
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
 80810b0:	4d31      	ldr	r5, [pc, #196]	; (8081178 <_Z17checkSystemValuesv+0xd4>)
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
 80810b2:	2b01      	cmp	r3, #1
 80810b4:	bf84      	itt	hi
 80810b6:	2300      	movhi	r3, #0
 80810b8:	70a3      	strbhi	r3, [r4, #2]
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
 80810ba:	78e3      	ldrb	r3, [r4, #3]
 80810bc:	2b01      	cmp	r3, #1
 80810be:	d906      	bls.n	80810ce <_Z17checkSystemValuesv+0x2a>
 80810c0:	f001 fc2c 	bl	808291c <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
 80810c4:	b110      	cbz	r0, 80810cc <_Z17checkSystemValuesv+0x28>
 80810c6:	2301      	movs	r3, #1
 80810c8:	70eb      	strb	r3, [r5, #3]
 80810ca:	e000      	b.n	80810ce <_Z17checkSystemValuesv+0x2a>
    else sysStatus.connectedStatus = false;
 80810cc:	70e8      	strb	r0, [r5, #3]
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
 80810ce:	7923      	ldrb	r3, [r4, #4]
 80810d0:	2b01      	cmp	r3, #1
 80810d2:	bf82      	ittt	hi
 80810d4:	4b28      	ldrhi	r3, [pc, #160]	; (8081178 <_Z17checkSystemValuesv+0xd4>)
 80810d6:	2200      	movhi	r2, #0
 80810d8:	711a      	strbhi	r2, [r3, #4]
  if (sysStatus.solarPowerMode < 0 || sysStatus.solarPowerMode >1) sysStatus.solarPowerMode = 0;
 80810da:	7963      	ldrb	r3, [r4, #5]
 80810dc:	2b01      	cmp	r3, #1
 80810de:	bf82      	ittt	hi
 80810e0:	4b25      	ldrhi	r3, [pc, #148]	; (8081178 <_Z17checkSystemValuesv+0xd4>)
 80810e2:	2200      	movhi	r2, #0
 80810e4:	715a      	strbhi	r2, [r3, #5]
  if (sysStatus.lowPowerMode < 0 || sysStatus.lowPowerMode > 1) setLowPowerMode("1");
 80810e6:	79a3      	ldrb	r3, [r4, #6]
 80810e8:	2b01      	cmp	r3, #1
 80810ea:	d909      	bls.n	8081100 <_Z17checkSystemValuesv+0x5c>
 80810ec:	4923      	ldr	r1, [pc, #140]	; (808117c <_Z17checkSystemValuesv+0xd8>)
 80810ee:	4668      	mov	r0, sp
 80810f0:	f002 fc5f 	bl	80839b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80810f4:	4668      	mov	r0, sp
 80810f6:	f7ff fd05 	bl	8080b04 <_Z15setLowPowerMode6String>
 80810fa:	4668      	mov	r0, sp
 80810fc:	f002 fc12 	bl	8083924 <_ZN6StringD1Ev>
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
 8081100:	68a2      	ldr	r2, [r4, #8]
 8081102:	4b1d      	ldr	r3, [pc, #116]	; (8081178 <_Z17checkSystemValuesv+0xd4>)
 8081104:	2a1d      	cmp	r2, #29
 8081106:	bfd4      	ite	le
 8081108:	2201      	movle	r2, #1
  else sysStatus.lowBatteryMode = false;
 808110a:	2200      	movgt	r2, #0
 808110c:	71da      	strb	r2, [r3, #7]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
 808110e:	6923      	ldr	r3, [r4, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
 8081110:	6965      	ldr	r5, [r4, #20]
  if (sysStatus.solarPowerMode < 0 || sysStatus.solarPowerMode >1) sysStatus.solarPowerMode = 0;
  if (sysStatus.lowPowerMode < 0 || sysStatus.lowPowerMode > 1) setLowPowerMode("1");
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
 8081112:	2bff      	cmp	r3, #255	; 0xff
 8081114:	bf82      	ittt	hi
 8081116:	4b18      	ldrhi	r3, [pc, #96]	; (8081178 <_Z17checkSystemValuesv+0xd4>)
 8081118:	2200      	movhi	r2, #0
 808111a:	611a      	strhi	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
 808111c:	4918      	ldr	r1, [pc, #96]	; (8081180 <_Z17checkSystemValuesv+0xdc>)
 808111e:	4628      	mov	r0, r5
 8081120:	f004 fa6a 	bl	80855f8 <__aeabi_fcmplt>
 8081124:	b920      	cbnz	r0, 8081130 <_Z17checkSystemValuesv+0x8c>
 8081126:	4917      	ldr	r1, [pc, #92]	; (8081184 <_Z17checkSystemValuesv+0xe0>)
 8081128:	4628      	mov	r0, r5
 808112a:	f004 fa83 	bl	8085634 <__aeabi_fcmpgt>
 808112e:	b108      	cbz	r0, 8081134 <_Z17checkSystemValuesv+0x90>
 8081130:	4b15      	ldr	r3, [pc, #84]	; (8081188 <_Z17checkSystemValuesv+0xe4>)
 8081132:	6163      	str	r3, [r4, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
 8081134:	69a5      	ldr	r5, [r4, #24]
 8081136:	2100      	movs	r1, #0
 8081138:	4628      	mov	r0, r5
 808113a:	f004 fa5d 	bl	80855f8 <__aeabi_fcmplt>
 808113e:	b928      	cbnz	r0, 808114c <_Z17checkSystemValuesv+0xa8>
 8081140:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8081144:	4628      	mov	r0, r5
 8081146:	f004 fa75 	bl	8085634 <__aeabi_fcmpgt>
 808114a:	b110      	cbz	r0, 8081152 <_Z17checkSystemValuesv+0xae>
 808114c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081150:	61a3      	str	r3, [r4, #24]
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) sysStatus.openTime = 0;
 8081152:	69e3      	ldr	r3, [r4, #28]
 8081154:	2b0c      	cmp	r3, #12
 8081156:	bf82      	ittt	hi
 8081158:	4b07      	ldrhi	r3, [pc, #28]	; (8081178 <_Z17checkSystemValuesv+0xd4>)
 808115a:	2200      	movhi	r2, #0
 808115c:	61da      	strhi	r2, [r3, #28]
  if (sysStatus.closeTime < 12 || sysStatus.closeTime > 24) sysStatus.closeTime = 24;
 808115e:	6a23      	ldr	r3, [r4, #32]
 8081160:	3b0c      	subs	r3, #12
 8081162:	2b0c      	cmp	r3, #12
 8081164:	bf82      	ittt	hi
 8081166:	4b04      	ldrhi	r3, [pc, #16]	; (8081178 <_Z17checkSystemValuesv+0xd4>)
 8081168:	2218      	movhi	r2, #24
 808116a:	621a      	strhi	r2, [r3, #32]
  // None for lastHookResponse

  systemStatusWriteNeeded = true;
 808116c:	4b07      	ldr	r3, [pc, #28]	; (808118c <_Z17checkSystemValuesv+0xe8>)
 808116e:	2201      	movs	r2, #1
 8081170:	701a      	strb	r2, [r3, #0]
}
 8081172:	b005      	add	sp, #20
 8081174:	bd30      	pop	{r4, r5, pc}
 8081176:	bf00      	nop
 8081178:	20000268 	.word	0x20000268
 808117c:	080867c0 	.word	0x080867c0
 8081180:	c1400000 	.word	0xc1400000
 8081184:	41400000 	.word	0x41400000
 8081188:	c0a00000 	.word	0xc0a00000
 808118c:	20000264 	.word	0x20000264

08081190 <loop>:
  digitalWrite(blueLED,LOW);

}

void loop()
{
 8081190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch(state) {
 8081194:	4ca0      	ldr	r4, [pc, #640]	; (8081418 <loop+0x288>)
  digitalWrite(blueLED,LOW);

}

void loop()
{
 8081196:	b08b      	sub	sp, #44	; 0x2c
  switch(state) {
 8081198:	7823      	ldrb	r3, [r4, #0]
 808119a:	3b01      	subs	r3, #1
 808119c:	2b05      	cmp	r3, #5
 808119e:	f200 81ff 	bhi.w	80815a0 <loop+0x410>
 80811a2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80811a6:	0193      	.short	0x0193
 80811a8:	005e0006 	.word	0x005e0006
 80811ac:	011b0096 	.word	0x011b0096
 80811b0:	0160      	.short	0x0160
  case IDLE_STATE:                                                    // Where we spend most time - note, the order of these conditionals is important
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
 80811b2:	4d9a      	ldr	r5, [pc, #616]	; (808141c <loop+0x28c>)
 80811b4:	792b      	ldrb	r3, [r5, #4]
 80811b6:	b12b      	cbz	r3, 80811c4 <loop+0x34>
 80811b8:	4b99      	ldr	r3, [pc, #612]	; (8081420 <loop+0x290>)
 80811ba:	781b      	ldrb	r3, [r3, #0]
 80811bc:	2b02      	cmp	r3, #2
 80811be:	d001      	beq.n	80811c4 <loop+0x34>
 80811c0:	f7ff fd56 	bl	8080c70 <_Z22publishStateTransitionv>
    if (watchdogFlag) petWatchdog();                                  // Watchdog flag is raised - time to pet the watchdog
 80811c4:	4b97      	ldr	r3, [pc, #604]	; (8081424 <loop+0x294>)
 80811c6:	781b      	ldrb	r3, [r3, #0]
 80811c8:	b10b      	cbz	r3, 80811ce <loop+0x3e>
 80811ca:	f7ff fb8f 	bl	80808ec <_Z11petWatchdogv>
    if (sensorDetect) recordCount();                                  // The ISR had raised the sensor flag
 80811ce:	4b96      	ldr	r3, [pc, #600]	; (8081428 <loop+0x298>)
 80811d0:	781b      	ldrb	r3, [r3, #0]
 80811d2:	b10b      	cbz	r3, 80811d8 <loop+0x48>
 80811d4:	f7ff fa4a 	bl	808066c <_Z11recordCountv>
    if (current.hourlyCountInFlight) {                                // Cleared here as there could be counts coming in while "in Flight"
 80811d8:	4b94      	ldr	r3, [pc, #592]	; (808142c <loop+0x29c>)
 80811da:	4e95      	ldr	r6, [pc, #596]	; (8081430 <loop+0x2a0>)
 80811dc:	6859      	ldr	r1, [r3, #4]
 80811de:	b141      	cbz	r1, 80811f2 <loop+0x62>
      current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
 80811e0:	681a      	ldr	r2, [r3, #0]
 80811e2:	1a52      	subs	r2, r2, r1
 80811e4:	601a      	str	r2, [r3, #0]
      current.hourlyCountInFlight = current.maxMinValue = current.alertCount = 0; // Zero out the counts until next reporting period
 80811e6:	2200      	movs	r2, #0
 80811e8:	615a      	str	r2, [r3, #20]
 80811ea:	619a      	str	r2, [r3, #24]
 80811ec:	605a      	str	r2, [r3, #4]
      currentCountsWriteNeeded=true;
 80811ee:	2301      	movs	r3, #1
 80811f0:	7033      	strb	r3, [r6, #0]
    }
    if (systemStatusWriteNeeded) {
 80811f2:	4f90      	ldr	r7, [pc, #576]	; (8081434 <loop+0x2a4>)
 80811f4:	783b      	ldrb	r3, [r7, #0]
 80811f6:	b13b      	cbz	r3, 8081208 <loop+0x78>
 80811f8:	2328      	movs	r3, #40	; 0x28
 80811fa:	4a88      	ldr	r2, [pc, #544]	; (808141c <loop+0x28c>)
 80811fc:	2101      	movs	r1, #1
 80811fe:	488e      	ldr	r0, [pc, #568]	; (8081438 <loop+0x2a8>)
 8081200:	f000 fd70 	bl	8081ce4 <_ZN6MB85RC9writeDataEjPKhj>
      fram.put(FRAM::systemStatusAddr,sysStatus);
      systemStatusWriteNeeded = false;
 8081204:	2300      	movs	r3, #0
 8081206:	703b      	strb	r3, [r7, #0]
    }
    if (currentCountsWriteNeeded) {
 8081208:	7833      	ldrb	r3, [r6, #0]
 808120a:	b143      	cbz	r3, 808121e <loop+0x8e>
 808120c:	231c      	movs	r3, #28
 808120e:	4a87      	ldr	r2, [pc, #540]	; (808142c <loop+0x29c>)
 8081210:	2150      	movs	r1, #80	; 0x50
 8081212:	4889      	ldr	r0, [pc, #548]	; (8081438 <loop+0x2a8>)
 8081214:	f000 fd66 	bl	8081ce4 <_ZN6MB85RC9writeDataEjPKhj>
      fram.put(FRAM::currentCountsAddr,current);
      currentCountsWriteNeeded = false;
 8081218:	4b85      	ldr	r3, [pc, #532]	; (8081430 <loop+0x2a0>)
 808121a:	2200      	movs	r2, #0
 808121c:	701a      	strb	r2, [r3, #0]
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;  // When in low power mode, we can nap between taps
 808121e:	79ab      	ldrb	r3, [r5, #6]
 8081220:	b14b      	cbz	r3, 8081236 <loop+0xa6>
 8081222:	f001 f979 	bl	8082518 <HAL_Timer_Get_Milli_Seconds>
 8081226:	4b85      	ldr	r3, [pc, #532]	; (808143c <loop+0x2ac>)
 8081228:	681b      	ldr	r3, [r3, #0]
 808122a:	1ac0      	subs	r0, r0, r3
 808122c:	4b84      	ldr	r3, [pc, #528]	; (8081440 <loop+0x2b0>)
 808122e:	681b      	ldr	r3, [r3, #0]
 8081230:	4298      	cmp	r0, r3
 8081232:	f200 81ae 	bhi.w	8081592 <loop+0x402>
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;  // We want to report on the hour but not after bedtime
 8081236:	f002 fe1b 	bl	8083e70 <_ZN9TimeClass4hourEv>
 808123a:	4b82      	ldr	r3, [pc, #520]	; (8081444 <loop+0x2b4>)
 808123c:	681b      	ldr	r3, [r3, #0]
 808123e:	4298      	cmp	r0, r3
 8081240:	bf1c      	itt	ne
 8081242:	2305      	movne	r3, #5
 8081244:	7023      	strbne	r3, [r4, #0]
    if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
 8081246:	f002 fe13 	bl	8083e70 <_ZN9TimeClass4hourEv>
 808124a:	6a2b      	ldr	r3, [r5, #32]
 808124c:	4298      	cmp	r0, r3
 808124e:	f280 81a3 	bge.w	8081598 <loop+0x408>
 8081252:	f002 fe0d 	bl	8083e70 <_ZN9TimeClass4hourEv>
 8081256:	4b71      	ldr	r3, [pc, #452]	; (808141c <loop+0x28c>)
 8081258:	69db      	ldr	r3, [r3, #28]
 808125a:	4298      	cmp	r0, r3
 808125c:	f2c0 819c 	blt.w	8081598 <loop+0x408>
 8081260:	e19e      	b.n	80815a0 <loop+0x410>
    break;

  case SLEEPING_STATE: {                                              // This state is triggered once the park closes and runs until it opens
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
 8081262:	4b6e      	ldr	r3, [pc, #440]	; (808141c <loop+0x28c>)
 8081264:	791a      	ldrb	r2, [r3, #4]
 8081266:	461d      	mov	r5, r3
 8081268:	b12a      	cbz	r2, 8081276 <loop+0xe6>
 808126a:	4b6d      	ldr	r3, [pc, #436]	; (8081420 <loop+0x290>)
 808126c:	781b      	ldrb	r3, [r3, #0]
 808126e:	2b03      	cmp	r3, #3
 8081270:	d001      	beq.n	8081276 <loop+0xe6>
 8081272:	f7ff fcfd 	bl	8080c70 <_Z22publishStateTransitionv>
    detachInterrupt(intPin);                                          // Done sensing for the day
 8081276:	2019      	movs	r0, #25
 8081278:	f002 f956 	bl	8083528 <_Z15detachInterruptt>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 808127c:	4b72      	ldr	r3, [pc, #456]	; (8081448 <loop+0x2b8>)
 808127e:	681b      	ldr	r3, [r3, #0]
 8081280:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 8081284:	f8b3 32dc 	ldrh.w	r3, [r3, #732]	; 0x2dc
 8081288:	8313      	strh	r3, [r2, #24]
    pinSetFast(disableModule);                                        // Turn off the pressure module for the hour
    if (current.hourlyCount) {                                        // If this number is not zero then we need to send this last count
 808128a:	4b68      	ldr	r3, [pc, #416]	; (808142c <loop+0x29c>)
 808128c:	681b      	ldr	r3, [r3, #0]
 808128e:	b10b      	cbz	r3, 8081294 <loop+0x104>
      state = REPORTING_STATE;
 8081290:	2305      	movs	r3, #5
 8081292:	e0bf      	b.n	8081414 <loop+0x284>
      break;
    }
    if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
 8081294:	78eb      	ldrb	r3, [r5, #3]
 8081296:	b10b      	cbz	r3, 808129c <loop+0x10c>
 8081298:	f7ff fc9c 	bl	8080bd4 <_Z22disconnectFromParticlev>
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
 808129c:	2100      	movs	r1, #0
 808129e:	2007      	movs	r0, #7
 80812a0:	f003 f883 	bl	80843aa <digitalWrite>
    petWatchdog();
 80812a4:	f7ff fb22 	bl	80808ec <_Z11petWatchdogv>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
 80812a8:	f002 fddb 	bl	8083e62 <_ZN9TimeClass3nowEv>
    System.sleep(SLEEP_MODE_DEEP,wakeInSeconds);                      // Very deep sleep until the next hour
 80812ac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80812b0:	fb90 f2f3 	sdiv	r2, r0, r3
 80812b4:	fb02 0013 	mls	r0, r2, r3, r0
 80812b8:	1a1a      	subs	r2, r3, r0
 80812ba:	4b64      	ldr	r3, [pc, #400]	; (808144c <loop+0x2bc>)
 80812bc:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 80812c0:	681b      	ldr	r3, [r3, #0]
 80812c2:	bfa8      	it	ge
 80812c4:	f44f 6261 	movge.w	r2, #3600	; 0xe10
 80812c8:	2101      	movs	r1, #1
 80812ca:	a806      	add	r0, sp, #24
 80812cc:	f002 fc8e 	bl	8083bec <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
    } break;
 80812d0:	e166      	b.n	80815a0 <loop+0x410>

  case NAPPING_STATE: {  // This state puts the device in low power mode quickly
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
 80812d2:	4b52      	ldr	r3, [pc, #328]	; (808141c <loop+0x28c>)
 80812d4:	791a      	ldrb	r2, [r3, #4]
 80812d6:	461d      	mov	r5, r3
 80812d8:	b12a      	cbz	r2, 80812e6 <loop+0x156>
 80812da:	4b51      	ldr	r3, [pc, #324]	; (8081420 <loop+0x290>)
 80812dc:	781b      	ldrb	r3, [r3, #0]
 80812de:	2b04      	cmp	r3, #4
 80812e0:	d001      	beq.n	80812e6 <loop+0x156>
 80812e2:	f7ff fcc5 	bl	8080c70 <_Z22publishStateTransitionv>
    if (sensorDetect) break;                                          // Don't nap until we are done with event
 80812e6:	4b50      	ldr	r3, [pc, #320]	; (8081428 <loop+0x298>)
 80812e8:	781b      	ldrb	r3, [r3, #0]
 80812ea:	2b00      	cmp	r3, #0
 80812ec:	f040 8158 	bne.w	80815a0 <loop+0x410>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // If we are in connected mode we need to Disconnect from Particle
 80812f0:	78eb      	ldrb	r3, [r5, #3]
 80812f2:	b10b      	cbz	r3, 80812f8 <loop+0x168>
 80812f4:	f7ff fc6e 	bl	8080bd4 <_Z22disconnectFromParticlev>
    stayAwake = 1000;                                   // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
 80812f8:	4b51      	ldr	r3, [pc, #324]	; (8081440 <loop+0x2b0>)
 80812fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80812fe:	601a      	str	r2, [r3, #0]
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
 8081300:	f002 fdaf 	bl	8083e62 <_ZN9TimeClass3nowEv>
 8081304:	4606      	mov	r6, r0
    petWatchdog();                                                    // Reset the watchdog timer interval
 8081306:	f7ff faf1 	bl	80808ec <_Z11petWatchdogv>
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
 808130a:	4b51      	ldr	r3, [pc, #324]	; (8081450 <loop+0x2c0>)
 808130c:	7d1a      	ldrb	r2, [r3, #20]
 808130e:	b10a      	cbz	r2, 8081314 <loop+0x184>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
 8081310:	2201      	movs	r2, #1
 8081312:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::STOP).gpio(userSwitch,CHANGE).gpio(intPin,RISING).duration(wakeInSeconds * 1000).flag(SystemSleepFlag::WAIT_CLOUD);
 8081314:	2200      	movs	r2, #0
 8081316:	2105      	movs	r1, #5
 8081318:	484d      	ldr	r0, [pc, #308]	; (8081450 <loop+0x2c0>)
 808131a:	f7fe ff9b 	bl	8080254 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>
 808131e:	2201      	movs	r2, #1
 8081320:	2119      	movs	r1, #25
 8081322:	f7fe ff97 	bl	8080254 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
 8081326:	7d03      	ldrb	r3, [r0, #20]
 8081328:	4605      	mov	r5, r0
 808132a:	b35b      	cbz	r3, 8081384 <loop+0x1f4>
 808132c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8081330:	fb96 f3f2 	sdiv	r3, r6, r2
 8081334:	fb02 6313 	mls	r3, r2, r3, r6
 8081338:	1ad3      	subs	r3, r2, r3
 808133a:	4293      	cmp	r3, r2
 808133c:	bfa8      	it	ge
 808133e:	4613      	movge	r3, r2
 8081340:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
 8081344:	2104      	movs	r1, #4
 8081346:	435f      	muls	r7, r3
 8081348:	f7fe ff7a 	bl	8080240 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            if (wakeup) {
 808134c:	4680      	mov	r8, r0
 808134e:	b108      	cbz	r0, 8081354 <loop+0x1c4>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
 8081350:	60c7      	str	r7, [r0, #12]
 8081352:	e017      	b.n	8081384 <loop+0x1f4>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
 8081354:	493f      	ldr	r1, [pc, #252]	; (8081454 <loop+0x2c4>)
 8081356:	2010      	movs	r0, #16
 8081358:	f003 f904 	bl	8084564 <_ZnwjRKSt9nothrow_t>
 808135c:	4606      	mov	r6, r0
 808135e:	2800      	cmp	r0, #0
 8081360:	f000 811c 	beq.w	808159c <loop+0x40c>
 8081364:	f04f 0910 	mov.w	r9, #16
 8081368:	464a      	mov	r2, r9
 808136a:	4641      	mov	r1, r8
 808136c:	f004 fafe 	bl	808596c <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
 8081370:	2302      	movs	r3, #2
 8081372:	8073      	strh	r3, [r6, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
 8081374:	2304      	movs	r3, #4
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
 8081376:	f8a6 9000 	strh.w	r9, [r6]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
 808137a:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
 808137c:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
 808137e:	60f7      	str	r7, [r6, #12]
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
            wakeupSource->base.next = config_.wakeup_sources;
 8081380:	60b3      	str	r3, [r6, #8]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
 8081382:	612e      	str	r6, [r5, #16]
        }
        return *this;
    }

    SystemSleepConfiguration& flag(particle::EnumFlags<SystemSleepFlag> f) {
        if (valid_) {
 8081384:	7d2b      	ldrb	r3, [r5, #20]
 8081386:	b11b      	cbz	r3, 8081390 <loop+0x200>
            config_.flags |= f.value();
 8081388:	68eb      	ldr	r3, [r5, #12]
 808138a:	f043 0301 	orr.w	r3, r3, #1
 808138e:	60eb      	str	r3, [r5, #12]
    SystemSleepResult result = System.sleep(config);                    // Put the device to sleep
 8081390:	492f      	ldr	r1, [pc, #188]	; (8081450 <loop+0x2c0>)
 8081392:	a803      	add	r0, sp, #12
 8081394:	f002 fbc2 	bl	8083b1c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>
 8081398:	9b03      	ldr	r3, [sp, #12]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
 808139a:	b1b3      	cbz	r3, 80813ca <loop+0x23a>
            return SystemSleepWakeupReason::UNKNOWN;
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
 808139c:	889a      	ldrh	r2, [r3, #4]
 808139e:	2a01      	cmp	r2, #1
 80813a0:	d113      	bne.n	80813ca <loop+0x23a>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 80813a2:	899b      	ldrh	r3, [r3, #12]
    if (result.wakeupPin() == intPin) {                                               // Executions starts here after sleep - time or sensor interrupt?
 80813a4:	2b19      	cmp	r3, #25
 80813a6:	d104      	bne.n	80813b2 <loop+0x222>
 80813a8:	f001 f8b6 	bl	8082518 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
 80813ac:	4b23      	ldr	r3, [pc, #140]	; (808143c <loop+0x2ac>)
 80813ae:	6018      	str	r0, [r3, #0]
 80813b0:	e00b      	b.n	80813ca <loop+0x23a>
    }
    else if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
 80813b2:	2b05      	cmp	r3, #5
 80813b4:	d109      	bne.n	80813ca <loop+0x23a>
 80813b6:	4928      	ldr	r1, [pc, #160]	; (8081458 <loop+0x2c8>)
 80813b8:	a806      	add	r0, sp, #24
 80813ba:	f002 fafa 	bl	80839b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80813be:	a806      	add	r0, sp, #24
 80813c0:	f7ff fba0 	bl	8080b04 <_Z15setLowPowerMode6String>
 80813c4:	a806      	add	r0, sp, #24
 80813c6:	f002 faad 	bl	8083924 <_ZN6StringD1Ev>
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 80813ca:	9803      	ldr	r0, [sp, #12]
    state = IDLE_STATE;                                               // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
 80813cc:	2302      	movs	r3, #2
 80813ce:	7023      	strb	r3, [r4, #0]
 80813d0:	2800      	cmp	r0, #0
 80813d2:	f000 80e5 	beq.w	80815a0 <loop+0x410>
            free(wakeupSource_);
 80813d6:	f001 fb31 	bl	8082a3c <free>
    } break;
 80813da:	e0e1      	b.n	80815a0 <loop+0x410>

  case REPORTING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
 80813dc:	4d0f      	ldr	r5, [pc, #60]	; (808141c <loop+0x28c>)
 80813de:	792b      	ldrb	r3, [r5, #4]
 80813e0:	b12b      	cbz	r3, 80813ee <loop+0x25e>
 80813e2:	4b0f      	ldr	r3, [pc, #60]	; (8081420 <loop+0x290>)
 80813e4:	781b      	ldrb	r3, [r3, #0]
 80813e6:	2b05      	cmp	r3, #5
 80813e8:	d001      	beq.n	80813ee <loop+0x25e>
 80813ea:	f7ff fc41 	bl	8080c70 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) connectToParticle();              // Only attempt to connect if not already New process to get connected
 80813ee:	78eb      	ldrb	r3, [r5, #3]
 80813f0:	b90b      	cbnz	r3, 80813f6 <loop+0x266>
 80813f2:	f7ff fb3b 	bl	8080a6c <_Z17connectToParticlev>
 80813f6:	f001 fa91 	bl	808291c <spark_cloud_flag_connected>
    if (Particle.connected()) {
 80813fa:	b378      	cbz	r0, 808145c <loop+0x2cc>
      if (Time.hour() == sysStatus.openTime) dailyCleanup();          // Once a day, clean house
 80813fc:	f002 fd38 	bl	8083e70 <_ZN9TimeClass4hourEv>
 8081400:	69eb      	ldr	r3, [r5, #28]
 8081402:	4298      	cmp	r0, r3
 8081404:	d101      	bne.n	808140a <loop+0x27a>
 8081406:	f7ff fc95 	bl	8080d34 <_Z12dailyCleanupv>
      takeMeasurements();                                             // Update Temp, Battery and Signal Strength values
 808140a:	f7ff fdc5 	bl	8080f98 <_Z16takeMeasurementsv>
      sendEvent();                                                    // Send data to Ubidots
 808140e:	f7ff f99d 	bl	808074c <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                        // Wait for Response
 8081412:	2306      	movs	r3, #6
 8081414:	7023      	strb	r3, [r4, #0]
 8081416:	e0c3      	b.n	80815a0 <loop+0x410>
 8081418:	20000174 	.word	0x20000174
 808141c:	20000268 	.word	0x20000268
 8081420:	2000015c 	.word	0x2000015c
 8081424:	20000188 	.word	0x20000188
 8081428:	20000138 	.word	0x20000138
 808142c:	2000020c 	.word	0x2000020c
 8081430:	20000204 	.word	0x20000204
 8081434:	20000264 	.word	0x20000264
 8081438:	20000144 	.word	0x20000144
 808143c:	200001b8 	.word	0x200001b8
 8081440:	20000158 	.word	0x20000158
 8081444:	20000184 	.word	0x20000184
 8081448:	200001b4 	.word	0x200001b4
 808144c:	200001a4 	.word	0x200001a4
 8081450:	2000018c 	.word	0x2000018c
 8081454:	08086bf4 	.word	0x08086bf4
 8081458:	080863e1 	.word	0x080863e1
 808145c:	f001 f85c 	bl	8082518 <HAL_Timer_Get_Milli_Seconds>
    }
    else {
      resetTimeStamp = millis();
 8081460:	4b51      	ldr	r3, [pc, #324]	; (80815a8 <loop+0x418>)
 8081462:	6018      	str	r0, [r3, #0]
 8081464:	e030      	b.n	80814c8 <loop+0x338>
      state = ERROR_STATE;
    }
    break;

  case RESP_WAIT_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
 8081466:	4b51      	ldr	r3, [pc, #324]	; (80815ac <loop+0x41c>)
 8081468:	791b      	ldrb	r3, [r3, #4]
 808146a:	b12b      	cbz	r3, 8081478 <loop+0x2e8>
 808146c:	4b50      	ldr	r3, [pc, #320]	; (80815b0 <loop+0x420>)
 808146e:	781b      	ldrb	r3, [r3, #0]
 8081470:	2b06      	cmp	r3, #6
 8081472:	d001      	beq.n	8081478 <loop+0x2e8>
 8081474:	f7ff fbfc 	bl	8080c70 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received back to IDLE state
 8081478:	4b4e      	ldr	r3, [pc, #312]	; (80815b4 <loop+0x424>)
 808147a:	781b      	ldrb	r3, [r3, #0]
 808147c:	b96b      	cbnz	r3, 808149a <loop+0x30a>
      stayAwake = stayAwakeLong;                                      // Keeps Electron awake after reboot - helps with recovery
 808147e:	4b4e      	ldr	r3, [pc, #312]	; (80815b8 <loop+0x428>)
 8081480:	4a4e      	ldr	r2, [pc, #312]	; (80815bc <loop+0x42c>)
 8081482:	601a      	str	r2, [r3, #0]
 8081484:	f001 f848 	bl	8082518 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
 8081488:	4b4d      	ldr	r3, [pc, #308]	; (80815c0 <loop+0x430>)
 808148a:	6018      	str	r0, [r3, #0]
      if (Time.hour() == 0) resetEverything();                        // It is a new day.  Zero everything so we can start fresh
 808148c:	f002 fcf0 	bl	8083e70 <_ZN9TimeClass4hourEv>
 8081490:	b908      	cbnz	r0, 8081496 <loop+0x306>
 8081492:	f7ff fbd3 	bl	8080c3c <_Z15resetEverythingv>
      state = IDLE_STATE;
 8081496:	2302      	movs	r3, #2
 8081498:	e7bc      	b.n	8081414 <loop+0x284>
 808149a:	f001 f83d 	bl	8082518 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
 808149e:	4b49      	ldr	r3, [pc, #292]	; (80815c4 <loop+0x434>)
 80814a0:	681b      	ldr	r3, [r3, #0]
 80814a2:	1ac0      	subs	r0, r0, r3
 80814a4:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 80814a8:	4298      	cmp	r0, r3
 80814aa:	d979      	bls.n	80815a0 <loop+0x410>
 80814ac:	f001 f834 	bl	8082518 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 80814b0:	4b3d      	ldr	r3, [pc, #244]	; (80815a8 <loop+0x418>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80814b2:	2200      	movs	r2, #0
 80814b4:	6018      	str	r0, [r3, #0]
 80814b6:	4b44      	ldr	r3, [pc, #272]	; (80815c8 <loop+0x438>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 80814b8:	4944      	ldr	r1, [pc, #272]	; (80815cc <loop+0x43c>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80814ba:	781b      	ldrb	r3, [r3, #0]
 80814bc:	4844      	ldr	r0, [pc, #272]	; (80815d0 <loop+0x440>)
 80814be:	f88d 2000 	strb.w	r2, [sp]
 80814c2:	4a44      	ldr	r2, [pc, #272]	; (80815d4 <loop+0x444>)
 80814c4:	f7fe ff0b 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                            // Response timed out
 80814c8:	2301      	movs	r3, #1
 80814ca:	e7a3      	b.n	8081414 <loop+0x284>
    }
    break;

  case ERROR_STATE:                                                   // To be enhanced - where we deal with errors
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
 80814cc:	4c37      	ldr	r4, [pc, #220]	; (80815ac <loop+0x41c>)
 80814ce:	7923      	ldrb	r3, [r4, #4]
 80814d0:	b12b      	cbz	r3, 80814de <loop+0x34e>
 80814d2:	4b37      	ldr	r3, [pc, #220]	; (80815b0 <loop+0x420>)
 80814d4:	781b      	ldrb	r3, [r3, #0]
 80814d6:	2b01      	cmp	r3, #1
 80814d8:	d001      	beq.n	80814de <loop+0x34e>
 80814da:	f7ff fbc9 	bl	8080c70 <_Z22publishStateTransitionv>
 80814de:	f001 f81b 	bl	8082518 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
 80814e2:	4b31      	ldr	r3, [pc, #196]	; (80815a8 <loop+0x418>)
 80814e4:	681b      	ldr	r3, [r3, #0]
 80814e6:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80814ea:	3330      	adds	r3, #48	; 0x30
 80814ec:	4298      	cmp	r0, r3
 80814ee:	d957      	bls.n	80815a0 <loop+0x410>
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
 80814f0:	6923      	ldr	r3, [r4, #16]
 80814f2:	2b03      	cmp	r3, #3
 80814f4:	dc13      	bgt.n	808151e <loop+0x38e>
 80814f6:	f001 fa11 	bl	808291c <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
 80814fa:	b148      	cbz	r0, 8081510 <loop+0x380>
 80814fc:	4b32      	ldr	r3, [pc, #200]	; (80815c8 <loop+0x438>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80814fe:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8081500:	781b      	ldrb	r3, [r3, #0]
 8081502:	4935      	ldr	r1, [pc, #212]	; (80815d8 <loop+0x448>)
 8081504:	f88d 2000 	strb.w	r2, [sp]
 8081508:	4831      	ldr	r0, [pc, #196]	; (80815d0 <loop+0x440>)
 808150a:	4a34      	ldr	r2, [pc, #208]	; (80815dc <loop+0x44c>)
 808150c:	f7fe fee7 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
 8081510:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8081514:	f001 faca 	bl	8082aac <delay>
        System.reset();
 8081518:	f002 fafd 	bl	8083b16 <_ZN11SystemClass5resetEv>
 808151c:	e040      	b.n	80815a0 <loop+0x410>
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
 808151e:	f002 fca0 	bl	8083e62 <_ZN9TimeClass3nowEv>
 8081522:	4b22      	ldr	r3, [pc, #136]	; (80815ac <loop+0x41c>)
 8081524:	4d2e      	ldr	r5, [pc, #184]	; (80815e0 <loop+0x450>)
 8081526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081528:	1ac0      	subs	r0, r0, r3
 808152a:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
 808152e:	d918      	bls.n	8081562 <loop+0x3d2>
 8081530:	f001 f9f4 	bl	808291c <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
 8081534:	b148      	cbz	r0, 808154a <loop+0x3ba>
 8081536:	4b24      	ldr	r3, [pc, #144]	; (80815c8 <loop+0x438>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8081538:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808153a:	781b      	ldrb	r3, [r3, #0]
 808153c:	4926      	ldr	r1, [pc, #152]	; (80815d8 <loop+0x448>)
 808153e:	f88d 2000 	strb.w	r2, [sp]
 8081542:	4823      	ldr	r0, [pc, #140]	; (80815d0 <loop+0x440>)
 8081544:	4a27      	ldr	r2, [pc, #156]	; (80815e4 <loop+0x454>)
 8081546:	f7fe feca 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
 808154a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808154e:	f001 faad 	bl	8082aac <delay>
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
 8081552:	2300      	movs	r3, #0
        systemStatusWriteNeeded=true;
 8081554:	2101      	movs	r1, #1
        digitalWrite(hardResetPin,HIGH);                              // This will cut all power to the Electron AND the carrier board
 8081556:	2004      	movs	r0, #4
        System.reset();
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
        delay(2000);
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
 8081558:	6123      	str	r3, [r4, #16]
        systemStatusWriteNeeded=true;
 808155a:	7029      	strb	r1, [r5, #0]
        digitalWrite(hardResetPin,HIGH);                              // This will cut all power to the Electron AND the carrier board
 808155c:	f002 ff25 	bl	80843aa <digitalWrite>
 8081560:	e01e      	b.n	80815a0 <loop+0x410>
 8081562:	f001 f9db 	bl	808291c <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
 8081566:	b148      	cbz	r0, 808157c <loop+0x3ec>
 8081568:	4b17      	ldr	r3, [pc, #92]	; (80815c8 <loop+0x438>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 808156a:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808156c:	781b      	ldrb	r3, [r3, #0]
 808156e:	491a      	ldr	r1, [pc, #104]	; (80815d8 <loop+0x448>)
 8081570:	f88d 2000 	strb.w	r2, [sp]
 8081574:	4816      	ldr	r0, [pc, #88]	; (80815d0 <loop+0x440>)
 8081576:	4a1c      	ldr	r2, [pc, #112]	; (80815e8 <loop+0x458>)
 8081578:	f7fe feb1 	bl	80802de <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
 808157c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8081580:	f001 fa94 	bl	8082aac <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
 8081584:	2300      	movs	r3, #0
 8081586:	6123      	str	r3, [r4, #16]
        systemStatusWriteNeeded=true;
 8081588:	2301      	movs	r3, #1
 808158a:	702b      	strb	r3, [r5, #0]
        fullModemReset();                                             // Full Modem reset and reboots
 808158c:	f7ff fba6 	bl	8080cdc <_Z14fullModemResetv>
    }
    break;
  }
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
  
}
 8081590:	e006      	b.n	80815a0 <loop+0x410>
    }
    if (currentCountsWriteNeeded) {
      fram.put(FRAM::currentCountsAddr,current);
      currentCountsWriteNeeded = false;
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;  // When in low power mode, we can nap between taps
 8081592:	2304      	movs	r3, #4
 8081594:	7023      	strb	r3, [r4, #0]
 8081596:	e64e      	b.n	8081236 <loop+0xa6>
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;  // We want to report on the hour but not after bedtime
    if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
 8081598:	2303      	movs	r3, #3
 808159a:	e73b      	b.n	8081414 <loop+0x284>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
 808159c:	7528      	strb	r0, [r5, #20]
 808159e:	e6f1      	b.n	8081384 <loop+0x1f4>
    }
    break;
  }
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
  
}
 80815a0:	b00b      	add	sp, #44	; 0x2c
 80815a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80815a6:	bf00      	nop
 80815a8:	20000200 	.word	0x20000200
 80815ac:	20000268 	.word	0x20000268
 80815b0:	2000015c 	.word	0x2000015c
 80815b4:	20000228 	.word	0x20000228
 80815b8:	20000158 	.word	0x20000158
 80815bc:	00015f90 	.word	0x00015f90
 80815c0:	200001b8 	.word	0x200001b8
 80815c4:	20000170 	.word	0x20000170
 80815c8:	20000154 	.word	0x20000154
 80815cc:	080865de 	.word	0x080865de
 80815d0:	2000022c 	.word	0x2000022c
 80815d4:	0808659e 	.word	0x0808659e
 80815d8:	0808660b 	.word	0x0808660b
 80815dc:	080865f7 	.word	0x080865f7
 80815e0:	20000264 	.word	0x20000264
 80815e4:	08086611 	.word	0x08086611
 80815e8:	0808662b 	.word	0x0808662b

080815ec <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80815ec:	2300      	movs	r3, #0
 80815ee:	2202      	movs	r2, #2
 80815f0:	f001 b96c 	b.w	80828cc <spark_variable>

080815f4 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>:
 80815f4:	2300      	movs	r3, #0
 80815f6:	2204      	movs	r2, #4
 80815f8:	f001 b968 	b.w	80828cc <spark_variable>

080815fc <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80815fc:	4602      	mov	r2, r0
 80815fe:	4801      	ldr	r0, [pc, #4]	; (8081604 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 8081600:	f001 bc16 	b.w	8082e30 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8081604:	08082e05 	.word	0x08082e05

08081608 <setup>:
// This section is where we will initialize sensor specific variables, libraries and function prototypes
// Pressure Sensor Variables
volatile bool sensorDetect = false;                 // This is the flag that an interrupt is triggered

void setup()                                        // Note: Disconnected Setup()
{
 8081608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
       2) Each hour while the device is sleeping
       3) After a reset event
    All three of these have some common code - this will go first then we will set a conditional
    to determine which of the three we are in and finish the code
  */
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
 808160c:	2100      	movs	r1, #0
// This section is where we will initialize sensor specific variables, libraries and function prototypes
// Pressure Sensor Variables
volatile bool sensorDetect = false;                 // This is the flag that an interrupt is triggered

void setup()                                        // Note: Disconnected Setup()
{
 808160e:	b0ac      	sub	sp, #176	; 0xb0
       2) Each hour while the device is sleeping
       3) After a reset event
    All three of these have some common code - this will go first then we will set a conditional
    to determine which of the three we are in and finish the code
  */
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
 8081610:	2011      	movs	r0, #17
 8081612:	f002 feb9 	bl	8084388 <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
 8081616:	2100      	movs	r1, #0
 8081618:	2005      	movs	r0, #5
 808161a:	f002 feb5 	bl	8084388 <pinMode>
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 808161e:	4c92      	ldr	r4, [pc, #584]	; (8081868 <setup+0x260>)
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
 8081620:	2101      	movs	r1, #1
 8081622:	2007      	movs	r0, #7
 8081624:	f002 feb0 	bl	8084388 <pinMode>
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
 8081628:	2101      	movs	r1, #1
 808162a:	2006      	movs	r0, #6
 808162c:	f002 feac 	bl	8084388 <pinMode>
 8081630:	6823      	ldr	r3, [r4, #0]
  pinResetFast(hardResetPin);
  pinMode(hardResetPin,OUTPUT);                     // For a hard reset active HIGH
 8081632:	2101      	movs	r1, #1
 8081634:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8081636:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 808163a:	2004      	movs	r0, #4
 808163c:	8353      	strh	r3, [r2, #26]
 808163e:	f002 fea3 	bl	8084388 <pinMode>

  // Pressure / PIR Module Pin Setup
  pinMode(intPin,INPUT_PULLDOWN);                   // pressure sensor interrupt
 8081642:	2103      	movs	r1, #3
 8081644:	2019      	movs	r0, #25
 8081646:	f002 fe9f 	bl	8084388 <pinMode>
  pinMode(disableModule,OUTPUT);                    // Turns on the module when pulled low
 808164a:	2101      	movs	r1, #1
 808164c:	201a      	movs	r0, #26
 808164e:	f002 fe9b 	bl	8084388 <pinMode>
 8081652:	6823      	ldr	r3, [r4, #0]
  pinResetFast(disableModule);                      // Turn on the module - send high to switch off board
  pinMode(ledPower,OUTPUT);                         // Turn on the lights
 8081654:	2101      	movs	r1, #1
 8081656:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 808165a:	f8b3 32dc 	ldrh.w	r3, [r3, #732]	; 0x2dc
 808165e:	201c      	movs	r0, #28
 8081660:	8353      	strh	r3, [r2, #26]
 8081662:	f002 fe91 	bl	8084388 <pinMode>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 8081666:	6823      	ldr	r3, [r4, #0]
  pinSetFast(ledPower);                             // Turns on the LED on the pressure sensor board

  digitalWrite(blueLED,HIGH);

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
 8081668:	2500      	movs	r5, #0
 808166a:	f8d3 2310 	ldr.w	r2, [r3, #784]	; 0x310
 808166e:	f8b3 3314 	ldrh.w	r3, [r3, #788]	; 0x314
  pinMode(disableModule,OUTPUT);                    // Turns on the module when pulled low
  pinResetFast(disableModule);                      // Turn on the module - send high to switch off board
  pinMode(ledPower,OUTPUT);                         // Turn on the lights
  pinSetFast(ledPower);                             // Turns on the LED on the pressure sensor board

  digitalWrite(blueLED,HIGH);
 8081672:	2101      	movs	r1, #1
 8081674:	8313      	strh	r3, [r2, #24]
 8081676:	2007      	movs	r0, #7
 8081678:	f002 fe97 	bl	80843aa <digitalWrite>

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
 808167c:	f7ff f936 	bl	80808ec <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
 8081680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8081684:	2201      	movs	r2, #1
 8081686:	4979      	ldr	r1, [pc, #484]	; (808186c <setup+0x264>)
 8081688:	9500      	str	r5, [sp, #0]
 808168a:	2011      	movs	r0, #17
 808168c:	f001 ff24 	bl	80834d8 <_Z15attachInterrupttPFvvE13InterruptModeah>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
 8081690:	a804      	add	r0, sp, #16
 8081692:	f001 f94b 	bl	808292c <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 8081696:	462b      	mov	r3, r5
 8081698:	227d      	movs	r2, #125	; 0x7d
 808169a:	a90c      	add	r1, sp, #48	; 0x30
 808169c:	a804      	add	r0, sp, #16
 808169e:	f002 f9c7 	bl	8083a30 <_ZNK6String8getBytesEPhjj>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 80816a2:	462b      	mov	r3, r5
 80816a4:	462a      	mov	r2, r5
 80816a6:	4972      	ldr	r1, [pc, #456]	; (8081870 <setup+0x268>)
 80816a8:	9501      	str	r5, [sp, #4]
 80816aa:	9500      	str	r5, [sp, #0]
 80816ac:	a80c      	add	r0, sp, #48	; 0x30
 80816ae:	f001 f94d 	bl	808294c <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);          // Puts the deviceID into the response topic array
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);      // Subscribe to the integration response event

  Particle.variable("HourlyCount", current.hourlyCount);                // Define my Particle variables
 80816b2:	4970      	ldr	r1, [pc, #448]	; (8081874 <setup+0x26c>)
 80816b4:	4870      	ldr	r0, [pc, #448]	; (8081878 <setup+0x270>)
 80816b6:	f7ff ff99 	bl	80815ec <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("DailyCount", current.dailyCount);                  // Note: Don't have to be connected for any of this!!!
 80816ba:	4970      	ldr	r1, [pc, #448]	; (808187c <setup+0x274>)
 80816bc:	4870      	ldr	r0, [pc, #448]	; (8081880 <setup+0x278>)
 80816be:	f7ff ff95 	bl	80815ec <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Signal", SignalString);
 80816c2:	4970      	ldr	r1, [pc, #448]	; (8081884 <setup+0x27c>)
 80816c4:	4870      	ldr	r0, [pc, #448]	; (8081888 <setup+0x280>)
 80816c6:	f7ff ff95 	bl	80815f4 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("ResetCount", sysStatus.resetCount);
 80816ca:	4970      	ldr	r1, [pc, #448]	; (808188c <setup+0x284>)
 80816cc:	4870      	ldr	r0, [pc, #448]	; (8081890 <setup+0x288>)
 80816ce:	f7ff ff8d 	bl	80815ec <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Temperature",current.temperature);
 80816d2:	4970      	ldr	r1, [pc, #448]	; (8081894 <setup+0x28c>)
 80816d4:	4870      	ldr	r0, [pc, #448]	; (8081898 <setup+0x290>)
 80816d6:	f7ff ff89 	bl	80815ec <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Release",currentPointRelease);
 80816da:	4970      	ldr	r1, [pc, #448]	; (808189c <setup+0x294>)
 80816dc:	4870      	ldr	r0, [pc, #448]	; (80818a0 <setup+0x298>)
 80816de:	f7ff ff89 	bl	80815f4 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("stateOfChg", sysStatus.stateOfCharge);
 80816e2:	4970      	ldr	r1, [pc, #448]	; (80818a4 <setup+0x29c>)
 80816e4:	4870      	ldr	r0, [pc, #448]	; (80818a8 <setup+0x2a0>)
 80816e6:	f7ff ff81 	bl	80815ec <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("lowPowerMode",lowPowerModeStr);
 80816ea:	4970      	ldr	r1, [pc, #448]	; (80818ac <setup+0x2a4>)
 80816ec:	4870      	ldr	r0, [pc, #448]	; (80818b0 <setup+0x2a8>)
 80816ee:	f7ff ff81 	bl	80815f4 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("OpenTime",sysStatus.openTime);
 80816f2:	4970      	ldr	r1, [pc, #448]	; (80818b4 <setup+0x2ac>)
 80816f4:	4870      	ldr	r0, [pc, #448]	; (80818b8 <setup+0x2b0>)
 80816f6:	f7ff ff79 	bl	80815ec <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("CloseTime",sysStatus.closeTime);
 80816fa:	4970      	ldr	r1, [pc, #448]	; (80818bc <setup+0x2b4>)
 80816fc:	4870      	ldr	r0, [pc, #448]	; (80818c0 <setup+0x2b8>)
 80816fe:	f7ff ff75 	bl	80815ec <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Alerts",current.alertCount);
 8081702:	4970      	ldr	r1, [pc, #448]	; (80818c4 <setup+0x2bc>)
 8081704:	4870      	ldr	r0, [pc, #448]	; (80818c8 <setup+0x2c0>)
 8081706:	f7ff ff71 	bl	80815ec <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("TimeOffset",currentOffsetStr);
 808170a:	4970      	ldr	r1, [pc, #448]	; (80818cc <setup+0x2c4>)
 808170c:	4870      	ldr	r0, [pc, #448]	; (80818d0 <setup+0x2c8>)
 808170e:	f7ff ff71 	bl	80815f4 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("BatteryContext",batteryContextStr);
 8081712:	4970      	ldr	r1, [pc, #448]	; (80818d4 <setup+0x2cc>)
 8081714:	4870      	ldr	r0, [pc, #448]	; (80818d8 <setup+0x2d0>)
 8081716:	f7ff ff6d 	bl	80815f4 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>

  Particle.function("resetFRAM", resetFRAM);                          // These are the functions exposed to the mobile app and console
 808171a:	4970      	ldr	r1, [pc, #448]	; (80818dc <setup+0x2d4>)
 808171c:	4870      	ldr	r0, [pc, #448]	; (80818e0 <setup+0x2d8>)
 808171e:	f7ff ff6d 	bl	80815fc <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("resetCounts",resetCounts);
 8081722:	4970      	ldr	r1, [pc, #448]	; (80818e4 <setup+0x2dc>)
 8081724:	4870      	ldr	r0, [pc, #448]	; (80818e8 <setup+0x2e0>)
 8081726:	f7ff ff69 	bl	80815fc <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("HardReset",hardResetNow);
 808172a:	4970      	ldr	r1, [pc, #448]	; (80818ec <setup+0x2e4>)
 808172c:	4870      	ldr	r0, [pc, #448]	; (80818f0 <setup+0x2e8>)
 808172e:	f7ff ff65 	bl	80815fc <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SendNow",sendNow);
 8081732:	4970      	ldr	r1, [pc, #448]	; (80818f4 <setup+0x2ec>)
 8081734:	4870      	ldr	r0, [pc, #448]	; (80818f8 <setup+0x2f0>)
 8081736:	f7ff ff61 	bl	80815fc <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
 808173a:	4970      	ldr	r1, [pc, #448]	; (80818fc <setup+0x2f4>)
 808173c:	4870      	ldr	r0, [pc, #448]	; (8081900 <setup+0x2f8>)
 808173e:	f7ff ff5d 	bl	80815fc <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Solar-Mode",setSolarMode);
 8081742:	4970      	ldr	r1, [pc, #448]	; (8081904 <setup+0x2fc>)
 8081744:	4870      	ldr	r0, [pc, #448]	; (8081908 <setup+0x300>)
 8081746:	f7ff ff59 	bl	80815fc <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setverboseMode);
 808174a:	4970      	ldr	r1, [pc, #448]	; (808190c <setup+0x304>)
 808174c:	4870      	ldr	r0, [pc, #448]	; (8081910 <setup+0x308>)
 808174e:	f7ff ff55 	bl	80815fc <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Timezone",setTimeZone);
 8081752:	4970      	ldr	r1, [pc, #448]	; (8081914 <setup+0x30c>)
 8081754:	4870      	ldr	r0, [pc, #448]	; (8081918 <setup+0x310>)
 8081756:	f7ff ff51 	bl	80815fc <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-DSTOffset",setDSTOffset);
 808175a:	4970      	ldr	r1, [pc, #448]	; (808191c <setup+0x314>)
 808175c:	4870      	ldr	r0, [pc, #448]	; (8081920 <setup+0x318>)
 808175e:	f7ff ff4d 	bl	80815fc <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-OpenTime",setOpenTime);
 8081762:	4970      	ldr	r1, [pc, #448]	; (8081924 <setup+0x31c>)
 8081764:	4870      	ldr	r0, [pc, #448]	; (8081928 <setup+0x320>)
 8081766:	f7ff ff49 	bl	80815fc <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Close",setCloseTime);
 808176a:	4970      	ldr	r1, [pc, #448]	; (808192c <setup+0x324>)
 808176c:	4870      	ldr	r0, [pc, #448]	; (8081930 <setup+0x328>)
 808176e:	f7ff ff45 	bl	80815fc <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>

  // Load FRAM and reset variables to their correct values
  fram.begin();                                                       // Initialize the FRAM module
 8081772:	4870      	ldr	r0, [pc, #448]	; (8081934 <setup+0x32c>)
 8081774:	f000 fa1e 	bl	8081bb4 <_ZN6MB85RC5beginEv>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
 8081778:	2301      	movs	r3, #1
 808177a:	f10d 020f 	add.w	r2, sp, #15
 808177e:	4629      	mov	r1, r5
 8081780:	486c      	ldr	r0, [pc, #432]	; (8081934 <setup+0x32c>)
 8081782:	f000 fa59 	bl	8081c38 <_ZN6MB85RC8readDataEjPhj>

  byte tempVersion;
  fram.get(FRAM::versionAddr, tempVersion);
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
 8081786:	f89d 300f 	ldrb.w	r3, [sp, #15]
 808178a:	4627      	mov	r7, r4
 808178c:	2b02      	cmp	r3, #2
 808178e:	4c6a      	ldr	r4, [pc, #424]	; (8081938 <setup+0x330>)
 8081790:	d00b      	beq.n	80817aa <setup+0x1a2>
    fram.erase();                                                     // Reset the FRAM to correct the issue
 8081792:	4868      	ldr	r0, [pc, #416]	; (8081934 <setup+0x32c>)
 8081794:	f000 fa18 	bl	8081bc8 <_ZN6MB85RC5eraseEv>
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
 8081798:	2304      	movs	r3, #4
 808179a:	4a68      	ldr	r2, [pc, #416]	; (808193c <setup+0x334>)
 808179c:	4629      	mov	r1, r5
 808179e:	4865      	ldr	r0, [pc, #404]	; (8081934 <setup+0x32c>)
 80817a0:	f000 faa0 	bl	8081ce4 <_ZN6MB85RC9writeDataEjPKhj>
    fram.put(FRAM::versionAddr, FRAMversionNumber);                   // Put the right value in
    loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
 80817a4:	f7ff fc34 	bl	8081010 <_Z18loadSystemDefaultsv>
 80817a8:	e005      	b.n	80817b6 <setup+0x1ae>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
 80817aa:	2328      	movs	r3, #40	; 0x28
 80817ac:	4622      	mov	r2, r4
 80817ae:	2101      	movs	r1, #1
 80817b0:	4860      	ldr	r0, [pc, #384]	; (8081934 <setup+0x32c>)
 80817b2:	f000 fa41 	bl	8081c38 <_ZN6MB85RC8readDataEjPhj>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80817b6:	2600      	movs	r6, #0
 80817b8:	ad2c      	add	r5, sp, #176	; 0xb0
  }
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range
 80817ba:	f7ff fc73 	bl	80810a4 <_Z17checkSystemValuesv>
 80817be:	f845 6d90 	str.w	r6, [r5, #-144]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80817c2:	4632      	mov	r2, r6
 80817c4:	4631      	mov	r1, r6
 80817c6:	4628      	mov	r0, r5
 80817c8:	f000 fe86 	bl	80824d8 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80817cc:	9b08      	ldr	r3, [sp, #32]

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
 80817ce:	2b14      	cmp	r3, #20
 80817d0:	f000 811a 	beq.w	8081a08 <setup+0x400>
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80817d4:	4632      	mov	r2, r6
 80817d6:	4631      	mov	r1, r6
 80817d8:	4628      	mov	r0, r5
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80817da:	9608      	str	r6, [sp, #32]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80817dc:	f000 fe7c 	bl	80824d8 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80817e0:	9b08      	ldr	r3, [sp, #32]
 80817e2:	2b8c      	cmp	r3, #140	; 0x8c
 80817e4:	f000 8110 	beq.w	8081a08 <setup+0x400>
    sysStatus.resetCount++;
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
  }

  (sysStatus.lowPowerMode) ? strcpy(lowPowerModeStr,"True") : strcpy(lowPowerModeStr,"False");
 80817e8:	79a3      	ldrb	r3, [r4, #6]
 80817ea:	b10b      	cbz	r3, 80817f0 <setup+0x1e8>
 80817ec:	4954      	ldr	r1, [pc, #336]	; (8081940 <setup+0x338>)
 80817ee:	e000      	b.n	80817f2 <setup+0x1ea>
 80817f0:	4954      	ldr	r1, [pc, #336]	; (8081944 <setup+0x33c>)
 80817f2:	482e      	ldr	r0, [pc, #184]	; (80818ac <setup+0x2a4>)
 80817f4:	f004 f8f4 	bl	80859e0 <strcpy>

  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
 80817f8:	69a0      	ldr	r0, [r4, #24]
 80817fa:	f002 fac5 	bl	8083d88 <_ZN9TimeClass12setDSTOffsetEf>
  DSTRULES() ? Time.beginDST() : Time.endDST();    // Perform the DST calculation here
 80817fe:	f7ff fae7 	bl	8080dd0 <_Z8isDSTusav>
 8081802:	b110      	cbz	r0, 808180a <setup+0x202>
 8081804:	f002 fada 	bl	8083dbc <_ZN9TimeClass8beginDSTEv>
 8081808:	e001      	b.n	808180e <setup+0x206>
 808180a:	f002 fae1 	bl	8083dd0 <_ZN9TimeClass6endDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
 808180e:	6960      	ldr	r0, [r4, #20]
 8081810:	f002 fa9e 	bl	8083d50 <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
 8081814:	f002 fa8e 	bl	8083d34 <_ZN9TimeClass5localEv>
 8081818:	4606      	mov	r6, r0
 808181a:	f002 fb22 	bl	8083e62 <_ZN9TimeClass3nowEv>
 808181e:	1a30      	subs	r0, r6, r0
 8081820:	f003 f94e 	bl	8084ac0 <__aeabi_i2d>
 8081824:	a30e      	add	r3, pc, #56	; (adr r3, 8081860 <setup+0x258>)
 8081826:	e9d3 2300 	ldrd	r2, r3, [r3]
 808182a:	f003 fad9 	bl	8084de0 <__aeabi_ddiv>
 808182e:	4e11      	ldr	r6, [pc, #68]	; (8081874 <setup+0x26c>)
 8081830:	e9cd 0100 	strd	r0, r1, [sp]
 8081834:	4a44      	ldr	r2, [pc, #272]	; (8081948 <setup+0x340>)
 8081836:	210a      	movs	r1, #10
 8081838:	4824      	ldr	r0, [pc, #144]	; (80818cc <setup+0x2c4>)
 808183a:	f001 f91f 	bl	8082a7c <snprintf>
 808183e:	231c      	movs	r3, #28
 8081840:	4632      	mov	r2, r6
 8081842:	2150      	movs	r1, #80	; 0x50
 8081844:	483b      	ldr	r0, [pc, #236]	; (8081934 <setup+0x32c>)
 8081846:	f000 f9f7 	bl	8081c38 <_ZN6MB85RC8readDataEjPhj>

  // Done with the System Stuff - now load the current counts
  fram.get(FRAM::currentCountsAddr, current);
  if (current.hourlyCount) currentHourlyPeriod = Time.hour(current.lastCountTime);
 808184a:	6833      	ldr	r3, [r6, #0]
 808184c:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 808194c <setup+0x344>
 8081850:	2b00      	cmp	r3, #0
 8081852:	d07d      	beq.n	8081950 <setup+0x348>
 8081854:	68f0      	ldr	r0, [r6, #12]
 8081856:	f002 fa49 	bl	8083cec <_ZN9TimeClass4hourEl>
 808185a:	e07b      	b.n	8081954 <setup+0x34c>
 808185c:	f3af 8000 	nop.w
 8081860:	00000000 	.word	0x00000000
 8081864:	40ac2000 	.word	0x40ac2000
 8081868:	200001b4 	.word	0x200001b4
 808186c:	080800cd 	.word	0x080800cd
 8081870:	080802f9 	.word	0x080802f9
 8081874:	2000020c 	.word	0x2000020c
 8081878:	0808664a 	.word	0x0808664a
 808187c:	20000214 	.word	0x20000214
 8081880:	08086656 	.word	0x08086656
 8081884:	200001bc 	.word	0x200001bc
 8081888:	08086661 	.word	0x08086661
 808188c:	20000278 	.word	0x20000278
 8081890:	08086668 	.word	0x08086668
 8081894:	2000021c 	.word	0x2000021c
 8081898:	08086673 	.word	0x08086673
 808189c:	20000070 	.word	0x20000070
 80818a0:	0808667f 	.word	0x0808667f
 80818a4:	20000270 	.word	0x20000270
 80818a8:	08086687 	.word	0x08086687
 80818ac:	20000205 	.word	0x20000205
 80818b0:	08086692 	.word	0x08086692
 80818b4:	20000284 	.word	0x20000284
 80818b8:	08086736 	.word	0x08086736
 80818bc:	20000288 	.word	0x20000288
 80818c0:	0808669f 	.word	0x0808669f
 80818c4:	20000220 	.word	0x20000220
 80818c8:	080866a9 	.word	0x080866a9
 80818cc:	20000139 	.word	0x20000139
 80818d0:	080866b0 	.word	0x080866b0
 80818d4:	2000015e 	.word	0x2000015e
 80818d8:	080866bb 	.word	0x080866bb
 80818dc:	080800f1 	.word	0x080800f1
 80818e0:	080866ca 	.word	0x080866ca
 80818e4:	08080179 	.word	0x08080179
 80818e8:	080866d4 	.word	0x080866d4
 80818ec:	0808038d 	.word	0x0808038d
 80818f0:	080866e0 	.word	0x080866e0
 80818f4:	0808010d 	.word	0x0808010d
 80818f8:	080866ea 	.word	0x080866ea
 80818fc:	08080b05 	.word	0x08080b05
 8081900:	080866f2 	.word	0x080866f2
 8081904:	080809d5 	.word	0x080809d5
 8081908:	080866ff 	.word	0x080866ff
 808190c:	080803dd 	.word	0x080803dd
 8081910:	0808670a 	.word	0x0808670a
 8081914:	08080471 	.word	0x08080471
 8081918:	08086717 	.word	0x08086717
 808191c:	08080e11 	.word	0x08080e11
 8081920:	08086724 	.word	0x08086724
 8081924:	080805cd 	.word	0x080805cd
 8081928:	08086732 	.word	0x08086732
 808192c:	08080605 	.word	0x08080605
 8081930:	0808673f 	.word	0x0808673f
 8081934:	20000144 	.word	0x20000144
 8081938:	20000268 	.word	0x20000268
 808193c:	080867c4 	.word	0x080867c4
 8081940:	08086556 	.word	0x08086556
 8081944:	0808656d 	.word	0x0808656d
 8081948:	080863f8 	.word	0x080863f8
 808194c:	20000184 	.word	0x20000184
  else currentHourlyPeriod = Time.hour();                              // The local time hourly period for reporting purposes
 8081950:	f002 fa8e 	bl	8083e70 <_ZN9TimeClass4hourEv>
 8081954:	f8c8 0000 	str.w	r0, [r8]

  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
 8081958:	f7fe fff0 	bl	808093c <_Z14setPowerConfigv>

  if (!digitalRead(userSwitch)) loadSystemDefaults();                 // Make sure the device wakes up and connects
 808195c:	2005      	movs	r0, #5
 808195e:	f002 fd3d 	bl	80843dc <digitalRead>
 8081962:	b908      	cbnz	r0, 8081968 <setup+0x360>
 8081964:	f7ff fb54 	bl	8081010 <_Z18loadSystemDefaultsv>

  // Here is where the code diverges based on why we are running Setup()
  // Deterimine when the last counts were taken check when starting test to determine if we reload values or start counts over
  
  if (Time.day() != Time.day(current.lastCountTime)) {    // ******  - These are debug lines
 8081968:	f002 fa96 	bl	8083e98 <_ZN9TimeClass3dayEv>
 808196c:	4680      	mov	r8, r0
 808196e:	68f0      	ldr	r0, [r6, #12]
 8081970:	f002 f9c4 	bl	8083cfc <_ZN9TimeClass3dayEl>
 8081974:	4580      	cmp	r8, r0
 8081976:	d010      	beq.n	808199a <setup+0x392>
    resetEverything();                                               // Zero the counts for the new day
 8081978:	f7ff f960 	bl	8080c3c <_Z15resetEverythingv>
    if (sysStatus.solarPowerMode && !sysStatus.lowPowerMode) {
 808197c:	7963      	ldrb	r3, [r4, #5]
 808197e:	b163      	cbz	r3, 808199a <setup+0x392>
 8081980:	4b26      	ldr	r3, [pc, #152]	; (8081a1c <setup+0x414>)
 8081982:	799b      	ldrb	r3, [r3, #6]
 8081984:	b94b      	cbnz	r3, 808199a <setup+0x392>
      setLowPowerMode("1");                                           // If we are running on solar, we will reset to lowPowerMode at Midnight
 8081986:	4926      	ldr	r1, [pc, #152]	; (8081a20 <setup+0x418>)
 8081988:	4628      	mov	r0, r5
 808198a:	f002 f812 	bl	80839b2 <_ZN6StringC1EPK19__FlashStringHelper>
 808198e:	4628      	mov	r0, r5
 8081990:	f7ff f8b8 	bl	8080b04 <_Z15setLowPowerMode6String>
 8081994:	4628      	mov	r0, r5
 8081996:	f001 ffc5 	bl	8083924 <_ZN6StringD1Ev>
    }
  }

  if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) {} // The park is closed - don't connect
 808199a:	f002 fa69 	bl	8083e70 <_ZN9TimeClass4hourEv>
 808199e:	6a23      	ldr	r3, [r4, #32]
 80819a0:	4d1e      	ldr	r5, [pc, #120]	; (8081a1c <setup+0x414>)
 80819a2:	4298      	cmp	r0, r3
 80819a4:	da1b      	bge.n	80819de <setup+0x3d6>
 80819a6:	f002 fa63 	bl	8083e70 <_ZN9TimeClass4hourEv>
 80819aa:	69eb      	ldr	r3, [r5, #28]
 80819ac:	4298      	cmp	r0, r3
 80819ae:	db16      	blt.n	80819de <setup+0x3d6>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80819b0:	4a1c      	ldr	r2, [pc, #112]	; (8081a24 <setup+0x41c>)
 80819b2:	2300      	movs	r3, #0
 80819b4:	6013      	str	r3, [r2, #0]
 80819b6:	4a1c      	ldr	r2, [pc, #112]	; (8081a28 <setup+0x420>)
  else {                                                              // Park is open let's get ready for the day
    hourlyAtomic.store(0,std::memory_order_relaxed);
    dailyAtomic.store(0,std::memory_order_relaxed);
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
 80819b8:	491c      	ldr	r1, [pc, #112]	; (8081a2c <setup+0x424>)
 80819ba:	6013      	str	r3, [r2, #0]
 80819bc:	2019      	movs	r0, #25
 80819be:	9300      	str	r3, [sp, #0]
 80819c0:	2201      	movs	r2, #1
 80819c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80819c6:	f001 fd87 	bl	80834d8 <_Z15attachInterrupttPFvvE13InterruptModeah>
    if (sysStatus.connectedStatus && !Particle.connected()) connectToParticle(); // Only going to connect if we are in connectionMode
 80819ca:	78eb      	ldrb	r3, [r5, #3]
 80819cc:	b113      	cbz	r3, 80819d4 <setup+0x3cc>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80819ce:	f000 ffa5 	bl	808291c <spark_cloud_flag_connected>
 80819d2:	b300      	cbz	r0, 8081a16 <setup+0x40e>
    takeMeasurements();                                               // Populates values so you can read them before the hour
 80819d4:	f7ff fae0 	bl	8080f98 <_Z16takeMeasurementsv>
    stayAwake = stayAwakeLong;                                        // Keeps Electron awake after reboot - helps with recovery
 80819d8:	4a15      	ldr	r2, [pc, #84]	; (8081a30 <setup+0x428>)
 80819da:	4b16      	ldr	r3, [pc, #88]	; (8081a34 <setup+0x42c>)
 80819dc:	601a      	str	r2, [r3, #0]
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80819de:	683b      	ldr	r3, [r7, #0]
 80819e0:	f8d3 2310 	ldr.w	r2, [r3, #784]	; 0x310
 80819e4:	f8b3 3314 	ldrh.w	r3, [r3, #788]	; 0x314
 80819e8:	8353      	strh	r3, [r2, #26]
  }

  pinResetFast(ledPower);                                             // Turns off the LED on the sensor board

  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
 80819ea:	4b13      	ldr	r3, [pc, #76]	; (8081a38 <setup+0x430>)
 80819ec:	781a      	ldrb	r2, [r3, #0]
 80819ee:	b90a      	cbnz	r2, 80819f4 <setup+0x3ec>
 80819f0:	2202      	movs	r2, #2
 80819f2:	701a      	strb	r2, [r3, #0]

  digitalWrite(blueLED,LOW);
 80819f4:	2100      	movs	r1, #0
 80819f6:	2007      	movs	r0, #7
 80819f8:	f002 fcd7 	bl	80843aa <digitalWrite>

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond

  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
 80819fc:	a804      	add	r0, sp, #16
 80819fe:	f001 ff91 	bl	8083924 <_ZN6StringD1Ev>

  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code

  digitalWrite(blueLED,LOW);

}
 8081a02:	b02c      	add	sp, #176	; 0xb0
 8081a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
    sysStatus.resetCount++;
 8081a08:	6923      	ldr	r3, [r4, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
 8081a0a:	2201      	movs	r2, #1
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
    sysStatus.resetCount++;
 8081a0c:	3301      	adds	r3, #1
 8081a0e:	6123      	str	r3, [r4, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
 8081a10:	4b0a      	ldr	r3, [pc, #40]	; (8081a3c <setup+0x434>)
 8081a12:	701a      	strb	r2, [r3, #0]
 8081a14:	e6e8      	b.n	80817e8 <setup+0x1e0>
  if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) {} // The park is closed - don't connect
  else {                                                              // Park is open let's get ready for the day
    hourlyAtomic.store(0,std::memory_order_relaxed);
    dailyAtomic.store(0,std::memory_order_relaxed);
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
    if (sysStatus.connectedStatus && !Particle.connected()) connectToParticle(); // Only going to connect if we are in connectionMode
 8081a16:	f7ff f829 	bl	8080a6c <_Z17connectToParticlev>
 8081a1a:	e7db      	b.n	80819d4 <setup+0x3cc>
 8081a1c:	20000268 	.word	0x20000268
 8081a20:	080867c0 	.word	0x080867c0
 8081a24:	2000017c 	.word	0x2000017c
 8081a28:	20000178 	.word	0x20000178
 8081a2c:	080801ed 	.word	0x080801ed
 8081a30:	00015f90 	.word	0x00015f90
 8081a34:	20000158 	.word	0x20000158
 8081a38:	20000174 	.word	0x20000174
 8081a3c:	20000264 	.word	0x20000264

08081a40 <_GLOBAL__sub_I___appProductID>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8081a40:	4b35      	ldr	r3, [pc, #212]	; (8081b18 <_GLOBAL__sub_I___appProductID+0xd8>)
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
 8081a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081a46:	2400      	movs	r4, #0
 8081a48:	601c      	str	r4, [r3, #0]
 8081a4a:	4b34      	ldr	r3, [pc, #208]	; (8081b1c <_GLOBAL__sub_I___appProductID+0xdc>)
 8081a4c:	2701      	movs	r7, #1
 8081a4e:	701f      	strb	r7, [r3, #0]
 8081a50:	4b33      	ldr	r3, [pc, #204]	; (8081b20 <_GLOBAL__sub_I___appProductID+0xe0>)
 8081a52:	2208      	movs	r2, #8
 8081a54:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8081a56:	f000 fd7f 	bl	8082558 <HAL_Pin_Map>
 8081a5a:	4b32      	ldr	r3, [pc, #200]	; (8081b24 <_GLOBAL__sub_I___appProductID+0xe4>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8081a5c:	4d32      	ldr	r5, [pc, #200]	; (8081b28 <_GLOBAL__sub_I___appProductID+0xe8>)
 8081a5e:	6018      	str	r0, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 8081a60:	f002 fc34 	bl	80842cc <spark_protocol_instance>
 8081a64:	4623      	mov	r3, r4
 8081a66:	4622      	mov	r2, r4
 8081a68:	f241 1159 	movw	r1, #4441	; 0x1159
 8081a6c:	f002 fc36 	bl	80842dc <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 8081a70:	f002 fc2c 	bl	80842cc <spark_protocol_instance>
 8081a74:	4622      	mov	r2, r4
 8081a76:	4623      	mov	r3, r4
 8081a78:	210f      	movs	r1, #15
 8081a7a:	f002 fc37 	bl	80842ec <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8081a7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
#include "UnitTestCode.h"                           // This code will exercise the device
#include "PublishQueueAsyncRK.h"                    // Async Particle Publish
#include <atomic>

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
 8081a82:	4e2a      	ldr	r6, [pc, #168]	; (8081b2c <_GLOBAL__sub_I___appProductID+0xec>)
 8081a84:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8081a86:	602c      	str	r4, [r5, #0]
 8081a88:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8081a8a:	71ac      	strb	r4, [r5, #6]
 8081a8c:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081a8e:	2002      	movs	r0, #2
 8081a90:	f000 febc 	bl	808280c <set_system_mode>
 8081a94:	4632      	mov	r2, r6
 8081a96:	4926      	ldr	r1, [pc, #152]	; (8081b30 <_GLOBAL__sub_I___appProductID+0xf0>)
 8081a98:	4628      	mov	r0, r5
 8081a9a:	f002 fd53 	bl	8084544 <__aeabi_atexit>
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
 8081a9e:	4d25      	ldr	r5, [pc, #148]	; (8081b34 <_GLOBAL__sub_I___appProductID+0xf4>)
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
 8081aa0:	4621      	mov	r1, r4
 8081aa2:	4638      	mov	r0, r7
 8081aa4:	f000 feca 	bl	808283c <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 8081aa8:	4639      	mov	r1, r7
 8081aaa:	2004      	movs	r0, #4
 8081aac:	f000 fd04 	bl	80824b8 <HAL_Feature_Set>
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
 8081ab0:	f04f 0810 	mov.w	r8, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
 8081ab4:	1d28      	adds	r0, r5, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
 8081ab6:	4642      	mov	r2, r8
 8081ab8:	4621      	mov	r1, r4
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
 8081aba:	6028      	str	r0, [r5, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
 8081abc:	f003 ff56 	bl	808596c <memset>
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
 8081ac0:	2302      	movs	r3, #2
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
 8081ac2:	4632      	mov	r2, r6
 8081ac4:	491c      	ldr	r1, [pc, #112]	; (8081b38 <_GLOBAL__sub_I___appProductID+0xf8>)
 8081ac6:	4628      	mov	r0, r5
 8081ac8:	80eb      	strh	r3, [r5, #6]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
 8081aca:	752f      	strb	r7, [r5, #20]
        config_.size = sizeof(hal_sleep_config_t);
 8081acc:	f8a5 8004 	strh.w	r8, [r5, #4]
 8081ad0:	f002 fd38 	bl	8084544 <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
 8081ad4:	f002 fcd2 	bl	808447c <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
 8081ad8:	4d18      	ldr	r5, [pc, #96]	; (8081b3c <_GLOBAL__sub_I___appProductID+0xfc>)
 8081ada:	4623      	mov	r3, r4
 8081adc:	4601      	mov	r1, r0
 8081ade:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8081ae2:	4628      	mov	r0, r5
 8081ae4:	f000 f85c 	bl	8081ba0 <_ZN6MB85RCC1ER7TwoWireji>
	 * @brief Construct a publish queue
	 *
	 * You normally allocate one of these as a global object. You should not create more than one, as
	 * the rate limiting would not work right.
	 */
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
 8081ae8:	4c15      	ldr	r4, [pc, #84]	; (8081b40 <_GLOBAL__sub_I___appProductID+0x100>)
 8081aea:	4b16      	ldr	r3, [pc, #88]	; (8081b44 <_GLOBAL__sub_I___appProductID+0x104>)
 8081aec:	4632      	mov	r2, r6
 8081aee:	4916      	ldr	r1, [pc, #88]	; (8081b48 <_GLOBAL__sub_I___appProductID+0x108>)
 8081af0:	4628      	mov	r0, r5
 8081af2:	602b      	str	r3, [r5, #0]
 8081af4:	f002 fd26 	bl	8084544 <__aeabi_atexit>
 8081af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8081afc:	4913      	ldr	r1, [pc, #76]	; (8081b4c <_GLOBAL__sub_I___appProductID+0x10c>)
 8081afe:	4620      	mov	r0, r4
 8081b00:	f000 fb6a 	bl	80821d8 <_ZN25PublishQueueAsyncRetainedC1EPht>
 8081b04:	4b12      	ldr	r3, [pc, #72]	; (8081b50 <_GLOBAL__sub_I___appProductID+0x110>)
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
 8081b06:	4632      	mov	r2, r6
 8081b08:	6023      	str	r3, [r4, #0]
 8081b0a:	4620      	mov	r0, r4
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
 8081b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
 8081b10:	4910      	ldr	r1, [pc, #64]	; (8081b54 <_GLOBAL__sub_I___appProductID+0x114>)
 8081b12:	f002 bd17 	b.w	8084544 <__aeabi_atexit>
 8081b16:	bf00      	nop
 8081b18:	200001a4 	.word	0x200001a4
 8081b1c:	20000154 	.word	0x20000154
 8081b20:	2000015d 	.word	0x2000015d
 8081b24:	200001b4 	.word	0x200001b4
 8081b28:	200001a8 	.word	0x200001a8
 8081b2c:	20000134 	.word	0x20000134
 8081b30:	08080231 	.word	0x08080231
 8081b34:	2000018c 	.word	0x2000018c
 8081b38:	080800d9 	.word	0x080800d9
 8081b3c:	20000144 	.word	0x20000144
 8081b40:	2000022c 	.word	0x2000022c
 8081b44:	080862f4 	.word	0x080862f4
 8081b48:	08080151 	.word	0x08080151
 8081b4c:	40024000 	.word	0x40024000
 8081b50:	08086310 	.word	0x08086310
 8081b54:	08080129 	.word	0x08080129

08081b58 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
 8081b58:	4770      	bx	lr

08081b5a <_ZN6MB85RCD0Ev>:

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
 8081b5a:	b510      	push	{r4, lr}
 8081b5c:	4604      	mov	r4, r0
}
 8081b5e:	2110      	movs	r1, #16
 8081b60:	f002 fcf5 	bl	808454e <_ZdlPvj>
 8081b64:	4620      	mov	r0, r4
 8081b66:	bd10      	pop	{r4, pc}

08081b68 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
 8081b68:	6803      	ldr	r3, [r0, #0]
 8081b6a:	b2c9      	uxtb	r1, r1
 8081b6c:	689b      	ldr	r3, [r3, #8]
 8081b6e:	4718      	bx	r3

08081b70 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8081b70:	b40e      	push	{r1, r2, r3}
 8081b72:	b500      	push	{lr}
 8081b74:	b08c      	sub	sp, #48	; 0x30
 8081b76:	aa0d      	add	r2, sp, #52	; 0x34
 8081b78:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8081b7c:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081b7e:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 8081b82:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8081b84:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081b86:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8081b88:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081b8a:	aa04      	add	r2, sp, #16
 8081b8c:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8081b8e:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081b90:	f000 fe22 	bl	80827d8 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 8081b94:	b00c      	add	sp, #48	; 0x30
 8081b96:	f85d eb04 	ldr.w	lr, [sp], #4
 8081b9a:	b003      	add	sp, #12
 8081b9c:	4770      	bx	lr
	...

08081ba0 <_ZN6MB85RCC1ER7TwoWireji>:

#include "Particle.h"
#include "MB85RC256V-FRAM-RK.h"


MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
 8081ba0:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
 8081ba2:	4d03      	ldr	r5, [pc, #12]	; (8081bb0 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
 8081ba4:	6041      	str	r1, [r0, #4]
 8081ba6:	6005      	str	r5, [r0, #0]
 8081ba8:	6082      	str	r2, [r0, #8]
 8081baa:	60c3      	str	r3, [r0, #12]
}
 8081bac:	bd30      	pop	{r4, r5, pc}
 8081bae:	bf00      	nop
 8081bb0:	0808684c 	.word	0x0808684c

08081bb4 <_ZN6MB85RC5beginEv>:

MB85RC::~MB85RC() {
}

void MB85RC::begin() {
	wire.begin();
 8081bb4:	6840      	ldr	r0, [r0, #4]
 8081bb6:	f001 bc39 	b.w	808342c <_ZN7TwoWire5beginEv>

08081bba <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8081bba:	b510      	push	{r4, lr}
 8081bbc:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8081bbe:	6800      	ldr	r0, [r0, #0]
 8081bc0:	f001 fc80 	bl	80834c4 <_ZN7TwoWire6unlockEv>
 8081bc4:	4620      	mov	r0, r4
 8081bc6:	bd10      	pop	{r4, pc}

08081bc8 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
 8081bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081bcc:	4607      	mov	r7, r0

	WITH_LOCK(wire) {
 8081bce:	6840      	ldr	r0, [r0, #4]

void MB85RC::begin() {
	wire.begin();
}

bool MB85RC::erase() {
 8081bd0:	b08a      	sub	sp, #40	; 0x28
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081bd2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081bd4:	f001 fc6d 	bl	80834b2 <_ZN7TwoWire4lockEv>
	WITH_LOCK(wire) {
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
 8081bd8:	221e      	movs	r2, #30
 8081bda:	2100      	movs	r1, #0
 8081bdc:	a802      	add	r0, sp, #8

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
		size_t totalLen = memorySize;
 8081bde:	68be      	ldr	r6, [r7, #8]

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
 8081be0:	f003 fec4 	bl	808596c <memset>
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
 8081be4:	2500      	movs	r5, #0
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
 8081be6:	b1de      	cbz	r6, 8081c20 <_ZN6MB85RC5eraseEv+0x58>
 8081be8:	46b0      	mov	r8, r6
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
 8081bea:	683b      	ldr	r3, [r7, #0]
 8081bec:	2e1e      	cmp	r6, #30
 8081bee:	bf28      	it	cs
 8081bf0:	f04f 081e 	movcs.w	r8, #30
 8081bf4:	68dc      	ldr	r4, [r3, #12]
 8081bf6:	aa02      	add	r2, sp, #8
 8081bf8:	4643      	mov	r3, r8
 8081bfa:	4629      	mov	r1, r5
 8081bfc:	4638      	mov	r0, r7
 8081bfe:	47a0      	blx	r4
			if (!result) {
 8081c00:	4604      	mov	r4, r0
 8081c02:	b948      	cbnz	r0, 8081c18 <_ZN6MB85RC5eraseEv+0x50>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
 8081c04:	462a      	mov	r2, r5
 8081c06:	490a      	ldr	r1, [pc, #40]	; (8081c30 <_ZN6MB85RC5eraseEv+0x68>)
 8081c08:	480a      	ldr	r0, [pc, #40]	; (8081c34 <_ZN6MB85RC5eraseEv+0x6c>)
 8081c0a:	f7ff ffb1 	bl	8081b70 <_ZNK5spark6Logger4infoEPKcz>
 8081c0e:	a801      	add	r0, sp, #4
 8081c10:	f7ff ffd3 	bl	8081bba <_ZNSt10lock_guardIR7TwoWireED1Ev>
				return false;
 8081c14:	4620      	mov	r0, r4
 8081c16:	e007      	b.n	8081c28 <_ZN6MB85RC5eraseEv+0x60>
			}

			totalLen -= count;
 8081c18:	ebc8 0606 	rsb	r6, r8, r6
			framAddr += count;
 8081c1c:	4445      	add	r5, r8
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
 8081c1e:	e7e2      	b.n	8081be6 <_ZN6MB85RC5eraseEv+0x1e>
	wire.begin();
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
 8081c20:	a801      	add	r0, sp, #4
 8081c22:	f7ff ffca 	bl	8081bba <_ZNSt10lock_guardIR7TwoWireED1Ev>
			totalLen -= count;
			framAddr += count;
		}
	}

	return true;
 8081c26:	2001      	movs	r0, #1
}
 8081c28:	b00a      	add	sp, #40	; 0x28
 8081c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081c2e:	bf00      	nop
 8081c30:	080867c8 	.word	0x080867c8
 8081c34:	20000380 	.word	0x20000380

08081c38 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
 8081c38:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8081c3c:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
 8081c3e:	6840      	ldr	r0, [r0, #4]

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
 8081c40:	460e      	mov	r6, r1
 8081c42:	4617      	mov	r7, r2
 8081c44:	4698      	mov	r8, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081c46:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081c48:	f001 fc33 	bl	80834b2 <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {

		while(dataLen > 0) {
 8081c4c:	f1b8 0f00 	cmp.w	r8, #0
 8081c50:	d101      	bne.n	8081c56 <_ZN6MB85RC8readDataEjPhj+0x1e>
 8081c52:	2401      	movs	r4, #1
 8081c54:	e03f      	b.n	8081cd6 <_ZN6MB85RC8readDataEjPhj+0x9e>
			wire.beginTransmission(addr | DEVICE_ADDR);
 8081c56:	68e1      	ldr	r1, [r4, #12]
 8081c58:	6860      	ldr	r0, [r4, #4]
 8081c5a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8081c5e:	f001 fc1d 	bl	808349c <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
 8081c62:	0a31      	lsrs	r1, r6, #8
 8081c64:	6860      	ldr	r0, [r4, #4]
 8081c66:	f7ff ff7f 	bl	8081b68 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
 8081c6a:	4631      	mov	r1, r6
 8081c6c:	6860      	ldr	r0, [r4, #4]
 8081c6e:	f7ff ff7b 	bl	8081b68 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
 8081c72:	2100      	movs	r1, #0
 8081c74:	6860      	ldr	r0, [r4, #4]
 8081c76:	f001 fc14 	bl	80834a2 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
 8081c7a:	b108      	cbz	r0, 8081c80 <_ZN6MB85RC8readDataEjPhj+0x48>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
 8081c7c:	2400      	movs	r4, #0
 8081c7e:	e02a      	b.n	8081cd6 <_ZN6MB85RC8readDataEjPhj+0x9e>
 8081c80:	46c1      	mov	r9, r8
			size_t bytesToRead = dataLen;
			if (bytesToRead > 32) {
				bytesToRead = 32;
			}

			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
 8081c82:	68e1      	ldr	r1, [r4, #12]
 8081c84:	f1b8 0f20 	cmp.w	r8, #32
 8081c88:	bf28      	it	cs
 8081c8a:	f04f 0920 	movcs.w	r9, #32
 8081c8e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8081c92:	2301      	movs	r3, #1
 8081c94:	464a      	mov	r2, r9
 8081c96:	b2c9      	uxtb	r1, r1
 8081c98:	6860      	ldr	r0, [r4, #4]
 8081c9a:	f001 fbe9 	bl	8083470 <_ZN7TwoWire11requestFromEhjh>

			if (Wire.available() < (int) bytesToRead) {
 8081c9e:	f002 fbed 	bl	808447c <_Z19__fetch_global_Wirev>
 8081ca2:	6803      	ldr	r3, [r0, #0]
 8081ca4:	691b      	ldr	r3, [r3, #16]
 8081ca6:	4798      	blx	r3
 8081ca8:	4548      	cmp	r0, r9
 8081caa:	dbe7      	blt.n	8081c7c <_ZN6MB85RC8readDataEjPhj+0x44>
 8081cac:	463d      	mov	r5, r7
 8081cae:	ebc7 0a06 	rsb	sl, r7, r6
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
				*data++ = Wire.read();    // receive a byte as character
 8081cb2:	f002 fbe3 	bl	808447c <_Z19__fetch_global_Wirev>
 8081cb6:	6803      	ldr	r3, [r0, #0]
 8081cb8:	695b      	ldr	r3, [r3, #20]
 8081cba:	4798      	blx	r3
 8081cbc:	f805 0b01 	strb.w	r0, [r5], #1
			if (Wire.available() < (int) bytesToRead) {
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
 8081cc0:	1bea      	subs	r2, r5, r7
 8081cc2:	ebc5 0308 	rsb	r3, r5, r8
 8081cc6:	4591      	cmp	r9, r2
 8081cc8:	eb05 060a 	add.w	r6, r5, sl
 8081ccc:	443b      	add	r3, r7
 8081cce:	d8f0      	bhi.n	8081cb2 <_ZN6MB85RC8readDataEjPhj+0x7a>
 8081cd0:	4698      	mov	r8, r3
				*data++ = Wire.read();    // receive a byte as character
 8081cd2:	462f      	mov	r7, r5
 8081cd4:	e7ba      	b.n	8081c4c <_ZN6MB85RC8readDataEjPhj+0x14>


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
 8081cd6:	a801      	add	r0, sp, #4
 8081cd8:	f7ff ff6f 	bl	8081bba <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
 8081cdc:	4620      	mov	r0, r4
 8081cde:	b002      	add	sp, #8
 8081ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08081ce4 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
 8081ce4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8081ce8:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
 8081cea:	6840      	ldr	r0, [r0, #4]
	}
	return result;
}


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
 8081cec:	460d      	mov	r5, r1
 8081cee:	4690      	mov	r8, r2
 8081cf0:	461f      	mov	r7, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081cf2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081cf4:	f001 fbdd 	bl	80834b2 <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {
		while(dataLen > 0) {
 8081cf8:	b34f      	cbz	r7, 8081d4e <_ZN6MB85RC9writeDataEjPKhj+0x6a>
			wire.beginTransmission(addr | DEVICE_ADDR);
 8081cfa:	68e1      	ldr	r1, [r4, #12]
 8081cfc:	6860      	ldr	r0, [r4, #4]
 8081cfe:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8081d02:	f001 fbcb 	bl	808349c <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
 8081d06:	0a29      	lsrs	r1, r5, #8
 8081d08:	6860      	ldr	r0, [r4, #4]
 8081d0a:	f7ff ff2d 	bl	8081b68 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
 8081d0e:	4629      	mov	r1, r5
 8081d10:	6860      	ldr	r0, [r4, #4]
 8081d12:	f7ff ff29 	bl	8081b68 <_ZN7TwoWire5writeEj>
 8081d16:	4646      	mov	r6, r8
 8081d18:	f108 091e 	add.w	r9, r8, #30
 8081d1c:	ebc8 0a05 	rsb	sl, r8, r5

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
				wire.write(*data);
 8081d20:	6860      	ldr	r0, [r4, #4]
 8081d22:	f816 1b01 	ldrb.w	r1, [r6], #1
 8081d26:	6803      	ldr	r3, [r0, #0]
 8081d28:	eb06 050a 	add.w	r5, r6, sl
 8081d2c:	689b      	ldr	r3, [r3, #8]
 8081d2e:	4798      	blx	r3
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
 8081d30:	45b1      	cmp	r9, r6
				wire.write(*data);
				framAddr++;
				data++;
 8081d32:	46b0      	mov	r8, r6
				dataLen--;
 8081d34:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
 8081d38:	d001      	beq.n	8081d3e <_ZN6MB85RC9writeDataEjPKhj+0x5a>
 8081d3a:	2f00      	cmp	r7, #0
 8081d3c:	d1f0      	bne.n	8081d20 <_ZN6MB85RC9writeDataEjPKhj+0x3c>
				framAddr++;
				data++;
				dataLen--;
			}

			int stat = wire.endTransmission(true);
 8081d3e:	2101      	movs	r1, #1
 8081d40:	6860      	ldr	r0, [r4, #4]
 8081d42:	f001 fbae 	bl	80834a2 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
 8081d46:	2800      	cmp	r0, #0
 8081d48:	d0d6      	beq.n	8081cf8 <_ZN6MB85RC9writeDataEjPKhj+0x14>
 8081d4a:	2400      	movs	r4, #0
 8081d4c:	e000      	b.n	8081d50 <_ZN6MB85RC9writeDataEjPKhj+0x6c>
 8081d4e:	2401      	movs	r4, #1


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
 8081d50:	a801      	add	r0, sp, #4
 8081d52:	f7ff ff32 	bl	8081bba <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
 8081d56:	4620      	mov	r0, r4
 8081d58:	b002      	add	sp, #8
 8081d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08081d5e <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 8081d5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081d62:	460e      	mov	r6, r1
 8081d64:	4615      	mov	r5, r2
 8081d66:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
 8081d68:	6840      	ldr	r0, [r0, #4]
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 8081d6a:	b08b      	sub	sp, #44	; 0x2c
 8081d6c:	461c      	mov	r4, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081d6e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081d70:	f001 fb9f 	bl	80834b2 <_ZN7TwoWire4lockEv>

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
 8081d74:	42ae      	cmp	r6, r5
 8081d76:	d223      	bcs.n	8081dc0 <_ZN6MB85RC8moveDataEjjj+0x62>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
 8081d78:	4426      	add	r6, r4
			framAddrTo += numBytes;
 8081d7a:	4425      	add	r5, r4
			while(numBytes > 0) {
 8081d7c:	b90c      	cbnz	r4, 8081d82 <_ZN6MB85RC8moveDataEjjj+0x24>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 8081d7e:	2401      	movs	r4, #1
 8081d80:	e03f      	b.n	8081e02 <_ZN6MB85RC8moveDataEjjj+0xa4>
 8081d82:	4627      	mov	r7, r4
 8081d84:	2c1e      	cmp	r4, #30
 8081d86:	bf28      	it	cs
 8081d88:	271e      	movcs	r7, #30
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
 8081d8a:	f8d8 3000 	ldr.w	r3, [r8]
			while(numBytes > 0) {
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
 8081d8e:	1bf6      	subs	r6, r6, r7
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
 8081d90:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8081d94:	aa02      	add	r2, sp, #8
 8081d96:	463b      	mov	r3, r7
 8081d98:	4631      	mov	r1, r6
 8081d9a:	4640      	mov	r0, r8
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;
 8081d9c:	1bed      	subs	r5, r5, r7

				result = readData(framAddrFrom, buf, count);
 8081d9e:	47c8      	blx	r9
				if (!result) {
 8081da0:	b908      	cbnz	r0, 8081da6 <_ZN6MB85RC8moveDataEjjj+0x48>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 8081da2:	2400      	movs	r4, #0
 8081da4:	e02d      	b.n	8081e02 <_ZN6MB85RC8moveDataEjjj+0xa4>

				result = readData(framAddrFrom, buf, count);
				if (!result) {
					break;
				}
				result = writeData(framAddrTo, buf, count);
 8081da6:	f8d8 3000 	ldr.w	r3, [r8]
 8081daa:	aa02      	add	r2, sp, #8
 8081dac:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8081db0:	4629      	mov	r1, r5
 8081db2:	463b      	mov	r3, r7
 8081db4:	4640      	mov	r0, r8
 8081db6:	47c8      	blx	r9
				if (!result) {
 8081db8:	2800      	cmp	r0, #0
 8081dba:	d0f2      	beq.n	8081da2 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}

				numBytes -= count;
 8081dbc:	1be4      	subs	r4, r4, r7
	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
			framAddrTo += numBytes;
			while(numBytes > 0) {
 8081dbe:	e7dd      	b.n	8081d7c <_ZN6MB85RC8moveDataEjjj+0x1e>
				numBytes -= count;
			}

		}
		else
		if (framAddrFrom > framAddrTo) {
 8081dc0:	d9dd      	bls.n	8081d7e <_ZN6MB85RC8moveDataEjjj+0x20>
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
 8081dc2:	2c00      	cmp	r4, #0
 8081dc4:	d0db      	beq.n	8081d7e <_ZN6MB85RC8moveDataEjjj+0x20>
 8081dc6:	4627      	mov	r7, r4
 8081dc8:	2c1e      	cmp	r4, #30
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				result = readData(framAddrFrom, buf, count);
 8081dca:	f8d8 3000 	ldr.w	r3, [r8]
 8081dce:	bf28      	it	cs
 8081dd0:	271e      	movcs	r7, #30
 8081dd2:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8081dd6:	aa02      	add	r2, sp, #8
 8081dd8:	463b      	mov	r3, r7
 8081dda:	4631      	mov	r1, r6
 8081ddc:	4640      	mov	r0, r8
 8081dde:	47c8      	blx	r9
				if (!result) {
 8081de0:	2800      	cmp	r0, #0
 8081de2:	d0de      	beq.n	8081da2 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				result = writeData(framAddrTo, buf, count);
 8081de4:	f8d8 3000 	ldr.w	r3, [r8]
 8081de8:	aa02      	add	r2, sp, #8
 8081dea:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8081dee:	4629      	mov	r1, r5
 8081df0:	463b      	mov	r3, r7
 8081df2:	4640      	mov	r0, r8
 8081df4:	47c8      	blx	r9
				if (!result) {
 8081df6:	2800      	cmp	r0, #0
 8081df8:	d0d3      	beq.n	8081da2 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				framAddrFrom += count;
 8081dfa:	443e      	add	r6, r7
				framAddrTo += count;
 8081dfc:	443d      	add	r5, r7
				numBytes -= count;
 8081dfe:	1be4      	subs	r4, r4, r7

		}
		else
		if (framAddrFrom > framAddrTo) {
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
 8081e00:	e7df      	b.n	8081dc2 <_ZN6MB85RC8moveDataEjjj+0x64>
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
 8081e02:	a801      	add	r0, sp, #4
 8081e04:	f7ff fed9 	bl	8081bba <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
 8081e08:	4620      	mov	r0, r4
 8081e0a:	b00b      	add	sp, #44	; 0x2c
 8081e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08081e10 <_GLOBAL__sub_I__ZN6MB85RCC2ER7TwoWireji>:
 8081e10:	f000 bba2 	b.w	8082558 <HAL_Pin_Map>

08081e14 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
	  }
	return false;
      }

      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081e14:	6842      	ldr	r2, [r0, #4]
 8081e16:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class& __object, _Args&&... __args) const
	{ return (__object.*_M_pmf)(std::forward<_Args>(__args)...); }
 8081e18:	f012 0f01 	tst.w	r2, #1
 8081e1c:	ea4f 0062 	mov.w	r0, r2, asr #1
 8081e20:	bf18      	it	ne
 8081e22:	580a      	ldrne	r2, [r1, r0]
 8081e24:	4408      	add	r0, r1
 8081e26:	bf18      	it	ne
 8081e28:	58d3      	ldrne	r3, [r2, r3]
 8081e2a:	4718      	bx	r3

08081e2c <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 8081e2c:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
 8081e2e:	2301      	movs	r3, #1
 8081e30:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 8081e32:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 8081e34:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
 8081e36:	b10b      	cbz	r3, 8081e3c <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
 8081e38:	68c0      	ldr	r0, [r0, #12]
 8081e3a:	e006      	b.n	8081e4a <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 8081e3c:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 8081e3e:	b128      	cbz	r0, 8081e4c <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081e40:	6883      	ldr	r3, [r0, #8]
 8081e42:	b90b      	cbnz	r3, 8081e48 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
 8081e44:	f002 fb9f 	bl	8084586 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081e48:	68c3      	ldr	r3, [r0, #12]
 8081e4a:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
 8081e4c:	2301      	movs	r3, #1
 8081e4e:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
 8081e50:	2000      	movs	r0, #0
    }
 8081e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
 8081e56:	f000 bb27 	b.w	80824a8 <os_thread_exit>

08081e5a <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
 8081e5a:	2a01      	cmp	r2, #1
      typedef _Simple_type_wrapper<_Functor> _Wrapper;
      typedef _Function_base::_Base_manager<_Wrapper> _Base;

    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8081e5c:	4603      	mov	r3, r0
		 _Manager_operation __op)
      {
	switch (__op)
 8081e5e:	d101      	bne.n	8081e64 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() =
 8081e60:	6001      	str	r1, [r0, #0]
	      &_Base::_M_get_pointer(__source)->__value;
	    break;
 8081e62:	e005      	b.n	8081e70 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8081e64:	2a02      	cmp	r2, #2
 8081e66:	d103      	bne.n	8081e70 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8081e68:	b110      	cbz	r0, 8081e70 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
 8081e6a:	c903      	ldmia	r1, {r0, r1}
 8081e6c:	e883 0003 	stmia.w	r3, {r0, r1}

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
 8081e70:	2000      	movs	r0, #0
 8081e72:	4770      	bx	lr

08081e74 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081e74:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8081e76:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081e78:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8081e7a:	b113      	cbz	r3, 8081e82 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081e7c:	2203      	movs	r2, #3
 8081e7e:	4601      	mov	r1, r0
 8081e80:	4798      	blx	r3
    }
 8081e82:	4620      	mov	r0, r4
 8081e84:	bd10      	pop	{r4, pc}
	...

08081e88 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
 8081e88:	2301      	movs	r3, #1

PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
 8081e8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
 8081e8c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29

PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
 8081e90:	4605      	mov	r5, r0
	haveSetup = true;

	os_mutex_create(&mutex);
 8081e92:	3008      	adds	r0, #8
 8081e94:	f000 fae0 	bl	8082458 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
 8081e98:	2004      	movs	r0, #4
 8081e9a:	f7fe f900 	bl	808009e <_Znwj>
 8081e9e:	4604      	mov	r4, r0
 8081ea0:	2800      	cmp	r0, #0
 8081ea2:	d035      	beq.n	8081f10 <_ZN21PublishQueueAsyncBase5setupEv+0x88>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
 8081ea4:	491c      	ldr	r1, [pc, #112]	; (8081f18 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
 8081ea6:	2014      	movs	r0, #20
 8081ea8:	f002 fb5c 	bl	8084564 <_ZnwjRKSt9nothrow_t>
 8081eac:	b130      	cbz	r0, 8081ebc <_ZN21PublishQueueAsyncBase5setupEv+0x34>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 8081eae:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
 8081eb0:	7403      	strb	r3, [r0, #16]
 8081eb2:	6003      	str	r3, [r0, #0]
 8081eb4:	6043      	str	r3, [r0, #4]
 8081eb6:	6083      	str	r3, [r0, #8]
 8081eb8:	60c3      	str	r3, [r0, #12]
 8081eba:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081ebc:	6020      	str	r0, [r4, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
 8081ebe:	b1b0      	cbz	r0, 8081eee <_ZN21PublishQueueAsyncBase5setupEv+0x66>
            goto error;
        }
        d_->func = function;
 8081ec0:	4b16      	ldr	r3, [pc, #88]	; (8081f1c <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 8081ec2:	2202      	movs	r2, #2
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
 8081ec4:	6083      	str	r3, [r0, #8]
 8081ec6:	6823      	ldr	r3, [r4, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 8081ec8:	4915      	ldr	r1, [pc, #84]	; (8081f20 <_ZN21PublishQueueAsyncBase5setupEv+0x98>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
 8081eca:	60dd      	str	r5, [r3, #12]
 8081ecc:	6820      	ldr	r0, [r4, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 8081ece:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8081ed2:	e88d 0009 	stmia.w	sp, {r0, r3}
 8081ed6:	4b13      	ldr	r3, [pc, #76]	; (8081f24 <_ZN21PublishQueueAsyncBase5setupEv+0x9c>)
 8081ed8:	3004      	adds	r0, #4
 8081eda:	f000 faad 	bl	8082438 <os_thread_create>
 8081ede:	b930      	cbnz	r0, 8081eee <_ZN21PublishQueueAsyncBase5setupEv+0x66>
 8081ee0:	6823      	ldr	r3, [r4, #0]
            goto error;
        }
        while (!d_->started) {
 8081ee2:	7c1b      	ldrb	r3, [r3, #16]
 8081ee4:	b9a3      	cbnz	r3, 8081f10 <_ZN21PublishQueueAsyncBase5setupEv+0x88>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
 8081ee6:	2001      	movs	r0, #1
 8081ee8:	f000 fb06 	bl	80824f8 <HAL_Delay_Milliseconds>
 8081eec:	e7f8      	b.n	8081ee0 <_ZN21PublishQueueAsyncBase5setupEv+0x58>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081eee:	6826      	ldr	r6, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 8081ef0:	2300      	movs	r3, #0
 8081ef2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 8081ef4:	b166      	cbz	r6, 8081f10 <_ZN21PublishQueueAsyncBase5setupEv+0x88>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 8081ef6:	6837      	ldr	r7, [r6, #0]
 8081ef8:	b137      	cbz	r7, 8081f08 <_ZN21PublishQueueAsyncBase5setupEv+0x80>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081efa:	4638      	mov	r0, r7
 8081efc:	f7ff ffba 	bl	8081e74 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 8081f00:	2110      	movs	r1, #16
 8081f02:	4638      	mov	r0, r7
 8081f04:	f002 fb23 	bl	808454e <_ZdlPvj>
 8081f08:	2114      	movs	r1, #20
 8081f0a:	4630      	mov	r0, r6
 8081f0c:	f002 fb1f 	bl	808454e <_ZdlPvj>
 8081f10:	606c      	str	r4, [r5, #4]
}
 8081f12:	b003      	add	sp, #12
 8081f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081f16:	bf00      	nop
 8081f18:	08086bf4 	.word	0x08086bf4
 8081f1c:	0808213b 	.word	0x0808213b
 8081f20:	08086888 	.word	0x08086888
 8081f24:	08081e2d 	.word	0x08081e2d

08081f28 <_ZN21PublishQueueAsyncBaseC1Ev>:
#include "PublishQueueAsyncRK.h"


Logger pubqLogger("app.pubq");

PublishQueueAsyncBase::PublishQueueAsyncBase() {
 8081f28:	f247 5130 	movw	r1, #30000	; 0x7530
 8081f2c:	60c1      	str	r1, [r0, #12]
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8081f2e:	490a      	ldr	r1, [pc, #40]	; (8081f58 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
 8081f30:	4a0a      	ldr	r2, [pc, #40]	; (8081f5c <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
 8081f32:	6101      	str	r1, [r0, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081f34:	490a      	ldr	r1, [pc, #40]	; (8081f60 <_ZN21PublishQueueAsyncBaseC1Ev+0x38>)
 8081f36:	6002      	str	r2, [r0, #0]
 8081f38:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
 8081f3a:	490a      	ldr	r1, [pc, #40]	; (8081f64 <_ZN21PublishQueueAsyncBaseC1Ev+0x3c>)
 8081f3c:	2200      	movs	r2, #0
 8081f3e:	6042      	str	r2, [r0, #4]
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8081f40:	6142      	str	r2, [r0, #20]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
 8081f42:	6181      	str	r1, [r0, #24]
 8081f44:	6202      	str	r2, [r0, #32]
 8081f46:	6242      	str	r2, [r0, #36]	; 0x24
 8081f48:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8081f4c:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
 8081f50:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a

}
 8081f54:	4770      	bx	lr
 8081f56:	bf00      	nop
 8081f58:	08082295 	.word	0x08082295
 8081f5c:	0808694c 	.word	0x0808694c
 8081f60:	08081e15 	.word	0x08081e15
 8081f64:	08081e5b 	.word	0x08081e5b

08081f68 <_ZN21PublishQueueAsyncBaseD1Ev>:

PublishQueueAsyncBase::~PublishQueueAsyncBase() {
 8081f68:	b510      	push	{r4, lr}
 8081f6a:	4604      	mov	r4, r0
 8081f6c:	4b03      	ldr	r3, [pc, #12]	; (8081f7c <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
 8081f6e:	f840 3b10 	str.w	r3, [r0], #16
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081f72:	f7ff ff7f 	bl	8081e74 <_ZNSt14_Function_baseD1Ev>

}
 8081f76:	4620      	mov	r0, r4
 8081f78:	bd10      	pop	{r4, pc}
 8081f7a:	bf00      	nop
 8081f7c:	0808694c 	.word	0x0808694c

08081f80 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
 8081f80:	b510      	push	{r4, lr}
 8081f82:	4604      	mov	r4, r0
 8081f84:	4b02      	ldr	r3, [pc, #8]	; (8081f90 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
 8081f86:	6003      	str	r3, [r0, #0]
 8081f88:	f7ff ffee 	bl	8081f68 <_ZN21PublishQueueAsyncBaseD1Ev>

}
 8081f8c:	4620      	mov	r0, r4
 8081f8e:	bd10      	pop	{r4, pc}
 8081f90:	08086868 	.word	0x08086868

08081f94 <_ZN25PublishQueueAsyncRetainedD0Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
 8081f94:	b510      	push	{r4, lr}
 8081f96:	4604      	mov	r4, r0

}
 8081f98:	f7ff fff2 	bl	8081f80 <_ZN25PublishQueueAsyncRetainedD1Ev>
 8081f9c:	4620      	mov	r0, r4
 8081f9e:	2138      	movs	r1, #56	; 0x38
 8081fa0:	f002 fad5 	bl	808454e <_ZdlPvj>
 8081fa4:	4620      	mov	r0, r4
 8081fa6:	bd10      	pop	{r4, pc}

08081fa8 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
}

void PublishQueueAsyncBase::mutexLock() const {
	os_mutex_lock(mutex);
 8081fa8:	6880      	ldr	r0, [r0, #8]
 8081faa:	f000 ba5d 	b.w	8082468 <os_mutex_lock>

08081fae <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
}

void PublishQueueAsyncBase::mutexUnlock() const {
	os_mutex_unlock(mutex);
 8081fae:	6880      	ldr	r0, [r0, #8]
 8081fb0:	f000 ba62 	b.w	8082478 <os_mutex_unlock>

08081fb4 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
 8081fb4:	b510      	push	{r4, lr}
 8081fb6:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
 8081fb8:	6800      	ldr	r0, [r0, #0]
 8081fba:	f7ff fff8 	bl	8081fae <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
 8081fbe:	4620      	mov	r0, r4
 8081fc0:	bd10      	pop	{r4, pc}

08081fc2 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
 8081fc2:	b513      	push	{r0, r1, r4, lr}
 8081fc4:	4604      	mov	r4, r0
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
 8081fc6:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
 8081fc8:	f7ff ffee 	bl	8081fa8 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
 8081fcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
 8081fce:	88dc      	ldrh	r4, [r3, #6]
 8081fd0:	b2a4      	uxth	r4, r4
 8081fd2:	b10c      	cbz	r4, 8081fd8 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
 8081fd4:	f103 0408 	add.w	r4, r3, #8
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
 8081fd8:	a801      	add	r0, sp, #4
 8081fda:	f7ff ffeb 	bl	8081fb4 <_ZN11StMutexLockD1Ev>
	if (hdr->numEvents > 0) {
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
	}

	return eventData;
}
 8081fde:	4620      	mov	r0, r4
 8081fe0:	b002      	add	sp, #8
 8081fe2:	bd10      	pop	{r4, pc}

08081fe4 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
 8081fe4:	b513      	push	{r0, r1, r4, lr}
 8081fe6:	4604      	mov	r4, r0
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
 8081fe8:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
 8081fea:	f7ff ffdd 	bl	8081fa8 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
 8081fee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8081ff2:	b91b      	cbnz	r3, 8081ffc <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x18>

	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
 8081ff4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	if (!isSending) {
		hdr->numEvents = 0;
		result = true;
 8081ff6:	2401      	movs	r4, #1

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
		hdr->numEvents = 0;
 8081ff8:	80d3      	strh	r3, [r2, #6]
 8081ffa:	e000      	b.n	8081ffe <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x1a>

bool PublishQueueAsyncRetained::clearEvents() {

	// This entire function holds a mutex lock that's released when returning

	bool result = false;
 8081ffc:	2400      	movs	r4, #0

	StMutexLock lock(this);
 8081ffe:	a801      	add	r0, sp, #4
 8082000:	f7ff ffd8 	bl	8081fb4 <_ZN11StMutexLockD1Ev>
		hdr->numEvents = 0;
		result = true;
	}

	return result;
}
 8082004:	4620      	mov	r0, r4
 8082006:	b002      	add	sp, #8
 8082008:	bd10      	pop	{r4, pc}

0808200a <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
 808200a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808200c:	4605      	mov	r5, r0
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
 808200e:	ac02      	add	r4, sp, #8
 8082010:	f844 0d04 	str.w	r0, [r4, #-4]!
		publishQueue->mutexLock();
 8082014:	f7ff ffc8 	bl	8081fa8 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
 8082018:	6aeb      	ldr	r3, [r5, #44]	; 0x2c

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
	uint16_t numEvents = 0;

	{
		StMutexLock lock(this);
 808201a:	4620      	mov	r0, r4

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
 808201c:	88dd      	ldrh	r5, [r3, #6]

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
	uint16_t numEvents = 0;

	{
		StMutexLock lock(this);
 808201e:	f7ff ffc9 	bl	8081fb4 <_ZN11StMutexLockD1Ev>
		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
	}

	return numEvents;
}
 8082022:	4628      	mov	r0, r5
 8082024:	b003      	add	sp, #12
 8082026:	bd30      	pop	{r4, r5, pc}

08082028 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {

}


bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
 8082028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808202c:	469a      	mov	sl, r3

	if (!haveSetup) {
 808202e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {

}


bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
 8082032:	b086      	sub	sp, #24
 8082034:	4604      	mov	r4, r0
 8082036:	4688      	mov	r8, r1
 8082038:	4616      	mov	r6, r2
 808203a:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
 808203e:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c

	if (!haveSetup) {
 8082042:	b913      	cbnz	r3, 808204a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
 8082044:	6803      	ldr	r3, [r0, #0]
 8082046:	689b      	ldr	r3, [r3, #8]
 8082048:	4798      	blx	r3
	}

	if (data == NULL) {
		data = "";
 808204a:	4b31      	ldr	r3, [pc, #196]	; (8082110 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	}

	// Size is the size of the header, the two c-strings (with null terminators), rounded up to a multiple of 4
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
 808204c:	4640      	mov	r0, r8
	if (!haveSetup) {
		setup();
	}

	if (data == NULL) {
		data = "";
 808204e:	2e00      	cmp	r6, #0
 8082050:	bf08      	it	eq
 8082052:	461e      	moveq	r6, r3
	}

	// Size is the size of the header, the two c-strings (with null terminators), rounded up to a multiple of 4
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
 8082054:	f003 fce7 	bl	8085a26 <strlen>
 8082058:	4605      	mov	r5, r0
 808205a:	4630      	mov	r0, r6
 808205c:	f003 fce3 	bl	8085a26 <strlen>
 8082060:	4428      	add	r0, r5
 8082062:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
 8082066:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
 8082068:	bf1c      	itt	ne
 808206a:	f025 0503 	bicne.w	r5, r5, #3
 808206e:	3504      	addne	r5, #4
	}

	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
 8082070:	4633      	mov	r3, r6
 8082072:	9503      	str	r5, [sp, #12]
 8082074:	9702      	str	r7, [sp, #8]
 8082076:	f8cd 9004 	str.w	r9, [sp, #4]
 808207a:	f8cd a000 	str.w	sl, [sp]
 808207e:	4642      	mov	r2, r8
 8082080:	4924      	ldr	r1, [pc, #144]	; (8082114 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
 8082082:	4825      	ldr	r0, [pc, #148]	; (8082118 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
 8082084:	f7ff fd74 	bl	8081b70 <_ZNK5spark6Logger4infoEPKcz>

	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
 8082088:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 808208a:	3b08      	subs	r3, #8
 808208c:	429d      	cmp	r5, r3
 808208e:	d90f      	bls.n	80820b0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x88>
		// Special case: event is larger than the retained buffer. Rather than throw out all events
		// before discovering this, check that case first
		return false;
 8082090:	2400      	movs	r4, #0
 8082092:	e038      	b.n	8082106 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xde>

			// If there's only one event, there's nothing left to discard, this event is too large
			// to fit with the existing first event (which we can't delete because it might be
			// in the process of being sent)
			PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
			if (hdr->numEvents == 1) {
 8082094:	88cb      	ldrh	r3, [r1, #6]
 8082096:	2b01      	cmp	r3, #1
 8082098:	d031      	beq.n	80820fe <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xd6>
		return false;
	}

	while(true) {
		{
			StMutexLock lock(this);
 808209a:	a805      	add	r0, sp, #20
 808209c:	f7ff ff8a 	bl	8081fb4 <_ZN11StMutexLockD1Ev>
			}
		}

		// Discard the oldest event (false) if we're not currently sending.
		// If we are sending (isSending=true), discard the second oldest event
		if (!discardOldEvent(isSending)) {
 80820a0:	6823      	ldr	r3, [r4, #0]
 80820a2:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80820a6:	699b      	ldr	r3, [r3, #24]
 80820a8:	4620      	mov	r0, r4
 80820aa:	4798      	blx	r3
 80820ac:	2800      	cmp	r0, #0
 80820ae:	d0ef      	beq.n	8082090 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x68>
 80820b0:	4620      	mov	r0, r4
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
 80820b2:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
 80820b4:	f7ff ff78 	bl	8081fa8 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	while(true) {
		{
			StMutexLock lock(this);

			uint8_t *end = &retainedBuffer[retainedBufferSize];
 80820b8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			if ((size_t)(end - nextFree) >= size) {
 80820ba:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80820bc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80820be:	440b      	add	r3, r1
 80820c0:	1a9b      	subs	r3, r3, r2
 80820c2:	429d      	cmp	r5, r3
 80820c4:	d8e6      	bhi.n	8082094 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6c>
				// There is room to fit this
				PublishQueueEventData *eventData = reinterpret_cast<PublishQueueEventData *>(nextFree);
				eventData->ttl = ttl;
				eventData->flags = flags1.value() | flags2.value();
 80820c6:	ea47 0709 	orr.w	r7, r7, r9

			uint8_t *end = &retainedBuffer[retainedBufferSize];
			if ((size_t)(end - nextFree) >= size) {
				// There is room to fit this
				PublishQueueEventData *eventData = reinterpret_cast<PublishQueueEventData *>(nextFree);
				eventData->ttl = ttl;
 80820ca:	f8c2 a000 	str.w	sl, [r2]
				eventData->flags = flags1.value() | flags2.value();
 80820ce:	7117      	strb	r7, [r2, #4]

				char *cp = reinterpret_cast<char *>(nextFree);
 80820d0:	6b67      	ldr	r7, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);

				strcpy(cp, eventName);
 80820d2:	4641      	mov	r1, r8
				PublishQueueEventData *eventData = reinterpret_cast<PublishQueueEventData *>(nextFree);
				eventData->ttl = ttl;
				eventData->flags = flags1.value() | flags2.value();

				char *cp = reinterpret_cast<char *>(nextFree);
				cp += sizeof(PublishQueueEventData);
 80820d4:	3708      	adds	r7, #8

				strcpy(cp, eventName);
 80820d6:	4638      	mov	r0, r7
 80820d8:	f003 fc82 	bl	80859e0 <strcpy>
				cp += strlen(cp) + 1;
 80820dc:	4638      	mov	r0, r7
 80820de:	f003 fca2 	bl	8085a26 <strlen>

				strcpy(cp, data);
 80820e2:	3001      	adds	r0, #1
 80820e4:	4631      	mov	r1, r6
 80820e6:	4438      	add	r0, r7
 80820e8:	f003 fc7a 	bl	80859e0 <strcpy>

				nextFree += size;
 80820ec:	6b60      	ldr	r0, [r4, #52]	; 0x34

				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
 80820ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				strcpy(cp, eventName);
				cp += strlen(cp) + 1;

				strcpy(cp, data);

				nextFree += size;
 80820f0:	4428      	add	r0, r5
 80820f2:	6360      	str	r0, [r4, #52]	; 0x34

				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
				hdr->numEvents++;
 80820f4:	88d3      	ldrh	r3, [r2, #6]
				return true;
 80820f6:	2401      	movs	r4, #1
				strcpy(cp, data);

				nextFree += size;

				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
				hdr->numEvents++;
 80820f8:	3301      	adds	r3, #1
 80820fa:	80d3      	strh	r3, [r2, #6]
				return true;
 80820fc:	e000      	b.n	8082100 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xd8>
			// If there's only one event, there's nothing left to discard, this event is too large
			// to fit with the existing first event (which we can't delete because it might be
			// in the process of being sent)
			PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
			if (hdr->numEvents == 1) {
				return false;
 80820fe:	2400      	movs	r4, #0

				nextFree += size;

				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
				hdr->numEvents++;
				return true;
 8082100:	a805      	add	r0, sp, #20
 8082102:	f7ff ff57 	bl	8081fb4 <_ZN11StMutexLockD1Ev>
		}
	}

	// Not reached
	return false;
}
 8082106:	4620      	mov	r0, r4
 8082108:	b006      	add	sp, #24
 808210a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808210e:	bf00      	nop
 8082110:	0808659e 	.word	0x0808659e
 8082114:	0808689a 	.word	0x0808689a
 8082118:	20000290 	.word	0x20000290

0808211c <_ZN21PublishQueueAsyncBase14threadFunctionEv>:

void PublishQueueAsyncBase::mutexUnlock() const {
	os_mutex_unlock(mutex);
}

void PublishQueueAsyncBase::threadFunction() {
 808211c:	4604      	mov	r4, r0
 808211e:	b508      	push	{r3, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082120:	f100 0510 	add.w	r5, r0, #16
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082124:	69a3      	ldr	r3, [r4, #24]
 8082126:	b90b      	cbnz	r3, 808212c <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
 8082128:	f002 fa2d 	bl	8084586 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808212c:	69e3      	ldr	r3, [r4, #28]
 808212e:	4621      	mov	r1, r4
 8082130:	4628      	mov	r0, r5
 8082132:	4798      	blx	r3
	// Call the stateHandler forever
	while(true) {
		stateHandler(*this);
		os_thread_yield();
 8082134:	f000 f988 	bl	8082448 <os_thread_yield>
 8082138:	e7f4      	b.n	8082124 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

0808213a <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
	}
}


// [static]
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
 808213a:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
 808213c:	f7ff ffee 	bl	808211c <_ZN21PublishQueueAsyncBase14threadFunctionEv>

08082140 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
	}

	return result;
}

uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
 8082140:	b538      	push	{r3, r4, r5, lr}
	start += sizeof(PublishQueueEventData);
 8082142:	f101 0408 	add.w	r4, r1, #8
	}

	return result;
}

uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
 8082146:	4605      	mov	r5, r0
	start += sizeof(PublishQueueEventData);
	start += strlen(reinterpret_cast<char *>(start)) + 1;
 8082148:	4620      	mov	r0, r4
 808214a:	f003 fc6c 	bl	8085a26 <strlen>
 808214e:	3001      	adds	r0, #1
 8082150:	4404      	add	r4, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
 8082152:	4620      	mov	r0, r4
 8082154:	f003 fc67 	bl	8085a26 <strlen>

	// Align
	size_t offset = start - retainedBuffer;
	if ((offset % 4) != 0) {
 8082158:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
}

uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
	start += sizeof(PublishQueueEventData);
	start += strlen(reinterpret_cast<char *>(start)) + 1;
	start += strlen(reinterpret_cast<char *>(start)) + 1;
 808215a:	3001      	adds	r0, #1
 808215c:	4420      	add	r0, r4

	// Align
	size_t offset = start - retainedBuffer;
	if ((offset % 4) != 0) {
 808215e:	1ac3      	subs	r3, r0, r3
 8082160:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
 8082164:	bf1c      	itt	ne
 8082166:	f1c3 0304 	rsbne	r3, r3, #4
 808216a:	18c0      	addne	r0, r0, r3
	}


	return start;
}
 808216c:	bd38      	pop	{r3, r4, r5, pc}

0808216e <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:


bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
 808216e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8082172:	4605      	mov	r5, r0
 8082174:	4688      	mov	r8, r1
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
 8082176:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
 8082178:	f7ff ff16 	bl	8081fa8 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
 808217c:	6aee      	ldr	r6, [r5, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
 808217e:	f106 0708 	add.w	r7, r6, #8
 8082182:	88f4      	ldrh	r4, [r6, #6]
	uint8_t *end = &retainedBuffer[retainedBufferSize];

	if (secondEvent) {
 8082184:	f1b8 0f00 	cmp.w	r8, #0
 8082188:	d007      	beq.n	808219a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x2c>
		if (hdr->numEvents < 2) {
 808218a:	2c01      	cmp	r4, #1
 808218c:	d91c      	bls.n	80821c8 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x5a>
			return false;
		}
		start = skipEvent(start);
 808218e:	4639      	mov	r1, r7
 8082190:	4628      	mov	r0, r5
 8082192:	f7ff ffd5 	bl	8082140 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
 8082196:	4607      	mov	r7, r0
 8082198:	e000      	b.n	808219c <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x2e>
	}
	else {
		if (hdr->numEvents < 1) {
 808219a:	b1b4      	cbz	r4, 80821ca <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x5c>
			return false;
		}
	}

	// Remove the event at start
	uint8_t *next = skipEvent(start);
 808219c:	4639      	mov	r1, r7
 808219e:	4628      	mov	r0, r5
 80821a0:	f7ff ffce 	bl	8082140 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	size_t len = next - start;

	size_t after = end - next;
 80821a4:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
			return false;
		}
	}

	// Remove the event at start
	uint8_t *next = skipEvent(start);
 80821a6:	4601      	mov	r1, r0
	size_t len = next - start;

	size_t after = end - next;
 80821a8:	4432      	add	r2, r6
	if (after > 0) {
 80821aa:	1a12      	subs	r2, r2, r0
		}
	}

	// Remove the event at start
	uint8_t *next = skipEvent(start);
	size_t len = next - start;
 80821ac:	eba0 0407 	sub.w	r4, r0, r7

	size_t after = end - next;
	if (after > 0) {
 80821b0:	d002      	beq.n	80821b8 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x4a>
		// Move events down
		memmove(start, next, after);
 80821b2:	4638      	mov	r0, r7
 80821b4:	f003 fbbf 	bl	8085936 <memmove>
	}

	nextFree -= len;
 80821b8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80821ba:	1b1b      	subs	r3, r3, r4
 80821bc:	636b      	str	r3, [r5, #52]	; 0x34
	hdr->numEvents--;
 80821be:	88f3      	ldrh	r3, [r6, #6]


	return true;
 80821c0:	2401      	movs	r4, #1
		// Move events down
		memmove(start, next, after);
	}

	nextFree -= len;
	hdr->numEvents--;
 80821c2:	3b01      	subs	r3, #1
 80821c4:	80f3      	strh	r3, [r6, #6]


	return true;
 80821c6:	e000      	b.n	80821ca <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x5c>
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
	uint8_t *end = &retainedBuffer[retainedBufferSize];

	if (secondEvent) {
		if (hdr->numEvents < 2) {
			return false;
 80821c8:	2400      	movs	r4, #0
}


bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
 80821ca:	a801      	add	r0, sp, #4
 80821cc:	f7ff fef2 	bl	8081fb4 <_ZN11StMutexLockD1Ev>
	nextFree -= len;
	hdr->numEvents--;


	return true;
}
 80821d0:	4620      	mov	r0, r4
 80821d2:	b002      	add	sp, #8
 80821d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080821d8 <_ZN25PublishQueueAsyncRetainedC1EPht>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
	static_cast<PublishQueueAsync *>(param)->threadFunction();
}


PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
 80821d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80821dc:	460d      	mov	r5, r1
 80821de:	4604      	mov	r4, r0
 80821e0:	4690      	mov	r8, r2

	// Initialize the retained buffer
	bool initBuffer = false;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
 80821e2:	462f      	mov	r7, r5
	static_cast<PublishQueueAsync *>(param)->threadFunction();
}


PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
 80821e4:	f7ff fea0 	bl	8081f28 <_ZN21PublishQueueAsyncBaseC1Ev>
 80821e8:	4b15      	ldr	r3, [pc, #84]	; (8082240 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
 80821ea:	2600      	movs	r6, #0
 80821ec:	6023      	str	r3, [r4, #0]
 80821ee:	62e5      	str	r5, [r4, #44]	; 0x2c
 80821f0:	f8a4 8030 	strh.w	r8, [r4, #48]	; 0x30
 80821f4:	6366      	str	r6, [r4, #52]	; 0x34

	// Initialize the retained buffer
	bool initBuffer = false;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
 80821f6:	4b13      	ldr	r3, [pc, #76]	; (8082244 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
 80821f8:	f857 2b08 	ldr.w	r2, [r7], #8
 80821fc:	4699      	mov	r9, r3
 80821fe:	429a      	cmp	r2, r3
 8082200:	d114      	bne.n	808222c <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
 8082202:	88ab      	ldrh	r3, [r5, #4]
 8082204:	b29b      	uxth	r3, r3
 8082206:	4598      	cmp	r8, r3
 8082208:	d110      	bne.n	808222c <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		// Calculate the next write offset
		uint8_t *end = &retainedBuffer[retainedBufferSize];
 808220a:	eb05 0a08 	add.w	sl, r5, r8

		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
 808220e:	6367      	str	r7, [r4, #52]	; 0x34
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
 8082210:	88eb      	ldrh	r3, [r5, #6]
 8082212:	b2b2      	uxth	r2, r6
 8082214:	b29b      	uxth	r3, r3
 8082216:	429a      	cmp	r2, r3
 8082218:	d20f      	bcs.n	808223a <_ZN25PublishQueueAsyncRetainedC1EPht+0x62>
			nextFree = skipEvent(nextFree);
 808221a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 808221c:	4620      	mov	r0, r4
 808221e:	f7ff ff8f 	bl	8082140 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
 8082222:	4582      	cmp	sl, r0
		// Calculate the next write offset
		uint8_t *end = &retainedBuffer[retainedBufferSize];

		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
			nextFree = skipEvent(nextFree);
 8082224:	6360      	str	r0, [r4, #52]	; 0x34
 8082226:	f106 0601 	add.w	r6, r6, #1
			if (nextFree > end) {
 808222a:	d2f1      	bcs.n	8082210 <_ZN25PublishQueueAsyncRetainedC1EPht+0x38>
	//initBuffer = true; // Uncomment to discard old data

	if (initBuffer) {
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
		hdr->size = retainedBufferSize;
		hdr->numEvents = 0;
 808222c:	2300      	movs	r3, #0
	}

	//initBuffer = true; // Uncomment to discard old data

	if (initBuffer) {
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
 808222e:	f8c5 9000 	str.w	r9, [r5]
		hdr->size = retainedBufferSize;
 8082232:	f8a5 8004 	strh.w	r8, [r5, #4]
		hdr->numEvents = 0;
 8082236:	80eb      	strh	r3, [r5, #6]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
 8082238:	6367      	str	r7, [r4, #52]	; 0x34
	}
}
 808223a:	4620      	mov	r0, r4
 808223c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8082240:	08086868 	.word	0x08086868
 8082244:	d19cab61 	.word	0xd19cab61

08082248 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
 8082248:	b510      	push	{r4, lr}
 808224a:	4604      	mov	r4, r0
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 808224c:	e891 000c 	ldmia.w	r1, {r2, r3}
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
 8082250:	b086      	sub	sp, #24
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8082252:	9202      	str	r2, [sp, #8]
 8082254:	68a2      	ldr	r2, [r4, #8]
 8082256:	9303      	str	r3, [sp, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082258:	ab02      	add	r3, sp, #8
 808225a:	e893 0003 	ldmia.w	r3, {r0, r1}
 808225e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8082262:	e894 0003 	ldmia.w	r4, {r0, r1}
 8082266:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 808226a:	e89d 0003 	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808226e:	9204      	str	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8082270:	4a06      	ldr	r2, [pc, #24]	; (808228c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_+0x44>)
 8082272:	e884 0003 	stmia.w	r4, {r0, r1}
 8082276:	60a2      	str	r2, [r4, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082278:	68e2      	ldr	r2, [r4, #12]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808227a:	4618      	mov	r0, r3
 808227c:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 808227e:	4a04      	ldr	r2, [pc, #16]	; (8082290 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_+0x48>)
 8082280:	60e2      	str	r2, [r4, #12]
 8082282:	f7ff fdf7 	bl	8081e74 <_ZNSt14_Function_baseD1Ev>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
 8082286:	4620      	mov	r0, r4
 8082288:	b006      	add	sp, #24
 808228a:	bd10      	pop	{r4, pc}
 808228c:	08081e5b 	.word	0x08081e5b
 8082290:	08081e15 	.word	0x08081e15

08082294 <_ZN21PublishQueueAsyncBase10startStateEv>:
		stateHandler(*this);
		os_thread_yield();
	}
}

void PublishQueueAsyncBase::startState() {
 8082294:	b507      	push	{r0, r1, r2, lr}
	// If we had other initialization to do, this would be a good place to do it.

	// Ready to process events
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
 8082296:	4b05      	ldr	r3, [pc, #20]	; (80822ac <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
 8082298:	4669      	mov	r1, sp
 808229a:	9300      	str	r3, [sp, #0]
 808229c:	3010      	adds	r0, #16
 808229e:	2300      	movs	r3, #0
 80822a0:	9301      	str	r3, [sp, #4]
 80822a2:	f7ff ffd1 	bl	8082248 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
}
 80822a6:	b003      	add	sp, #12
 80822a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80822ac:	080822dd 	.word	0x080822dd

080822b0 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
		// Not cloud connected or can't publish yet (not connected or published too recently)
	}

}

void PublishQueueAsyncBase::waitRetryState() {
 80822b0:	b513      	push	{r0, r1, r4, lr}
 80822b2:	4604      	mov	r4, r0
 80822b4:	f000 f930 	bl	8082518 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
 80822b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80822ba:	1ac0      	subs	r0, r0, r3
 80822bc:	68e3      	ldr	r3, [r4, #12]
 80822be:	4298      	cmp	r0, r3
 80822c0:	d308      	bcc.n	80822d4 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
 80822c2:	4b05      	ldr	r3, [pc, #20]	; (80822d8 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
 80822c4:	4669      	mov	r1, sp
 80822c6:	9300      	str	r3, [sp, #0]
 80822c8:	f104 0010 	add.w	r0, r4, #16
 80822cc:	2300      	movs	r3, #0
 80822ce:	9301      	str	r3, [sp, #4]
 80822d0:	f7ff ffba 	bl	8082248 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
	}
}
 80822d4:	b002      	add	sp, #8
 80822d6:	bd10      	pop	{r4, pc}
 80822d8:	080822dd 	.word	0x080822dd

080822dc <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
	// Ready to process events
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
}


void PublishQueueAsyncBase::checkQueueState() {
 80822dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
 80822e0:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
	// Ready to process events
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
}


void PublishQueueAsyncBase::checkQueueState() {
 80822e4:	b086      	sub	sp, #24
 80822e6:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
 80822e8:	2b00      	cmp	r3, #0
 80822ea:	d173      	bne.n	80823d4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
 80822ec:	f000 fb16 	bl	808291c <spark_cloud_flag_connected>
 80822f0:	2800      	cmp	r0, #0
 80822f2:	d06f      	beq.n	80823d4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
 80822f4:	f000 f910 	bl	8082518 <HAL_Timer_Get_Milli_Seconds>
 80822f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80822fa:	1ac0      	subs	r0, r0, r3
 80822fc:	f240 33f1 	movw	r3, #1009	; 0x3f1
 8082300:	4298      	cmp	r0, r3
 8082302:	d967      	bls.n	80823d4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>

		PublishQueueEventData *data = getOldestEvent();
 8082304:	6823      	ldr	r3, [r4, #0]
 8082306:	4620      	mov	r0, r4
 8082308:	695b      	ldr	r3, [r3, #20]
 808230a:	4798      	blx	r3
		if (data) {
 808230c:	4605      	mov	r5, r0
 808230e:	2800      	cmp	r0, #0
 8082310:	d060      	beq.n	80823d4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
			// We have an event and can probably publish
			isSending = true;

			const char *buf = reinterpret_cast<const char *>(data);
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
 8082312:	f105 0608 	add.w	r6, r5, #8
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {

		PublishQueueEventData *data = getOldestEvent();
		if (data) {
			// We have an event and can probably publish
			isSending = true;
 8082316:	2301      	movs	r3, #1
 8082318:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

			const char *buf = reinterpret_cast<const char *>(data);
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
			const char *eventData = eventName;
			eventData += strlen(eventData) + 1;
 808231c:	4630      	mov	r0, r6
 808231e:	f003 fb82 	bl	8085a26 <strlen>

			PublishFlags flags(PublishFlag(data->flags));
 8082322:	f895 8004 	ldrb.w	r8, [r5, #4]
			isSending = true;

			const char *buf = reinterpret_cast<const char *>(data);
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
			const char *eventData = eventName;
			eventData += strlen(eventData) + 1;
 8082326:	3001      	adds	r0, #1

			PublishFlags flags(PublishFlag(data->flags));

			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
 8082328:	f8cd 8004 	str.w	r8, [sp, #4]
 808232c:	682b      	ldr	r3, [r5, #0]
			isSending = true;

			const char *buf = reinterpret_cast<const char *>(data);
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
			const char *eventData = eventName;
			eventData += strlen(eventData) + 1;
 808232e:	1837      	adds	r7, r6, r0

			PublishFlags flags(PublishFlag(data->flags));

			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
 8082330:	9300      	str	r3, [sp, #0]
 8082332:	4632      	mov	r2, r6
 8082334:	463b      	mov	r3, r7
 8082336:	4929      	ldr	r1, [pc, #164]	; (80823dc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
 8082338:	4829      	ldr	r0, [pc, #164]	; (80823e0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
 808233a:	f7ff fc19 	bl	8081b70 <_ZNK5spark6Logger4infoEPKcz>

			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
 808233e:	682b      	ldr	r3, [r5, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8082340:	463a      	mov	r2, r7
 8082342:	f88d 8000 	strb.w	r8, [sp]
 8082346:	4631      	mov	r1, r6
 8082348:	a802      	add	r0, sp, #8
 808234a:	f000 feaf 	bl	80830ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 808234e:	9d02      	ldr	r5, [sp, #8]
 8082350:	786b      	ldrb	r3, [r5, #1]

			// Use this technique of looping because the future will not be handled properly
			// when waiting in a worker thread like this.
			while(!request.isDone()) {
 8082352:	b91b      	cbnz	r3, 808235c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
 8082354:	2001      	movs	r0, #1
 8082356:	f000 fba9 	bl	8082aac <delay>
 808235a:	e7f8      	b.n	808234e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 808235c:	2000      	movs	r0, #0
 808235e:	f000 fa75 	bl	808284c <application_thread_current>
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
 8082362:	b120      	cbz	r0, 808236e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
 8082364:	786b      	ldrb	r3, [r5, #1]
            const system_tick_t t = (timeout > 0) ? millis() : 0;
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 8082366:	b913      	cbnz	r3, 808236e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>

// Event loop and threading abstraction. Used for unit testing
struct FutureContext {
    // Runs the application's event loop
    static void processApplicationEvents() {
        spark_process();
 8082368:	f000 fac0 	bl	80828ec <spark_process>
 808236c:	e7fa      	b.n	8082364 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 808236e:	782b      	ldrb	r3, [r5, #0]
			}
			bool bResult = request.isSucceeded();
			if (bResult) {
 8082370:	2b01      	cmp	r3, #1
 8082372:	d109      	bne.n	8082388 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xac>
				// Successfully published
				pubqLogger.info("published successfully");
 8082374:	491b      	ldr	r1, [pc, #108]	; (80823e4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
 8082376:	481a      	ldr	r0, [pc, #104]	; (80823e0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
 8082378:	f7ff fbfa 	bl	8081b70 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
 808237c:	6823      	ldr	r3, [r4, #0]
 808237e:	2100      	movs	r1, #0
 8082380:	699b      	ldr	r3, [r3, #24]
 8082382:	4620      	mov	r0, r4
 8082384:	4798      	blx	r3
 8082386:	e00d      	b.n	80823a4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xc8>
			}
			else {
				// Did not successfully transmit, try again after retry time
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
 8082388:	4917      	ldr	r1, [pc, #92]	; (80823e8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
 808238a:	4815      	ldr	r0, [pc, #84]	; (80823e0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
 808238c:	68e2      	ldr	r2, [r4, #12]
 808238e:	f7ff fbef 	bl	8081b70 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
 8082392:	4b16      	ldr	r3, [pc, #88]	; (80823ec <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
 8082394:	a904      	add	r1, sp, #16
 8082396:	9304      	str	r3, [sp, #16]
 8082398:	f104 0010 	add.w	r0, r4, #16
 808239c:	2300      	movs	r3, #0
 808239e:	9305      	str	r3, [sp, #20]
 80823a0:	f7ff ff52 	bl	8082248 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
			}
			isSending = false;
 80823a4:	2300      	movs	r3, #0
 80823a6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80823aa:	f000 f8b5 	bl	8082518 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
 80823ae:	6260      	str	r0, [r4, #36]	; 0x24
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80823b0:	9c03      	ldr	r4, [sp, #12]
 80823b2:	b17c      	cbz	r4, 80823d4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80823b4:	6863      	ldr	r3, [r4, #4]
 80823b6:	3b01      	subs	r3, #1
 80823b8:	6063      	str	r3, [r4, #4]
 80823ba:	b95b      	cbnz	r3, 80823d4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
        {
          _M_dispose();
 80823bc:	6823      	ldr	r3, [r4, #0]
 80823be:	4620      	mov	r0, r4
 80823c0:	689b      	ldr	r3, [r3, #8]
 80823c2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80823c4:	68a3      	ldr	r3, [r4, #8]
 80823c6:	3b01      	subs	r3, #1
 80823c8:	60a3      	str	r3, [r4, #8]
 80823ca:	b91b      	cbnz	r3, 80823d4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
            _M_destroy();
 80823cc:	6823      	ldr	r3, [r4, #0]
 80823ce:	4620      	mov	r0, r4
 80823d0:	68db      	ldr	r3, [r3, #12]
 80823d2:	4798      	blx	r3
	}
	else {
		// Not cloud connected or can't publish yet (not connected or published too recently)
	}

}
 80823d4:	b006      	add	sp, #24
 80823d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80823da:	bf00      	nop
 80823dc:	080868db 	.word	0x080868db
 80823e0:	20000290 	.word	0x20000290
 80823e4:	080868fc 	.word	0x080868fc
 80823e8:	08086913 	.word	0x08086913
 80823ec:	080822b1 	.word	0x080822b1

080823f0 <_GLOBAL__sub_I_pubqLogger>:
		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
	}

	return numEvents;
}
 80823f0:	b508      	push	{r3, lr}
 80823f2:	f000 f8b1 	bl	8082558 <HAL_Pin_Map>
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80823f6:	4a02      	ldr	r2, [pc, #8]	; (8082400 <_GLOBAL__sub_I_pubqLogger+0x10>)
 80823f8:	4b02      	ldr	r3, [pc, #8]	; (8082404 <_GLOBAL__sub_I_pubqLogger+0x14>)
 80823fa:	601a      	str	r2, [r3, #0]
 80823fc:	bd08      	pop	{r3, pc}
 80823fe:	bf00      	nop
 8082400:	0808693a 	.word	0x0808693a
 8082404:	20000290 	.word	0x20000290

08082408 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8082408:	b508      	push	{r3, lr}
 808240a:	4b02      	ldr	r3, [pc, #8]	; (8082414 <inet_gethostbyname+0xc>)
 808240c:	681b      	ldr	r3, [r3, #0]
 808240e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8082410:	9301      	str	r3, [sp, #4]
 8082412:	bd08      	pop	{r3, pc}
 8082414:	08060020 	.word	0x08060020

08082418 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 8082418:	b508      	push	{r3, lr}
 808241a:	4b02      	ldr	r3, [pc, #8]	; (8082424 <cellular_signal+0xc>)
 808241c:	681b      	ldr	r3, [r3, #0]
 808241e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8082420:	9301      	str	r3, [sp, #4]
 8082422:	bd08      	pop	{r3, pc}
 8082424:	08060020 	.word	0x08060020

08082428 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8082428:	b508      	push	{r3, lr}
 808242a:	4b02      	ldr	r3, [pc, #8]	; (8082434 <cellular_command+0xc>)
 808242c:	681b      	ldr	r3, [r3, #0]
 808242e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8082430:	9301      	str	r3, [sp, #4]
 8082432:	bd08      	pop	{r3, pc}
 8082434:	08060020 	.word	0x08060020

08082438 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 8082438:	b508      	push	{r3, lr}
 808243a:	4b02      	ldr	r3, [pc, #8]	; (8082444 <os_thread_create+0xc>)
 808243c:	681b      	ldr	r3, [r3, #0]
 808243e:	685b      	ldr	r3, [r3, #4]
 8082440:	9301      	str	r3, [sp, #4]
 8082442:	bd08      	pop	{r3, pc}
 8082444:	080401d0 	.word	0x080401d0

08082448 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 8082448:	b508      	push	{r3, lr}
 808244a:	4b02      	ldr	r3, [pc, #8]	; (8082454 <os_thread_yield+0xc>)
 808244c:	681b      	ldr	r3, [r3, #0]
 808244e:	68db      	ldr	r3, [r3, #12]
 8082450:	9301      	str	r3, [sp, #4]
 8082452:	bd08      	pop	{r3, pc}
 8082454:	080401d0 	.word	0x080401d0

08082458 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8082458:	b508      	push	{r3, lr}
 808245a:	4b02      	ldr	r3, [pc, #8]	; (8082464 <os_mutex_create+0xc>)
 808245c:	681b      	ldr	r3, [r3, #0]
 808245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082460:	9301      	str	r3, [sp, #4]
 8082462:	bd08      	pop	{r3, pc}
 8082464:	080401d0 	.word	0x080401d0

08082468 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 8082468:	b508      	push	{r3, lr}
 808246a:	4b02      	ldr	r3, [pc, #8]	; (8082474 <os_mutex_lock+0xc>)
 808246c:	681b      	ldr	r3, [r3, #0]
 808246e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8082470:	9301      	str	r3, [sp, #4]
 8082472:	bd08      	pop	{r3, pc}
 8082474:	080401d0 	.word	0x080401d0

08082478 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 8082478:	b508      	push	{r3, lr}
 808247a:	4b02      	ldr	r3, [pc, #8]	; (8082484 <os_mutex_unlock+0xc>)
 808247c:	681b      	ldr	r3, [r3, #0]
 808247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082480:	9301      	str	r3, [sp, #4]
 8082482:	bd08      	pop	{r3, pc}
 8082484:	080401d0 	.word	0x080401d0

08082488 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8082488:	b508      	push	{r3, lr}
 808248a:	4b02      	ldr	r3, [pc, #8]	; (8082494 <os_mutex_recursive_create+0xc>)
 808248c:	681b      	ldr	r3, [r3, #0]
 808248e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8082490:	9301      	str	r3, [sp, #4]
 8082492:	bd08      	pop	{r3, pc}
 8082494:	080401d0 	.word	0x080401d0

08082498 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8082498:	b508      	push	{r3, lr}
 808249a:	4b02      	ldr	r3, [pc, #8]	; (80824a4 <os_mutex_recursive_destroy+0xc>)
 808249c:	681b      	ldr	r3, [r3, #0]
 808249e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80824a0:	9301      	str	r3, [sp, #4]
 80824a2:	bd08      	pop	{r3, pc}
 80824a4:	080401d0 	.word	0x080401d0

080824a8 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 80824a8:	b508      	push	{r3, lr}
 80824aa:	4b02      	ldr	r3, [pc, #8]	; (80824b4 <os_thread_exit+0xc>)
 80824ac:	681b      	ldr	r3, [r3, #0]
 80824ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80824b0:	9301      	str	r3, [sp, #4]
 80824b2:	bd08      	pop	{r3, pc}
 80824b4:	080401d0 	.word	0x080401d0

080824b8 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 80824b8:	b508      	push	{r3, lr}
 80824ba:	4b02      	ldr	r3, [pc, #8]	; (80824c4 <HAL_Feature_Set+0xc>)
 80824bc:	681b      	ldr	r3, [r3, #0]
 80824be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80824c0:	9301      	str	r3, [sp, #4]
 80824c2:	bd08      	pop	{r3, pc}
 80824c4:	080401b8 	.word	0x080401b8

080824c8 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80824c8:	b508      	push	{r3, lr}
 80824ca:	4b02      	ldr	r3, [pc, #8]	; (80824d4 <HAL_Core_System_Reset_Ex+0xc>)
 80824cc:	681b      	ldr	r3, [r3, #0]
 80824ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80824d0:	9301      	str	r3, [sp, #4]
 80824d2:	bd08      	pop	{r3, pc}
 80824d4:	080401b8 	.word	0x080401b8

080824d8 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80824d8:	b508      	push	{r3, lr}
 80824da:	4b02      	ldr	r3, [pc, #8]	; (80824e4 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80824dc:	681b      	ldr	r3, [r3, #0]
 80824de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80824e0:	9301      	str	r3, [sp, #4]
 80824e2:	bd08      	pop	{r3, pc}
 80824e4:	080401b8 	.word	0x080401b8

080824e8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80824e8:	b508      	push	{r3, lr}
 80824ea:	4b02      	ldr	r3, [pc, #8]	; (80824f4 <HAL_RNG_GetRandomNumber+0xc>)
 80824ec:	681b      	ldr	r3, [r3, #0]
 80824ee:	685b      	ldr	r3, [r3, #4]
 80824f0:	9301      	str	r3, [sp, #4]
 80824f2:	bd08      	pop	{r3, pc}
 80824f4:	0804019c 	.word	0x0804019c

080824f8 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 80824f8:	b508      	push	{r3, lr}
 80824fa:	4b02      	ldr	r3, [pc, #8]	; (8082504 <HAL_Delay_Milliseconds+0xc>)
 80824fc:	681b      	ldr	r3, [r3, #0]
 80824fe:	689b      	ldr	r3, [r3, #8]
 8082500:	9301      	str	r3, [sp, #4]
 8082502:	bd08      	pop	{r3, pc}
 8082504:	0804019c 	.word	0x0804019c

08082508 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8082508:	b508      	push	{r3, lr}
 808250a:	4b02      	ldr	r3, [pc, #8]	; (8082514 <HAL_Delay_Microseconds+0xc>)
 808250c:	681b      	ldr	r3, [r3, #0]
 808250e:	68db      	ldr	r3, [r3, #12]
 8082510:	9301      	str	r3, [sp, #4]
 8082512:	bd08      	pop	{r3, pc}
 8082514:	0804019c 	.word	0x0804019c

08082518 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8082518:	b508      	push	{r3, lr}
 808251a:	4b02      	ldr	r3, [pc, #8]	; (8082524 <HAL_Timer_Get_Milli_Seconds+0xc>)
 808251c:	681b      	ldr	r3, [r3, #0]
 808251e:	695b      	ldr	r3, [r3, #20]
 8082520:	9301      	str	r3, [sp, #4]
 8082522:	bd08      	pop	{r3, pc}
 8082524:	0804019c 	.word	0x0804019c

08082528 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8082528:	b508      	push	{r3, lr}
 808252a:	4b02      	ldr	r3, [pc, #8]	; (8082534 <HAL_RTC_Get_UnixTime+0xc>)
 808252c:	681b      	ldr	r3, [r3, #0]
 808252e:	69db      	ldr	r3, [r3, #28]
 8082530:	9301      	str	r3, [sp, #4]
 8082532:	bd08      	pop	{r3, pc}
 8082534:	0804019c 	.word	0x0804019c

08082538 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8082538:	b508      	push	{r3, lr}
 808253a:	4b02      	ldr	r3, [pc, #8]	; (8082544 <HAL_RTC_Time_Is_Valid+0xc>)
 808253c:	681b      	ldr	r3, [r3, #0]
 808253e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8082540:	9301      	str	r3, [sp, #4]
 8082542:	bd08      	pop	{r3, pc}
 8082544:	0804019c 	.word	0x0804019c

08082548 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8082548:	b508      	push	{r3, lr}
 808254a:	4b02      	ldr	r3, [pc, #8]	; (8082554 <hal_timer_millis+0xc>)
 808254c:	681b      	ldr	r3, [r3, #0]
 808254e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082550:	9301      	str	r3, [sp, #4]
 8082552:	bd08      	pop	{r3, pc}
 8082554:	0804019c 	.word	0x0804019c

08082558 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8082558:	b508      	push	{r3, lr}
 808255a:	4b02      	ldr	r3, [pc, #8]	; (8082564 <HAL_Pin_Map+0xc>)
 808255c:	681b      	ldr	r3, [r3, #0]
 808255e:	681b      	ldr	r3, [r3, #0]
 8082560:	9301      	str	r3, [sp, #4]
 8082562:	bd08      	pop	{r3, pc}
 8082564:	080401b0 	.word	0x080401b0

08082568 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8082568:	b508      	push	{r3, lr}
 808256a:	4b02      	ldr	r3, [pc, #8]	; (8082574 <HAL_Validate_Pin_Function+0xc>)
 808256c:	681b      	ldr	r3, [r3, #0]
 808256e:	685b      	ldr	r3, [r3, #4]
 8082570:	9301      	str	r3, [sp, #4]
 8082572:	bd08      	pop	{r3, pc}
 8082574:	080401b0 	.word	0x080401b0

08082578 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8082578:	b508      	push	{r3, lr}
 808257a:	4b02      	ldr	r3, [pc, #8]	; (8082584 <HAL_Pin_Mode+0xc>)
 808257c:	681b      	ldr	r3, [r3, #0]
 808257e:	689b      	ldr	r3, [r3, #8]
 8082580:	9301      	str	r3, [sp, #4]
 8082582:	bd08      	pop	{r3, pc}
 8082584:	080401b0 	.word	0x080401b0

08082588 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8082588:	b508      	push	{r3, lr}
 808258a:	4b02      	ldr	r3, [pc, #8]	; (8082594 <HAL_Get_Pin_Mode+0xc>)
 808258c:	681b      	ldr	r3, [r3, #0]
 808258e:	68db      	ldr	r3, [r3, #12]
 8082590:	9301      	str	r3, [sp, #4]
 8082592:	bd08      	pop	{r3, pc}
 8082594:	080401b0 	.word	0x080401b0

08082598 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8082598:	b508      	push	{r3, lr}
 808259a:	4b02      	ldr	r3, [pc, #8]	; (80825a4 <HAL_GPIO_Write+0xc>)
 808259c:	681b      	ldr	r3, [r3, #0]
 808259e:	691b      	ldr	r3, [r3, #16]
 80825a0:	9301      	str	r3, [sp, #4]
 80825a2:	bd08      	pop	{r3, pc}
 80825a4:	080401b0 	.word	0x080401b0

080825a8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80825a8:	b508      	push	{r3, lr}
 80825aa:	4b02      	ldr	r3, [pc, #8]	; (80825b4 <HAL_GPIO_Read+0xc>)
 80825ac:	681b      	ldr	r3, [r3, #0]
 80825ae:	695b      	ldr	r3, [r3, #20]
 80825b0:	9301      	str	r3, [sp, #4]
 80825b2:	bd08      	pop	{r3, pc}
 80825b4:	080401b0 	.word	0x080401b0

080825b8 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80825b8:	b508      	push	{r3, lr}
 80825ba:	4b02      	ldr	r3, [pc, #8]	; (80825c4 <HAL_Interrupts_Attach+0xc>)
 80825bc:	681b      	ldr	r3, [r3, #0]
 80825be:	699b      	ldr	r3, [r3, #24]
 80825c0:	9301      	str	r3, [sp, #4]
 80825c2:	bd08      	pop	{r3, pc}
 80825c4:	080401b0 	.word	0x080401b0

080825c8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 80825c8:	b508      	push	{r3, lr}
 80825ca:	4b02      	ldr	r3, [pc, #8]	; (80825d4 <HAL_Interrupts_Detach+0xc>)
 80825cc:	681b      	ldr	r3, [r3, #0]
 80825ce:	69db      	ldr	r3, [r3, #28]
 80825d0:	9301      	str	r3, [sp, #4]
 80825d2:	bd08      	pop	{r3, pc}
 80825d4:	080401b0 	.word	0x080401b0

080825d8 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80825d8:	b508      	push	{r3, lr}
 80825da:	4b02      	ldr	r3, [pc, #8]	; (80825e4 <HAL_ADC_Read+0xc>)
 80825dc:	681b      	ldr	r3, [r3, #0]
 80825de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80825e0:	9301      	str	r3, [sp, #4]
 80825e2:	bd08      	pop	{r3, pc}
 80825e4:	080401b0 	.word	0x080401b0

080825e8 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80825e8:	b508      	push	{r3, lr}
 80825ea:	4b02      	ldr	r3, [pc, #8]	; (80825f4 <HAL_I2C_Begin+0xc>)
 80825ec:	681b      	ldr	r3, [r3, #0]
 80825ee:	68db      	ldr	r3, [r3, #12]
 80825f0:	9301      	str	r3, [sp, #4]
 80825f2:	bd08      	pop	{r3, pc}
 80825f4:	080401ac 	.word	0x080401ac

080825f8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 80825f8:	b508      	push	{r3, lr}
 80825fa:	4b02      	ldr	r3, [pc, #8]	; (8082604 <HAL_I2C_Begin_Transmission+0xc>)
 80825fc:	681b      	ldr	r3, [r3, #0]
 80825fe:	699b      	ldr	r3, [r3, #24]
 8082600:	9301      	str	r3, [sp, #4]
 8082602:	bd08      	pop	{r3, pc}
 8082604:	080401ac 	.word	0x080401ac

08082608 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8082608:	b508      	push	{r3, lr}
 808260a:	4b02      	ldr	r3, [pc, #8]	; (8082614 <HAL_I2C_End_Transmission+0xc>)
 808260c:	681b      	ldr	r3, [r3, #0]
 808260e:	69db      	ldr	r3, [r3, #28]
 8082610:	9301      	str	r3, [sp, #4]
 8082612:	bd08      	pop	{r3, pc}
 8082614:	080401ac 	.word	0x080401ac

08082618 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8082618:	b508      	push	{r3, lr}
 808261a:	4b02      	ldr	r3, [pc, #8]	; (8082624 <HAL_I2C_Write_Data+0xc>)
 808261c:	681b      	ldr	r3, [r3, #0]
 808261e:	6a1b      	ldr	r3, [r3, #32]
 8082620:	9301      	str	r3, [sp, #4]
 8082622:	bd08      	pop	{r3, pc}
 8082624:	080401ac 	.word	0x080401ac

08082628 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8082628:	b508      	push	{r3, lr}
 808262a:	4b02      	ldr	r3, [pc, #8]	; (8082634 <HAL_I2C_Available_Data+0xc>)
 808262c:	681b      	ldr	r3, [r3, #0]
 808262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082630:	9301      	str	r3, [sp, #4]
 8082632:	bd08      	pop	{r3, pc}
 8082634:	080401ac 	.word	0x080401ac

08082638 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8082638:	b508      	push	{r3, lr}
 808263a:	4b02      	ldr	r3, [pc, #8]	; (8082644 <HAL_I2C_Read_Data+0xc>)
 808263c:	681b      	ldr	r3, [r3, #0]
 808263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8082640:	9301      	str	r3, [sp, #4]
 8082642:	bd08      	pop	{r3, pc}
 8082644:	080401ac 	.word	0x080401ac

08082648 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8082648:	b508      	push	{r3, lr}
 808264a:	4b02      	ldr	r3, [pc, #8]	; (8082654 <HAL_I2C_Peek_Data+0xc>)
 808264c:	681b      	ldr	r3, [r3, #0]
 808264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082650:	9301      	str	r3, [sp, #4]
 8082652:	bd08      	pop	{r3, pc}
 8082654:	080401ac 	.word	0x080401ac

08082658 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8082658:	b508      	push	{r3, lr}
 808265a:	4b02      	ldr	r3, [pc, #8]	; (8082664 <HAL_I2C_Flush_Data+0xc>)
 808265c:	681b      	ldr	r3, [r3, #0]
 808265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082660:	9301      	str	r3, [sp, #4]
 8082662:	bd08      	pop	{r3, pc}
 8082664:	080401ac 	.word	0x080401ac

08082668 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8082668:	b508      	push	{r3, lr}
 808266a:	4b02      	ldr	r3, [pc, #8]	; (8082674 <HAL_I2C_Is_Enabled+0xc>)
 808266c:	681b      	ldr	r3, [r3, #0]
 808266e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8082670:	9301      	str	r3, [sp, #4]
 8082672:	bd08      	pop	{r3, pc}
 8082674:	080401ac 	.word	0x080401ac

08082678 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 8082678:	b508      	push	{r3, lr}
 808267a:	4b02      	ldr	r3, [pc, #8]	; (8082684 <HAL_I2C_Init+0xc>)
 808267c:	681b      	ldr	r3, [r3, #0]
 808267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082680:	9301      	str	r3, [sp, #4]
 8082682:	bd08      	pop	{r3, pc}
 8082684:	080401ac 	.word	0x080401ac

08082688 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 8082688:	b508      	push	{r3, lr}
 808268a:	4b02      	ldr	r3, [pc, #8]	; (8082694 <HAL_I2C_Acquire+0xc>)
 808268c:	681b      	ldr	r3, [r3, #0]
 808268e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8082690:	9301      	str	r3, [sp, #4]
 8082692:	bd08      	pop	{r3, pc}
 8082694:	080401ac 	.word	0x080401ac

08082698 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 8082698:	b508      	push	{r3, lr}
 808269a:	4b02      	ldr	r3, [pc, #8]	; (80826a4 <HAL_I2C_Release+0xc>)
 808269c:	681b      	ldr	r3, [r3, #0]
 808269e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80826a0:	9301      	str	r3, [sp, #4]
 80826a2:	bd08      	pop	{r3, pc}
 80826a4:	080401ac 	.word	0x080401ac

080826a8 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
 80826a8:	b508      	push	{r3, lr}
 80826aa:	4b02      	ldr	r3, [pc, #8]	; (80826b4 <HAL_I2C_Request_Data_Ex+0xc>)
 80826ac:	681b      	ldr	r3, [r3, #0]
 80826ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80826b0:	9301      	str	r3, [sp, #4]
 80826b2:	bd08      	pop	{r3, pc}
 80826b4:	080401ac 	.word	0x080401ac

080826b8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80826b8:	b508      	push	{r3, lr}
 80826ba:	4b02      	ldr	r3, [pc, #8]	; (80826c4 <HAL_SPI_Init+0xc>)
 80826bc:	681b      	ldr	r3, [r3, #0]
 80826be:	69db      	ldr	r3, [r3, #28]
 80826c0:	9301      	str	r3, [sp, #4]
 80826c2:	bd08      	pop	{r3, pc}
 80826c4:	080401b4 	.word	0x080401b4

080826c8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80826c8:	b508      	push	{r3, lr}
 80826ca:	4b02      	ldr	r3, [pc, #8]	; (80826d4 <HAL_SPI_Is_Enabled+0xc>)
 80826cc:	681b      	ldr	r3, [r3, #0]
 80826ce:	6a1b      	ldr	r3, [r3, #32]
 80826d0:	9301      	str	r3, [sp, #4]
 80826d2:	bd08      	pop	{r3, pc}
 80826d4:	080401b4 	.word	0x080401b4

080826d8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80826d8:	b508      	push	{r3, lr}
 80826da:	4b02      	ldr	r3, [pc, #8]	; (80826e4 <HAL_USART_Init+0xc>)
 80826dc:	681b      	ldr	r3, [r3, #0]
 80826de:	699b      	ldr	r3, [r3, #24]
 80826e0:	9301      	str	r3, [sp, #4]
 80826e2:	bd08      	pop	{r3, pc}
 80826e4:	080401c4 	.word	0x080401c4

080826e8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80826e8:	b508      	push	{r3, lr}
 80826ea:	4b02      	ldr	r3, [pc, #8]	; (80826f4 <HAL_USART_Write_Data+0xc>)
 80826ec:	681b      	ldr	r3, [r3, #0]
 80826ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80826f0:	9301      	str	r3, [sp, #4]
 80826f2:	bd08      	pop	{r3, pc}
 80826f4:	080401c4 	.word	0x080401c4

080826f8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80826f8:	b508      	push	{r3, lr}
 80826fa:	4b02      	ldr	r3, [pc, #8]	; (8082704 <HAL_USART_Available_Data+0xc>)
 80826fc:	681b      	ldr	r3, [r3, #0]
 80826fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8082700:	9301      	str	r3, [sp, #4]
 8082702:	bd08      	pop	{r3, pc}
 8082704:	080401c4 	.word	0x080401c4

08082708 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8082708:	b508      	push	{r3, lr}
 808270a:	4b02      	ldr	r3, [pc, #8]	; (8082714 <HAL_USART_Read_Data+0xc>)
 808270c:	681b      	ldr	r3, [r3, #0]
 808270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082710:	9301      	str	r3, [sp, #4]
 8082712:	bd08      	pop	{r3, pc}
 8082714:	080401c4 	.word	0x080401c4

08082718 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8082718:	b508      	push	{r3, lr}
 808271a:	4b02      	ldr	r3, [pc, #8]	; (8082724 <HAL_USART_Peek_Data+0xc>)
 808271c:	681b      	ldr	r3, [r3, #0]
 808271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082720:	9301      	str	r3, [sp, #4]
 8082722:	bd08      	pop	{r3, pc}
 8082724:	080401c4 	.word	0x080401c4

08082728 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8082728:	b508      	push	{r3, lr}
 808272a:	4b02      	ldr	r3, [pc, #8]	; (8082734 <HAL_USART_Flush_Data+0xc>)
 808272c:	681b      	ldr	r3, [r3, #0]
 808272e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8082730:	9301      	str	r3, [sp, #4]
 8082732:	bd08      	pop	{r3, pc}
 8082734:	080401c4 	.word	0x080401c4

08082738 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8082738:	b508      	push	{r3, lr}
 808273a:	4b02      	ldr	r3, [pc, #8]	; (8082744 <HAL_USART_Is_Enabled+0xc>)
 808273c:	681b      	ldr	r3, [r3, #0]
 808273e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8082740:	9301      	str	r3, [sp, #4]
 8082742:	bd08      	pop	{r3, pc}
 8082744:	080401c4 	.word	0x080401c4

08082748 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8082748:	b508      	push	{r3, lr}
 808274a:	4b02      	ldr	r3, [pc, #8]	; (8082754 <HAL_USART_Available_Data_For_Write+0xc>)
 808274c:	681b      	ldr	r3, [r3, #0]
 808274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082750:	9301      	str	r3, [sp, #4]
 8082752:	bd08      	pop	{r3, pc}
 8082754:	080401c4 	.word	0x080401c4

08082758 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8082758:	b508      	push	{r3, lr}
 808275a:	4b02      	ldr	r3, [pc, #8]	; (8082764 <HAL_USB_USART_Init+0xc>)
 808275c:	681b      	ldr	r3, [r3, #0]
 808275e:	681b      	ldr	r3, [r3, #0]
 8082760:	9301      	str	r3, [sp, #4]
 8082762:	bd08      	pop	{r3, pc}
 8082764:	0806001c 	.word	0x0806001c

08082768 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8082768:	b508      	push	{r3, lr}
 808276a:	4b02      	ldr	r3, [pc, #8]	; (8082774 <HAL_USB_USART_Available_Data+0xc>)
 808276c:	681b      	ldr	r3, [r3, #0]
 808276e:	691b      	ldr	r3, [r3, #16]
 8082770:	9301      	str	r3, [sp, #4]
 8082772:	bd08      	pop	{r3, pc}
 8082774:	0806001c 	.word	0x0806001c

08082778 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8082778:	b508      	push	{r3, lr}
 808277a:	4b02      	ldr	r3, [pc, #8]	; (8082784 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 808277c:	681b      	ldr	r3, [r3, #0]
 808277e:	695b      	ldr	r3, [r3, #20]
 8082780:	9301      	str	r3, [sp, #4]
 8082782:	bd08      	pop	{r3, pc}
 8082784:	0806001c 	.word	0x0806001c

08082788 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8082788:	b508      	push	{r3, lr}
 808278a:	4b02      	ldr	r3, [pc, #8]	; (8082794 <HAL_USB_USART_Receive_Data+0xc>)
 808278c:	681b      	ldr	r3, [r3, #0]
 808278e:	699b      	ldr	r3, [r3, #24]
 8082790:	9301      	str	r3, [sp, #4]
 8082792:	bd08      	pop	{r3, pc}
 8082794:	0806001c 	.word	0x0806001c

08082798 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8082798:	b508      	push	{r3, lr}
 808279a:	4b02      	ldr	r3, [pc, #8]	; (80827a4 <HAL_USB_USART_Send_Data+0xc>)
 808279c:	681b      	ldr	r3, [r3, #0]
 808279e:	69db      	ldr	r3, [r3, #28]
 80827a0:	9301      	str	r3, [sp, #4]
 80827a2:	bd08      	pop	{r3, pc}
 80827a4:	0806001c 	.word	0x0806001c

080827a8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80827a8:	b508      	push	{r3, lr}
 80827aa:	4b02      	ldr	r3, [pc, #8]	; (80827b4 <HAL_USB_USART_Flush_Data+0xc>)
 80827ac:	681b      	ldr	r3, [r3, #0]
 80827ae:	6a1b      	ldr	r3, [r3, #32]
 80827b0:	9301      	str	r3, [sp, #4]
 80827b2:	bd08      	pop	{r3, pc}
 80827b4:	0806001c 	.word	0x0806001c

080827b8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80827b8:	b508      	push	{r3, lr}
 80827ba:	4b02      	ldr	r3, [pc, #8]	; (80827c4 <panic_+0xc>)
 80827bc:	681b      	ldr	r3, [r3, #0]
 80827be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80827c0:	9301      	str	r3, [sp, #4]
 80827c2:	bd08      	pop	{r3, pc}
 80827c4:	080201a0 	.word	0x080201a0

080827c8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80827c8:	b508      	push	{r3, lr}
 80827ca:	4b02      	ldr	r3, [pc, #8]	; (80827d4 <log_message+0xc>)
 80827cc:	681b      	ldr	r3, [r3, #0]
 80827ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80827d0:	9301      	str	r3, [sp, #4]
 80827d2:	bd08      	pop	{r3, pc}
 80827d4:	080201a0 	.word	0x080201a0

080827d8 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80827d8:	b508      	push	{r3, lr}
 80827da:	4b02      	ldr	r3, [pc, #8]	; (80827e4 <log_message_v+0xc>)
 80827dc:	681b      	ldr	r3, [r3, #0]
 80827de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80827e0:	9301      	str	r3, [sp, #4]
 80827e2:	bd08      	pop	{r3, pc}
 80827e4:	080201a0 	.word	0x080201a0

080827e8 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
 80827e8:	b508      	push	{r3, lr}
 80827ea:	4b03      	ldr	r3, [pc, #12]	; (80827f8 <diag_get_source+0x10>)
 80827ec:	681b      	ldr	r3, [r3, #0]
 80827ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80827f2:	9301      	str	r3, [sp, #4]
 80827f4:	bd08      	pop	{r3, pc}
 80827f6:	0000      	.short	0x0000
 80827f8:	080201a0 	.word	0x080201a0

080827fc <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80827fc:	b508      	push	{r3, lr}
 80827fe:	4b02      	ldr	r3, [pc, #8]	; (8082808 <system_mode+0xc>)
 8082800:	681b      	ldr	r3, [r3, #0]
 8082802:	681b      	ldr	r3, [r3, #0]
 8082804:	9301      	str	r3, [sp, #4]
 8082806:	bd08      	pop	{r3, pc}
 8082808:	080401a4 	.word	0x080401a4

0808280c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 808280c:	b508      	push	{r3, lr}
 808280e:	4b02      	ldr	r3, [pc, #8]	; (8082818 <set_system_mode+0xc>)
 8082810:	681b      	ldr	r3, [r3, #0]
 8082812:	685b      	ldr	r3, [r3, #4]
 8082814:	9301      	str	r3, [sp, #4]
 8082816:	bd08      	pop	{r3, pc}
 8082818:	080401a4 	.word	0x080401a4

0808281c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 808281c:	b508      	push	{r3, lr}
 808281e:	4b02      	ldr	r3, [pc, #8]	; (8082828 <system_delay_ms+0xc>)
 8082820:	681b      	ldr	r3, [r3, #0]
 8082822:	695b      	ldr	r3, [r3, #20]
 8082824:	9301      	str	r3, [sp, #4]
 8082826:	bd08      	pop	{r3, pc}
 8082828:	080401a4 	.word	0x080401a4

0808282c <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 808282c:	b508      	push	{r3, lr}
 808282e:	4b02      	ldr	r3, [pc, #8]	; (8082838 <system_sleep+0xc>)
 8082830:	681b      	ldr	r3, [r3, #0]
 8082832:	699b      	ldr	r3, [r3, #24]
 8082834:	9301      	str	r3, [sp, #4]
 8082836:	bd08      	pop	{r3, pc}
 8082838:	080401a4 	.word	0x080401a4

0808283c <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 808283c:	b508      	push	{r3, lr}
 808283e:	4b02      	ldr	r3, [pc, #8]	; (8082848 <system_thread_set_state+0xc>)
 8082840:	681b      	ldr	r3, [r3, #0]
 8082842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082844:	9301      	str	r3, [sp, #4]
 8082846:	bd08      	pop	{r3, pc}
 8082848:	080401a4 	.word	0x080401a4

0808284c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 808284c:	b508      	push	{r3, lr}
 808284e:	4b02      	ldr	r3, [pc, #8]	; (8082858 <application_thread_current+0xc>)
 8082850:	681b      	ldr	r3, [r3, #0]
 8082852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8082854:	9301      	str	r3, [sp, #4]
 8082856:	bd08      	pop	{r3, pc}
 8082858:	080401a4 	.word	0x080401a4

0808285c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 808285c:	b508      	push	{r3, lr}
 808285e:	4b02      	ldr	r3, [pc, #8]	; (8082868 <application_thread_invoke+0xc>)
 8082860:	681b      	ldr	r3, [r3, #0]
 8082862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8082864:	9301      	str	r3, [sp, #4]
 8082866:	bd08      	pop	{r3, pc}
 8082868:	080401a4 	.word	0x080401a4

0808286c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 808286c:	b508      	push	{r3, lr}
 808286e:	4b02      	ldr	r3, [pc, #8]	; (8082878 <system_thread_get_state+0xc>)
 8082870:	681b      	ldr	r3, [r3, #0]
 8082872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8082874:	9301      	str	r3, [sp, #4]
 8082876:	bd08      	pop	{r3, pc}
 8082878:	080401a4 	.word	0x080401a4

0808287c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 808287c:	b508      	push	{r3, lr}
 808287e:	4b03      	ldr	r3, [pc, #12]	; (808288c <system_ctrl_set_app_request_handler+0x10>)
 8082880:	681b      	ldr	r3, [r3, #0]
 8082882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8082886:	9301      	str	r3, [sp, #4]
 8082888:	bd08      	pop	{r3, pc}
 808288a:	0000      	.short	0x0000
 808288c:	080401a4 	.word	0x080401a4

08082890 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8082890:	b508      	push	{r3, lr}
 8082892:	4b03      	ldr	r3, [pc, #12]	; (80828a0 <system_ctrl_set_result+0x10>)
 8082894:	681b      	ldr	r3, [r3, #0]
 8082896:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808289a:	9301      	str	r3, [sp, #4]
 808289c:	bd08      	pop	{r3, pc}
 808289e:	0000      	.short	0x0000
 80828a0:	080401a4 	.word	0x080401a4

080828a4 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
 80828a4:	b508      	push	{r3, lr}
 80828a6:	4b03      	ldr	r3, [pc, #12]	; (80828b4 <system_power_management_set_config+0x10>)
 80828a8:	681b      	ldr	r3, [r3, #0]
 80828aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80828ae:	9301      	str	r3, [sp, #4]
 80828b0:	bd08      	pop	{r3, pc}
 80828b2:	0000      	.short	0x0000
 80828b4:	080401a4 	.word	0x080401a4

080828b8 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
 80828b8:	b508      	push	{r3, lr}
 80828ba:	4b03      	ldr	r3, [pc, #12]	; (80828c8 <system_sleep_ext+0x10>)
 80828bc:	681b      	ldr	r3, [r3, #0]
 80828be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80828c2:	9301      	str	r3, [sp, #4]
 80828c4:	bd08      	pop	{r3, pc}
 80828c6:	0000      	.short	0x0000
 80828c8:	080401a4 	.word	0x080401a4

080828cc <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80828cc:	b508      	push	{r3, lr}
 80828ce:	4b02      	ldr	r3, [pc, #8]	; (80828d8 <spark_variable+0xc>)
 80828d0:	681b      	ldr	r3, [r3, #0]
 80828d2:	681b      	ldr	r3, [r3, #0]
 80828d4:	9301      	str	r3, [sp, #4]
 80828d6:	bd08      	pop	{r3, pc}
 80828d8:	080401cc 	.word	0x080401cc

080828dc <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80828dc:	b508      	push	{r3, lr}
 80828de:	4b02      	ldr	r3, [pc, #8]	; (80828e8 <spark_function+0xc>)
 80828e0:	681b      	ldr	r3, [r3, #0]
 80828e2:	685b      	ldr	r3, [r3, #4]
 80828e4:	9301      	str	r3, [sp, #4]
 80828e6:	bd08      	pop	{r3, pc}
 80828e8:	080401cc 	.word	0x080401cc

080828ec <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80828ec:	b508      	push	{r3, lr}
 80828ee:	4b02      	ldr	r3, [pc, #8]	; (80828f8 <spark_process+0xc>)
 80828f0:	681b      	ldr	r3, [r3, #0]
 80828f2:	689b      	ldr	r3, [r3, #8]
 80828f4:	9301      	str	r3, [sp, #4]
 80828f6:	bd08      	pop	{r3, pc}
 80828f8:	080401cc 	.word	0x080401cc

080828fc <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80828fc:	b508      	push	{r3, lr}
 80828fe:	4b02      	ldr	r3, [pc, #8]	; (8082908 <spark_cloud_flag_connect+0xc>)
 8082900:	681b      	ldr	r3, [r3, #0]
 8082902:	68db      	ldr	r3, [r3, #12]
 8082904:	9301      	str	r3, [sp, #4]
 8082906:	bd08      	pop	{r3, pc}
 8082908:	080401cc 	.word	0x080401cc

0808290c <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
 808290c:	b508      	push	{r3, lr}
 808290e:	4b02      	ldr	r3, [pc, #8]	; (8082918 <spark_cloud_flag_disconnect+0xc>)
 8082910:	681b      	ldr	r3, [r3, #0]
 8082912:	691b      	ldr	r3, [r3, #16]
 8082914:	9301      	str	r3, [sp, #4]
 8082916:	bd08      	pop	{r3, pc}
 8082918:	080401cc 	.word	0x080401cc

0808291c <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 808291c:	b508      	push	{r3, lr}
 808291e:	4b02      	ldr	r3, [pc, #8]	; (8082928 <spark_cloud_flag_connected+0xc>)
 8082920:	681b      	ldr	r3, [r3, #0]
 8082922:	695b      	ldr	r3, [r3, #20]
 8082924:	9301      	str	r3, [sp, #4]
 8082926:	bd08      	pop	{r3, pc}
 8082928:	080401cc 	.word	0x080401cc

0808292c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 808292c:	b508      	push	{r3, lr}
 808292e:	4b02      	ldr	r3, [pc, #8]	; (8082938 <spark_deviceID+0xc>)
 8082930:	681b      	ldr	r3, [r3, #0]
 8082932:	69db      	ldr	r3, [r3, #28]
 8082934:	9301      	str	r3, [sp, #4]
 8082936:	bd08      	pop	{r3, pc}
 8082938:	080401cc 	.word	0x080401cc

0808293c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 808293c:	b508      	push	{r3, lr}
 808293e:	4b02      	ldr	r3, [pc, #8]	; (8082948 <spark_send_event+0xc>)
 8082940:	681b      	ldr	r3, [r3, #0]
 8082942:	6a1b      	ldr	r3, [r3, #32]
 8082944:	9301      	str	r3, [sp, #4]
 8082946:	bd08      	pop	{r3, pc}
 8082948:	080401cc 	.word	0x080401cc

0808294c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 808294c:	b508      	push	{r3, lr}
 808294e:	4b02      	ldr	r3, [pc, #8]	; (8082958 <spark_subscribe+0xc>)
 8082950:	681b      	ldr	r3, [r3, #0]
 8082952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082954:	9301      	str	r3, [sp, #4]
 8082956:	bd08      	pop	{r3, pc}
 8082958:	080401cc 	.word	0x080401cc

0808295c <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 808295c:	b508      	push	{r3, lr}
 808295e:	4b02      	ldr	r3, [pc, #8]	; (8082968 <spark_sync_time+0xc>)
 8082960:	681b      	ldr	r3, [r3, #0]
 8082962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082964:	9301      	str	r3, [sp, #4]
 8082966:	bd08      	pop	{r3, pc}
 8082968:	080401cc 	.word	0x080401cc

0808296c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 808296c:	b508      	push	{r3, lr}
 808296e:	4b02      	ldr	r3, [pc, #8]	; (8082978 <spark_sync_time_pending+0xc>)
 8082970:	681b      	ldr	r3, [r3, #0]
 8082972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082974:	9301      	str	r3, [sp, #4]
 8082976:	bd08      	pop	{r3, pc}
 8082978:	080401cc 	.word	0x080401cc

0808297c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 808297c:	b508      	push	{r3, lr}
 808297e:	4b02      	ldr	r3, [pc, #8]	; (8082988 <spark_set_random_seed_from_cloud_handler+0xc>)
 8082980:	681b      	ldr	r3, [r3, #0]
 8082982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8082984:	9301      	str	r3, [sp, #4]
 8082986:	bd08      	pop	{r3, pc}
 8082988:	080401cc 	.word	0x080401cc

0808298c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 808298c:	b508      	push	{r3, lr}
 808298e:	4b02      	ldr	r3, [pc, #8]	; (8082998 <network_connect+0xc>)
 8082990:	681b      	ldr	r3, [r3, #0]
 8082992:	685b      	ldr	r3, [r3, #4]
 8082994:	9301      	str	r3, [sp, #4]
 8082996:	bd08      	pop	{r3, pc}
 8082998:	080401c8 	.word	0x080401c8

0808299c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 808299c:	b508      	push	{r3, lr}
 808299e:	4b02      	ldr	r3, [pc, #8]	; (80829a8 <network_connecting+0xc>)
 80829a0:	681b      	ldr	r3, [r3, #0]
 80829a2:	689b      	ldr	r3, [r3, #8]
 80829a4:	9301      	str	r3, [sp, #4]
 80829a6:	bd08      	pop	{r3, pc}
 80829a8:	080401c8 	.word	0x080401c8

080829ac <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80829ac:	b508      	push	{r3, lr}
 80829ae:	4b02      	ldr	r3, [pc, #8]	; (80829b8 <network_disconnect+0xc>)
 80829b0:	681b      	ldr	r3, [r3, #0]
 80829b2:	68db      	ldr	r3, [r3, #12]
 80829b4:	9301      	str	r3, [sp, #4]
 80829b6:	bd08      	pop	{r3, pc}
 80829b8:	080401c8 	.word	0x080401c8

080829bc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80829bc:	b508      	push	{r3, lr}
 80829be:	4b02      	ldr	r3, [pc, #8]	; (80829c8 <network_ready+0xc>)
 80829c0:	681b      	ldr	r3, [r3, #0]
 80829c2:	691b      	ldr	r3, [r3, #16]
 80829c4:	9301      	str	r3, [sp, #4]
 80829c6:	bd08      	pop	{r3, pc}
 80829c8:	080401c8 	.word	0x080401c8

080829cc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80829cc:	b508      	push	{r3, lr}
 80829ce:	4b02      	ldr	r3, [pc, #8]	; (80829d8 <network_on+0xc>)
 80829d0:	681b      	ldr	r3, [r3, #0]
 80829d2:	695b      	ldr	r3, [r3, #20]
 80829d4:	9301      	str	r3, [sp, #4]
 80829d6:	bd08      	pop	{r3, pc}
 80829d8:	080401c8 	.word	0x080401c8

080829dc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80829dc:	b508      	push	{r3, lr}
 80829de:	4b02      	ldr	r3, [pc, #8]	; (80829e8 <network_off+0xc>)
 80829e0:	681b      	ldr	r3, [r3, #0]
 80829e2:	699b      	ldr	r3, [r3, #24]
 80829e4:	9301      	str	r3, [sp, #4]
 80829e6:	bd08      	pop	{r3, pc}
 80829e8:	080401c8 	.word	0x080401c8

080829ec <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80829ec:	b508      	push	{r3, lr}
 80829ee:	4b02      	ldr	r3, [pc, #8]	; (80829f8 <network_listen+0xc>)
 80829f0:	681b      	ldr	r3, [r3, #0]
 80829f2:	69db      	ldr	r3, [r3, #28]
 80829f4:	9301      	str	r3, [sp, #4]
 80829f6:	bd08      	pop	{r3, pc}
 80829f8:	080401c8 	.word	0x080401c8

080829fc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80829fc:	b508      	push	{r3, lr}
 80829fe:	4b02      	ldr	r3, [pc, #8]	; (8082a08 <network_listening+0xc>)
 8082a00:	681b      	ldr	r3, [r3, #0]
 8082a02:	6a1b      	ldr	r3, [r3, #32]
 8082a04:	9301      	str	r3, [sp, #4]
 8082a06:	bd08      	pop	{r3, pc}
 8082a08:	080401c8 	.word	0x080401c8

08082a0c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8082a0c:	b508      	push	{r3, lr}
 8082a0e:	4b02      	ldr	r3, [pc, #8]	; (8082a18 <network_set_listen_timeout+0xc>)
 8082a10:	681b      	ldr	r3, [r3, #0]
 8082a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082a14:	9301      	str	r3, [sp, #4]
 8082a16:	bd08      	pop	{r3, pc}
 8082a18:	080401c8 	.word	0x080401c8

08082a1c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8082a1c:	b508      	push	{r3, lr}
 8082a1e:	4b02      	ldr	r3, [pc, #8]	; (8082a28 <network_get_listen_timeout+0xc>)
 8082a20:	681b      	ldr	r3, [r3, #0]
 8082a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8082a24:	9301      	str	r3, [sp, #4]
 8082a26:	bd08      	pop	{r3, pc}
 8082a28:	080401c8 	.word	0x080401c8

08082a2c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8082a2c:	b508      	push	{r3, lr}
 8082a2e:	4b02      	ldr	r3, [pc, #8]	; (8082a38 <malloc+0xc>)
 8082a30:	681b      	ldr	r3, [r3, #0]
 8082a32:	681b      	ldr	r3, [r3, #0]
 8082a34:	9301      	str	r3, [sp, #4]
 8082a36:	bd08      	pop	{r3, pc}
 8082a38:	080401a0 	.word	0x080401a0

08082a3c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8082a3c:	b508      	push	{r3, lr}
 8082a3e:	4b02      	ldr	r3, [pc, #8]	; (8082a48 <free+0xc>)
 8082a40:	681b      	ldr	r3, [r3, #0]
 8082a42:	685b      	ldr	r3, [r3, #4]
 8082a44:	9301      	str	r3, [sp, #4]
 8082a46:	bd08      	pop	{r3, pc}
 8082a48:	080401a0 	.word	0x080401a0

08082a4c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8082a4c:	b508      	push	{r3, lr}
 8082a4e:	4b02      	ldr	r3, [pc, #8]	; (8082a58 <realloc+0xc>)
 8082a50:	681b      	ldr	r3, [r3, #0]
 8082a52:	689b      	ldr	r3, [r3, #8]
 8082a54:	9301      	str	r3, [sp, #4]
 8082a56:	bd08      	pop	{r3, pc}
 8082a58:	080401a0 	.word	0x080401a0

08082a5c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8082a5c:	b508      	push	{r3, lr}
 8082a5e:	4b02      	ldr	r3, [pc, #8]	; (8082a68 <siprintf+0xc>)
 8082a60:	681b      	ldr	r3, [r3, #0]
 8082a62:	691b      	ldr	r3, [r3, #16]
 8082a64:	9301      	str	r3, [sp, #4]
 8082a66:	bd08      	pop	{r3, pc}
 8082a68:	080401a0 	.word	0x080401a0

08082a6c <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 8082a6c:	b508      	push	{r3, lr}
 8082a6e:	4b02      	ldr	r3, [pc, #8]	; (8082a78 <siscanf+0xc>)
 8082a70:	681b      	ldr	r3, [r3, #0]
 8082a72:	699b      	ldr	r3, [r3, #24]
 8082a74:	9301      	str	r3, [sp, #4]
 8082a76:	bd08      	pop	{r3, pc}
 8082a78:	080401a0 	.word	0x080401a0

08082a7c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8082a7c:	b508      	push	{r3, lr}
 8082a7e:	4b02      	ldr	r3, [pc, #8]	; (8082a88 <snprintf+0xc>)
 8082a80:	681b      	ldr	r3, [r3, #0]
 8082a82:	69db      	ldr	r3, [r3, #28]
 8082a84:	9301      	str	r3, [sp, #4]
 8082a86:	bd08      	pop	{r3, pc}
 8082a88:	080401a0 	.word	0x080401a0

08082a8c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8082a8c:	b508      	push	{r3, lr}
 8082a8e:	4b02      	ldr	r3, [pc, #8]	; (8082a98 <abort+0xc>)
 8082a90:	681b      	ldr	r3, [r3, #0]
 8082a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082a94:	9301      	str	r3, [sp, #4]
 8082a96:	bd08      	pop	{r3, pc}
 8082a98:	080401a0 	.word	0x080401a0

08082a9c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8082a9c:	b508      	push	{r3, lr}
 8082a9e:	4b02      	ldr	r3, [pc, #8]	; (8082aa8 <_malloc_r+0xc>)
 8082aa0:	681b      	ldr	r3, [r3, #0]
 8082aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082aa4:	9301      	str	r3, [sp, #4]
 8082aa6:	bd08      	pop	{r3, pc}
 8082aa8:	080401a0 	.word	0x080401a0

08082aac <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8082aac:	2100      	movs	r1, #0
 8082aae:	f7ff beb5 	b.w	808281c <system_delay_ms>

08082ab2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8082ab2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082ab4:	6883      	ldr	r3, [r0, #8]
 8082ab6:	4604      	mov	r4, r0
 8082ab8:	b90b      	cbnz	r3, 8082abe <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8082aba:	f001 fd64 	bl	8084586 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082abe:	68c3      	ldr	r3, [r0, #12]
 8082ac0:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8082ac2:	68a3      	ldr	r3, [r4, #8]
 8082ac4:	b11b      	cbz	r3, 8082ace <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8082ac6:	2203      	movs	r2, #3
 8082ac8:	4621      	mov	r1, r4
 8082aca:	4620      	mov	r0, r4
 8082acc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8082ace:	4620      	mov	r0, r4
}
 8082ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8082ad4:	2110      	movs	r1, #16
 8082ad6:	f001 bd3a 	b.w	808454e <_ZdlPvj>

08082ada <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8082ada:	2200      	movs	r2, #0
 8082adc:	4611      	mov	r1, r2
 8082ade:	6840      	ldr	r0, [r0, #4]
 8082ae0:	f7ff bf6c 	b.w	80829bc <network_ready>

08082ae4 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8082ae4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8082ae8:	2600      	movs	r6, #0
 8082aea:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8082aec:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082aee:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8082af0:	4688      	mov	r8, r1
 8082af2:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8082af4:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082af8:	f002 ff95 	bl	8085a26 <strlen>
 8082afc:	9600      	str	r6, [sp, #0]
 8082afe:	b281      	uxth	r1, r0
 8082b00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8082b04:	4622      	mov	r2, r4
 8082b06:	4638      	mov	r0, r7
 8082b08:	f7ff fc7e 	bl	8082408 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082b0c:	b120      	cbz	r0, 8082b18 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8082b0e:	4631      	mov	r1, r6
 8082b10:	4628      	mov	r0, r5
 8082b12:	f000 fd55 	bl	80835c0 <_ZN9IPAddressC1Em>
 8082b16:	e003      	b.n	8082b20 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8082b18:	4621      	mov	r1, r4
 8082b1a:	4628      	mov	r0, r5
 8082b1c:	f000 fd48 	bl	80835b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8082b20:	4628      	mov	r0, r5
 8082b22:	b004      	add	sp, #16
 8082b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082b28 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8082b28:	2200      	movs	r2, #0
 8082b2a:	4611      	mov	r1, r2
 8082b2c:	6840      	ldr	r0, [r0, #4]
 8082b2e:	f7ff bf65 	b.w	80829fc <network_listening>

08082b32 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8082b32:	2200      	movs	r2, #0
 8082b34:	4611      	mov	r1, r2
 8082b36:	6840      	ldr	r0, [r0, #4]
 8082b38:	f7ff bf70 	b.w	8082a1c <network_get_listen_timeout>

08082b3c <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8082b3c:	2200      	movs	r2, #0
 8082b3e:	6840      	ldr	r0, [r0, #4]
 8082b40:	f7ff bf64 	b.w	8082a0c <network_set_listen_timeout>

08082b44 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 8082b44:	2200      	movs	r2, #0
 8082b46:	f081 0101 	eor.w	r1, r1, #1
 8082b4a:	6840      	ldr	r0, [r0, #4]
 8082b4c:	f7ff bf4e 	b.w	80829ec <network_listen>

08082b50 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8082b50:	2300      	movs	r3, #0
 8082b52:	461a      	mov	r2, r3
 8082b54:	4619      	mov	r1, r3
 8082b56:	6840      	ldr	r0, [r0, #4]
 8082b58:	f7ff bf40 	b.w	80829dc <network_off>

08082b5c <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8082b5c:	2300      	movs	r3, #0
 8082b5e:	461a      	mov	r2, r3
 8082b60:	4619      	mov	r1, r3
 8082b62:	6840      	ldr	r0, [r0, #4]
 8082b64:	f7ff bf32 	b.w	80829cc <network_on>

08082b68 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8082b68:	2200      	movs	r2, #0
 8082b6a:	4611      	mov	r1, r2
 8082b6c:	6840      	ldr	r0, [r0, #4]
 8082b6e:	f7ff bf15 	b.w	808299c <network_connecting>

08082b72 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8082b72:	2200      	movs	r2, #0
 8082b74:	2102      	movs	r1, #2
 8082b76:	6840      	ldr	r0, [r0, #4]
 8082b78:	f7ff bf18 	b.w	80829ac <network_disconnect>

08082b7c <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8082b7c:	2300      	movs	r3, #0
 8082b7e:	461a      	mov	r2, r3
 8082b80:	6840      	ldr	r0, [r0, #4]
 8082b82:	f7ff bf03 	b.w	808298c <network_connect>
	...

08082b88 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8082b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082b8a:	460f      	mov	r7, r1
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
 8082b8c:	4b1a      	ldr	r3, [pc, #104]	; (8082bf8 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 8082b8e:	2500      	movs	r5, #0
 8082b90:	6003      	str	r3, [r0, #0]
 8082b92:	2618      	movs	r6, #24
 8082b94:	3328      	adds	r3, #40	; 0x28
 8082b96:	b089      	sub	sp, #36	; 0x24
 8082b98:	6043      	str	r3, [r0, #4]
 8082b9a:	6085      	str	r5, [r0, #8]
 8082b9c:	60c5      	str	r5, [r0, #12]
 8082b9e:	4632      	mov	r2, r6
 8082ba0:	4629      	mov	r1, r5
 8082ba2:	4604      	mov	r4, r0
 8082ba4:	3010      	adds	r0, #16
 8082ba6:	f002 fee1 	bl	808596c <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 8082baa:	462a      	mov	r2, r5
 8082bac:	4629      	mov	r1, r5
 8082bae:	6878      	ldr	r0, [r7, #4]
 8082bb0:	f7ff ff04 	bl	80829bc <network_ready>
 8082bb4:	b908      	cbnz	r0, 8082bba <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
 8082bb6:	60a0      	str	r0, [r4, #8]
            return sig;
 8082bb8:	e01b      	b.n	8082bf2 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
 8082bba:	4629      	mov	r1, r5
 8082bbc:	4632      	mov	r2, r6
 8082bbe:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
 8082bc0:	9500      	str	r5, [sp, #0]
 8082bc2:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
 8082bc4:	f002 fed2 	bl	808596c <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8082bc8:	a902      	add	r1, sp, #8
 8082bca:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
 8082bcc:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8082bd0:	f7ff fc22 	bl	8082418 <cellular_signal>
 8082bd4:	b110      	cbz	r0, 8082bdc <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
 8082bd6:	2301      	movs	r3, #1
 8082bd8:	60a3      	str	r3, [r4, #8]
            return sig;
 8082bda:	e00a      	b.n	8082bf2 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
 8082bdc:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 8082bde:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
 8082be0:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 8082be2:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 8082be4:	b90b      	cbnz	r3, 8082bea <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
 8082be6:	2302      	movs	r3, #2
 8082be8:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
 8082bea:	a902      	add	r1, sp, #8
 8082bec:	4620      	mov	r0, r4
 8082bee:	f000 f87d 	bl	8082cec <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 8082bf2:	4620      	mov	r0, r4
 8082bf4:	b009      	add	sp, #36	; 0x24
 8082bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082bf8:	080869a8 	.word	0x080869a8

08082bfc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8082bfc:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8082bfe:	4c08      	ldr	r4, [pc, #32]	; (8082c20 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8082c00:	2528      	movs	r5, #40	; 0x28
 8082c02:	462a      	mov	r2, r5
 8082c04:	2100      	movs	r1, #0
 8082c06:	4620      	mov	r0, r4
 8082c08:	f002 feb0 	bl	808596c <memset>
        cid = -1;
 8082c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8082c10:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8082c12:	4b04      	ldr	r3, [pc, #16]	; (8082c24 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 8082c14:	2204      	movs	r2, #4
 8082c16:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8082c18:	4a03      	ldr	r2, [pc, #12]	; (8082c28 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 8082c1a:	8025      	strh	r5, [r4, #0]
 8082c1c:	601a      	str	r2, [r3, #0]
 8082c1e:	bd38      	pop	{r3, r4, r5, pc}
 8082c20:	2000029c 	.word	0x2000029c
 8082c24:	20000294 	.word	0x20000294
 8082c28:	08086974 	.word	0x08086974

08082c2c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8082c2c:	4770      	bx	lr

08082c2e <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 8082c2e:	7d00      	ldrb	r0, [r0, #20]
 8082c30:	4770      	bx	lr
	...

08082c34 <_ZNK14CellularSignal16getStrengthValueEv>:

    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
 8082c34:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 8082c36:	7d03      	ldrb	r3, [r0, #20]
 8082c38:	b11b      	cbz	r3, 8082c42 <_ZNK14CellularSignal16getStrengthValueEv+0xe>
 8082c3a:	6980      	ldr	r0, [r0, #24]
 8082c3c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8082c40:	d101      	bne.n	8082c46 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
 8082c42:	2000      	movs	r0, #0
 8082c44:	bd08      	pop	{r3, pc}
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
 8082c46:	f002 fae5 	bl	8085214 <__aeabi_i2f>
 8082c4a:	4902      	ldr	r1, [pc, #8]	; (8082c54 <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 8082c4c:	f002 fbea 	bl	8085424 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8082c50:	bd08      	pop	{r3, pc}
 8082c52:	bf00      	nop
 8082c54:	42c80000 	.word	0x42c80000

08082c58 <_ZNK14CellularSignal15getQualityValueEv>:

    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
 8082c58:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 8082c5a:	7d03      	ldrb	r3, [r0, #20]
 8082c5c:	b11b      	cbz	r3, 8082c66 <_ZNK14CellularSignal15getQualityValueEv+0xe>
 8082c5e:	6a00      	ldr	r0, [r0, #32]
 8082c60:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8082c64:	d101      	bne.n	8082c6a <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
 8082c66:	2000      	movs	r0, #0
 8082c68:	bd08      	pop	{r3, pc}
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
 8082c6a:	f002 fad3 	bl	8085214 <__aeabi_i2f>
 8082c6e:	4902      	ldr	r1, [pc, #8]	; (8082c78 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8082c70:	f002 fbd8 	bl	8085424 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8082c74:	bd08      	pop	{r3, pc}
 8082c76:	bf00      	nop
 8082c78:	42c80000 	.word	0x42c80000

08082c7c <_ZN14CellularSignalD0Ev>:
 8082c7c:	b510      	push	{r4, lr}
 8082c7e:	4604      	mov	r4, r0
 8082c80:	2128      	movs	r1, #40	; 0x28
 8082c82:	f001 fc64 	bl	808454e <_ZdlPvj>
 8082c86:	4620      	mov	r0, r4
 8082c88:	bd10      	pop	{r4, pc}
	...

08082c8c <_ZNK14CellularSignal10getQualityEv>:

    return 0.0f;
}

float CellularSignal::getQuality() const
{
 8082c8c:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 8082c8e:	7d03      	ldrb	r3, [r0, #20]
 8082c90:	b15b      	cbz	r3, 8082caa <_ZNK14CellularSignal10getQualityEv+0x1e>
 8082c92:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8082c94:	2800      	cmp	r0, #0
 8082c96:	db08      	blt.n	8082caa <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 8082c98:	f002 fabc 	bl	8085214 <__aeabi_i2f>
 8082c9c:	4904      	ldr	r1, [pc, #16]	; (8082cb0 <_ZNK14CellularSignal10getQualityEv+0x24>)
 8082c9e:	f002 fbc1 	bl	8085424 <__aeabi_fdiv>
 8082ca2:	4904      	ldr	r1, [pc, #16]	; (8082cb4 <_ZNK14CellularSignal10getQualityEv+0x28>)
 8082ca4:	f002 fb0a 	bl	80852bc <__aeabi_fmul>
 8082ca8:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8082caa:	4803      	ldr	r0, [pc, #12]	; (8082cb8 <_ZNK14CellularSignal10getQualityEv+0x2c>)
}
 8082cac:	bd08      	pop	{r3, pc}
 8082cae:	bf00      	nop
 8082cb0:	477fff00 	.word	0x477fff00
 8082cb4:	42c80000 	.word	0x42c80000
 8082cb8:	bf800000 	.word	0xbf800000

08082cbc <_ZNK14CellularSignal11getStrengthEv>:
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
 8082cbc:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 8082cbe:	7d03      	ldrb	r3, [r0, #20]
 8082cc0:	b15b      	cbz	r3, 8082cda <_ZNK14CellularSignal11getStrengthEv+0x1e>
 8082cc2:	69c0      	ldr	r0, [r0, #28]
 8082cc4:	2800      	cmp	r0, #0
 8082cc6:	db08      	blt.n	8082cda <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 8082cc8:	f002 faa4 	bl	8085214 <__aeabi_i2f>
 8082ccc:	4904      	ldr	r1, [pc, #16]	; (8082ce0 <_ZNK14CellularSignal11getStrengthEv+0x24>)
 8082cce:	f002 fba9 	bl	8085424 <__aeabi_fdiv>
 8082cd2:	4904      	ldr	r1, [pc, #16]	; (8082ce4 <_ZNK14CellularSignal11getStrengthEv+0x28>)
 8082cd4:	f002 faf2 	bl	80852bc <__aeabi_fmul>
 8082cd8:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8082cda:	4803      	ldr	r0, [pc, #12]	; (8082ce8 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
}
 8082cdc:	bd08      	pop	{r3, pc}
 8082cde:	bf00      	nop
 8082ce0:	477fff00 	.word	0x477fff00
 8082ce4:	42c80000 	.word	0x42c80000
 8082ce8:	bf800000 	.word	0xbf800000

08082cec <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
 8082cec:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 8082cee:	460d      	mov	r5, r1
 8082cf0:	f100 0410 	add.w	r4, r0, #16
 8082cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8082cf8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8082cfc:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
 8082d00:	2001      	movs	r0, #1
 8082d02:	bd30      	pop	{r4, r5, pc}

08082d04 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
 8082d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082d08:	4607      	mov	r7, r0
 8082d0a:	460c      	mov	r4, r1
{
    if (base == 0) {
 8082d0c:	4615      	mov	r5, r2
 8082d0e:	b92a      	cbnz	r2, 8082d1c <_ZN5Print5printIiLi0EEEjT_i+0x18>
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
 8082d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
 8082d14:	6803      	ldr	r3, [r0, #0]
 8082d16:	b2c9      	uxtb	r1, r1
 8082d18:	689b      	ldr	r3, [r3, #8]
 8082d1a:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 8082d1c:	2900      	cmp	r1, #0
 8082d1e:	da07      	bge.n	8082d30 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
 8082d20:	2a0a      	cmp	r2, #10
 8082d22:	d105      	bne.n	8082d30 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
 8082d24:	212d      	movs	r1, #45	; 0x2d
 8082d26:	f000 fd9f 	bl	8083868 <_ZN5Print5printEc>
            val = -n;
 8082d2a:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 8082d2c:	4606      	mov	r6, r0
            val = -n;
 8082d2e:	e001      	b.n	8082d34 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
 8082d30:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 8082d32:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8082d34:	b2ea      	uxtb	r2, r5
 8082d36:	4638      	mov	r0, r7
 8082d38:	f000 fdaf 	bl	808389a <_ZN5Print11printNumberEmh>
    }
}
 8082d3c:	4430      	add	r0, r6
 8082d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082d42 <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
 8082d42:	b570      	push	{r4, r5, r6, lr}
 8082d44:	460d      	mov	r5, r1
 8082d46:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8082d48:	220a      	movs	r2, #10
 8082d4a:	6881      	ldr	r1, [r0, #8]
 8082d4c:	4628      	mov	r0, r5
 8082d4e:	f7ff ffd9 	bl	8082d04 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
 8082d52:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8082d54:	4604      	mov	r4, r0
    n += p.print(',');
 8082d56:	4628      	mov	r0, r5
 8082d58:	f000 fd86 	bl	8083868 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
 8082d5c:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 8082d5e:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
 8082d60:	68f1      	ldr	r1, [r6, #12]
 8082d62:	4628      	mov	r0, r5
 8082d64:	f7ff ffce 	bl	8082d04 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
 8082d68:	4420      	add	r0, r4
 8082d6a:	bd70      	pop	{r4, r5, r6, pc}

08082d6c <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 8082d6c:	f1a0 0004 	sub.w	r0, r0, #4
 8082d70:	f7ff bfe7 	b.w	8082d42 <_ZNK14CellularSignal7printToER5Print>

08082d74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8082d74:	4770      	bx	lr

08082d76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8082d76:	2000      	movs	r0, #0
 8082d78:	4770      	bx	lr

08082d7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8082d7a:	b510      	push	{r4, lr}
 8082d7c:	4604      	mov	r4, r0
 8082d7e:	2110      	movs	r1, #16
 8082d80:	f001 fbe5 	bl	808454e <_ZdlPvj>
 8082d84:	4620      	mov	r0, r4
 8082d86:	bd10      	pop	{r4, pc}

08082d88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8082d88:	b508      	push	{r3, lr}
      { delete this; }
 8082d8a:	b108      	cbz	r0, 8082d90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8082d8c:	f7ff fff5 	bl	8082d7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8082d90:	bd08      	pop	{r3, pc}

08082d92 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8082d92:	2200      	movs	r2, #0
 8082d94:	6002      	str	r2, [r0, #0]
 8082d96:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8082d9a:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8082d9c:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082d9e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8082da2:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8082da4:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082da6:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8082da8:	680c      	ldr	r4, [r1, #0]
 8082daa:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8082dac:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8082dae:	bd10      	pop	{r4, pc}

08082db0 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8082db0:	b510      	push	{r4, lr}
 8082db2:	4604      	mov	r4, r0
    free((void*)msg_);
 8082db4:	6800      	ldr	r0, [r0, #0]
 8082db6:	f7ff fe41 	bl	8082a3c <free>
}
 8082dba:	4620      	mov	r0, r4
 8082dbc:	bd10      	pop	{r4, pc}

08082dbe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8082dbe:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8082dc0:	68c4      	ldr	r4, [r0, #12]
 8082dc2:	b1f4      	cbz	r4, 8082e02 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
 8082dc4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8082dc6:	2b02      	cmp	r3, #2
 8082dc8:	d103      	bne.n	8082dd2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8082dca:	f104 000c 	add.w	r0, r4, #12
 8082dce:	f7ff ffef 	bl	8082db0 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8082dd2:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8082dd4:	b135      	cbz	r5, 8082de4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082dd6:	4628      	mov	r0, r5
 8082dd8:	f7ff f84c 	bl	8081e74 <_ZNSt14_Function_baseD1Ev>
 8082ddc:	2110      	movs	r1, #16
 8082dde:	4628      	mov	r0, r5
 8082de0:	f001 fbb5 	bl	808454e <_ZdlPvj>
 8082de4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8082de6:	b135      	cbz	r5, 8082df6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8082de8:	4628      	mov	r0, r5
 8082dea:	f7ff f843 	bl	8081e74 <_ZNSt14_Function_baseD1Ev>
 8082dee:	2110      	movs	r1, #16
 8082df0:	4628      	mov	r0, r5
 8082df2:	f001 fbac 	bl	808454e <_ZdlPvj>
 8082df6:	4620      	mov	r0, r4
 8082df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8082dfc:	2114      	movs	r1, #20
 8082dfe:	f001 bba6 	b.w	808454e <_ZdlPvj>
 8082e02:	bd38      	pop	{r3, r4, r5, pc}

08082e04 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8082e04:	b510      	push	{r4, lr}
 8082e06:	b088      	sub	sp, #32
 8082e08:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8082e0a:	4668      	mov	r0, sp
 8082e0c:	f000 fdd1 	bl	80839b2 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 8082e10:	4669      	mov	r1, sp
 8082e12:	a804      	add	r0, sp, #16
 8082e14:	f000 fdef 	bl	80839f6 <_ZN6StringC1ERKS_>
 8082e18:	a804      	add	r0, sp, #16
 8082e1a:	47a0      	blx	r4
 8082e1c:	4604      	mov	r4, r0
 8082e1e:	a804      	add	r0, sp, #16
 8082e20:	f000 fd80 	bl	8083924 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8082e24:	4668      	mov	r0, sp
 8082e26:	f000 fd7d 	bl	8083924 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 8082e2a:	4620      	mov	r0, r4
 8082e2c:	b008      	add	sp, #32
 8082e2e:	bd10      	pop	{r4, pc}

08082e30 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8082e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082e32:	4607      	mov	r7, r0
 8082e34:	460e      	mov	r6, r1
 8082e36:	4615      	mov	r5, r2
 8082e38:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8082e3a:	2410      	movs	r4, #16
 8082e3c:	4622      	mov	r2, r4
 8082e3e:	2100      	movs	r1, #0
 8082e40:	4668      	mov	r0, sp
 8082e42:	f002 fd93 	bl	808596c <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8082e46:	2200      	movs	r2, #0
 8082e48:	4669      	mov	r1, sp
 8082e4a:	4610      	mov	r0, r2
         size = sizeof(*this);
 8082e4c:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 8082e50:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 8082e52:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 8082e54:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8082e56:	f7ff fd41 	bl	80828dc <spark_function>
}
 8082e5a:	b005      	add	sp, #20
 8082e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082e5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8082e5e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8082e60:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8082e62:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 8082e64:	b17c      	cbz	r4, 8082e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8082e66:	6863      	ldr	r3, [r4, #4]
 8082e68:	3b01      	subs	r3, #1
 8082e6a:	6063      	str	r3, [r4, #4]
 8082e6c:	b95b      	cbnz	r3, 8082e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8082e6e:	6823      	ldr	r3, [r4, #0]
 8082e70:	4620      	mov	r0, r4
 8082e72:	689b      	ldr	r3, [r3, #8]
 8082e74:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8082e76:	68a3      	ldr	r3, [r4, #8]
 8082e78:	3b01      	subs	r3, #1
 8082e7a:	60a3      	str	r3, [r4, #8]
 8082e7c:	b91b      	cbnz	r3, 8082e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8082e7e:	6823      	ldr	r3, [r4, #0]
 8082e80:	4620      	mov	r0, r4
 8082e82:	68db      	ldr	r3, [r3, #12]
 8082e84:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8082e86:	4628      	mov	r0, r5
 8082e88:	bd38      	pop	{r3, r4, r5, pc}

08082e8a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8082e8a:	b513      	push	{r0, r1, r4, lr}
 8082e8c:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8082e8e:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8082e92:	2300      	movs	r3, #0
 8082e94:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8082e96:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8082e98:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8082e9a:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082e9c:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8082e9e:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8082ea0:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082ea2:	f7ff ffdc 	bl	8082e5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082ea6:	4620      	mov	r0, r4
 8082ea8:	b002      	add	sp, #8
 8082eaa:	bd10      	pop	{r4, pc}

08082eac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8082eac:	680b      	ldr	r3, [r1, #0]
 8082eae:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8082eb0:	b113      	cbz	r3, 8082eb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8082eb2:	685a      	ldr	r2, [r3, #4]
 8082eb4:	3201      	adds	r2, #1
 8082eb6:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8082eb8:	4770      	bx	lr

08082eba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8082eba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082ebc:	460c      	mov	r4, r1
 8082ebe:	4606      	mov	r6, r0
 8082ec0:	460f      	mov	r7, r1
 8082ec2:	f854 3b04 	ldr.w	r3, [r4], #4
 8082ec6:	ad02      	add	r5, sp, #8
 8082ec8:	f845 3d08 	str.w	r3, [r5, #-8]!
 8082ecc:	4621      	mov	r1, r4
 8082ece:	a801      	add	r0, sp, #4
 8082ed0:	f7ff ffec 	bl	8082eac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8082ed4:	4629      	mov	r1, r5
 8082ed6:	4630      	mov	r0, r6
 8082ed8:	f7ff ffd7 	bl	8082e8a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082edc:	a801      	add	r0, sp, #4
 8082ede:	f7ff ffbe 	bl	8082e5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082ee2:	4620      	mov	r0, r4
 8082ee4:	f7ff ffbb 	bl	8082e5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8082ee8:	4638      	mov	r0, r7
 8082eea:	2108      	movs	r1, #8
 8082eec:	f001 fb2f 	bl	808454e <_ZdlPvj>
        return p;
    }
 8082ef0:	4630      	mov	r0, r6
 8082ef2:	b003      	add	sp, #12
 8082ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082ef6 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8082ef6:	b513      	push	{r0, r1, r4, lr}
 8082ef8:	460b      	mov	r3, r1
 8082efa:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082efc:	c803      	ldmia	r0, {r0, r1}
 8082efe:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8082f02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8082f06:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8082f0a:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8082f0e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8082f12:	b002      	add	sp, #8
 8082f14:	bd10      	pop	{r4, pc}
	...

08082f18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8082f18:	b538      	push	{r3, r4, r5, lr}
 8082f1a:	2300      	movs	r3, #0
 8082f1c:	4604      	mov	r4, r0
 8082f1e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082f20:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8082f22:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082f24:	f7fd f8bb 	bl	808009e <_Znwj>
 8082f28:	b128      	cbz	r0, 8082f36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8082f2a:	2301      	movs	r3, #1
 8082f2c:	6043      	str	r3, [r0, #4]
 8082f2e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8082f30:	4b02      	ldr	r3, [pc, #8]	; (8082f3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8082f32:	60c5      	str	r5, [r0, #12]
 8082f34:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082f36:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 8082f38:	4620      	mov	r0, r4
 8082f3a:	bd38      	pop	{r3, r4, r5, pc}
 8082f3c:	080869dc 	.word	0x080869dc

08082f40 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082f40:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8082f42:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082f44:	b90a      	cbnz	r2, 8082f4a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8082f46:	f001 fb1e 	bl	8084586 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082f4a:	68c3      	ldr	r3, [r0, #12]
    }
 8082f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082f50:	4718      	bx	r3

08082f52 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082f52:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082f54:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8082f56:	f100 0110 	add.w	r1, r0, #16
 8082f5a:	f7ff fff1 	bl	8082f40 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8082f5e:	bd08      	pop	{r3, pc}

08082f60 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082f60:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8082f62:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082f64:	b90a      	cbnz	r2, 8082f6a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8082f66:	f001 fb0e 	bl	8084586 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082f6a:	68c3      	ldr	r3, [r0, #12]
    }
 8082f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082f70:	4718      	bx	r3

08082f72 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082f72:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082f74:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8082f76:	f100 0110 	add.w	r1, r0, #16
 8082f7a:	f7ff fff1 	bl	8082f60 <_ZNKSt8functionIFvRKbEEclES1_>
 8082f7e:	bd08      	pop	{r3, pc}

08082f80 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082f80:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082f82:	2300      	movs	r3, #0
 8082f84:	6083      	str	r3, [r0, #8]
 8082f86:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082f88:	4604      	mov	r4, r0
 8082f8a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8082f8c:	b12b      	cbz	r3, 8082f9a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082f8e:	2202      	movs	r2, #2
 8082f90:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082f92:	68eb      	ldr	r3, [r5, #12]
 8082f94:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082f96:	68ab      	ldr	r3, [r5, #8]
 8082f98:	60a3      	str	r3, [r4, #8]
	}
    }
 8082f9a:	4620      	mov	r0, r4
 8082f9c:	bd38      	pop	{r3, r4, r5, pc}
	...

08082fa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8082fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082fa2:	b089      	sub	sp, #36	; 0x24
 8082fa4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8082fa6:	4668      	mov	r0, sp
 8082fa8:	f7ff fef3 	bl	8082d92 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8082fac:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8082fb0:	2300      	movs	r3, #0
 8082fb2:	f88d 3008 	strb.w	r3, [sp, #8]
 8082fb6:	e8d4 3f4f 	ldrexb	r3, [r4]
 8082fba:	2b00      	cmp	r3, #0
 8082fbc:	d103      	bne.n	8082fc6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 8082fbe:	e8c4 2f41 	strexb	r1, r2, [r4]
 8082fc2:	2900      	cmp	r1, #0
 8082fc4:	d1f7      	bne.n	8082fb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 8082fc6:	d002      	beq.n	8082fce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 8082fc8:	f88d 3008 	strb.w	r3, [sp, #8]
 8082fcc:	e063      	b.n	8083096 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8082fce:	f114 050c 	adds.w	r5, r4, #12
 8082fd2:	d003      	beq.n	8082fdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8082fd4:	4669      	mov	r1, sp
 8082fd6:	4628      	mov	r0, r5
 8082fd8:	f7ff fedb 	bl	8082d92 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8082fdc:	f3bf 8f5f 	dmb	sy
 8082fe0:	2301      	movs	r3, #1
 8082fe2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8082fe4:	f3bf 8f5f 	dmb	sy
 8082fe8:	f104 0308 	add.w	r3, r4, #8
 8082fec:	2000      	movs	r0, #0
 8082fee:	e853 6f00 	ldrex	r6, [r3]
 8082ff2:	e843 0200 	strex	r2, r0, [r3]
 8082ff6:	2a00      	cmp	r2, #0
 8082ff8:	d1f9      	bne.n	8082fee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 8082ffa:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8082ffe:	2e00      	cmp	r6, #0
 8083000:	d049      	beq.n	8083096 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8083002:	f7ff fc23 	bl	808284c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8083006:	b120      	cbz	r0, 8083012 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8083008:	4629      	mov	r1, r5
 808300a:	4630      	mov	r0, r6
 808300c:	f7ff ff98 	bl	8082f40 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8083010:	e03a      	b.n	8083088 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8083012:	4631      	mov	r1, r6
 8083014:	a802      	add	r0, sp, #8
 8083016:	f7ff ffb3 	bl	8082f80 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 808301a:	68e0      	ldr	r0, [r4, #12]
 808301c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8083020:	b108      	cbz	r0, 8083026 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 8083022:	f002 fce5 	bl	80859f0 <strdup>
 8083026:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8083028:	2010      	movs	r0, #16
 808302a:	f8ad 501c 	strh.w	r5, [sp, #28]
 808302e:	f7fd f836 	bl	808009e <_Znwj>
 8083032:	4605      	mov	r5, r0
 8083034:	b1e8      	cbz	r0, 8083072 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8083036:	2700      	movs	r7, #0
 8083038:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808303a:	2018      	movs	r0, #24
 808303c:	f7fd f82f 	bl	808009e <_Znwj>
 8083040:	4604      	mov	r4, r0
 8083042:	b188      	cbz	r0, 8083068 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8083044:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8083046:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8083048:	a802      	add	r0, sp, #8
 808304a:	f7ff ff54 	bl	8082ef6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808304e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8083050:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8083052:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8083054:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8083056:	9204      	str	r2, [sp, #16]
 8083058:	68e2      	ldr	r2, [r4, #12]
 808305a:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 808305c:	60e3      	str	r3, [r4, #12]
 808305e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8083062:	9205      	str	r2, [sp, #20]
 8083064:	f7ff fe95 	bl	8082d92 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8083068:	4b0d      	ldr	r3, [pc, #52]	; (80830a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808306a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808306c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808306e:	4b0d      	ldr	r3, [pc, #52]	; (80830a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 8083070:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 8083072:	a806      	add	r0, sp, #24
 8083074:	f7ff fe9c 	bl	8082db0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8083078:	a802      	add	r0, sp, #8
 808307a:	f7fe fefb 	bl	8081e74 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808307e:	2200      	movs	r2, #0
 8083080:	4629      	mov	r1, r5
 8083082:	4809      	ldr	r0, [pc, #36]	; (80830a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 8083084:	f7ff fbea 	bl	808285c <application_thread_invoke>
 8083088:	4630      	mov	r0, r6
 808308a:	f7fe fef3 	bl	8081e74 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 808308e:	2110      	movs	r1, #16
 8083090:	4630      	mov	r0, r6
 8083092:	f001 fa5c 	bl	808454e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 8083096:	4668      	mov	r0, sp
 8083098:	f7ff fe8a 	bl	8082db0 <_ZN8particle5ErrorD1Ev>
    }
 808309c:	b009      	add	sp, #36	; 0x24
 808309e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80830a0:	08082f53 	.word	0x08082f53
 80830a4:	080831c9 	.word	0x080831c9
 80830a8:	08082ab3 	.word	0x08082ab3

080830ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80830ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80830b0:	b08b      	sub	sp, #44	; 0x2c
 80830b2:	4606      	mov	r6, r0
 80830b4:	460f      	mov	r7, r1
 80830b6:	4690      	mov	r8, r2
 80830b8:	4699      	mov	r9, r3
 80830ba:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80830be:	f7ff fc2d 	bl	808291c <spark_cloud_flag_connected>
 80830c2:	ad07      	add	r5, sp, #28
    if (!connected()) {
 80830c4:	4683      	mov	fp, r0
 80830c6:	bb30      	cbnz	r0, 8083116 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80830c8:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80830cc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80830ce:	a905      	add	r1, sp, #20
 80830d0:	4628      	mov	r0, r5
 80830d2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80830d6:	f7ff fe5c 	bl	8082d92 <_ZN8particle5ErrorC1EOS0_>
 80830da:	2014      	movs	r0, #20
 80830dc:	f7fc ffdf 	bl	808009e <_Znwj>
 80830e0:	4604      	mov	r4, r0
 80830e2:	b158      	cbz	r0, 80830fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80830e4:	2302      	movs	r3, #2
 80830e6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80830e8:	2301      	movs	r3, #1
 80830ea:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80830ec:	f8c0 b004 	str.w	fp, [r0, #4]
 80830f0:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80830f4:	4629      	mov	r1, r5
 80830f6:	300c      	adds	r0, #12
 80830f8:	f7ff fe4b 	bl	8082d92 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80830fc:	4630      	mov	r0, r6
 80830fe:	4621      	mov	r1, r4
 8083100:	f840 4b04 	str.w	r4, [r0], #4
 8083104:	f7ff ff08 	bl	8082f18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8083108:	4628      	mov	r0, r5
 808310a:	f7ff fe51 	bl	8082db0 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 808310e:	a805      	add	r0, sp, #20
 8083110:	f7ff fe4e 	bl	8082db0 <_ZN8particle5ErrorD1Ev>
 8083114:	e052      	b.n	80831bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8083116:	2400      	movs	r4, #0
 8083118:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 808311a:	2014      	movs	r0, #20
 808311c:	606c      	str	r4, [r5, #4]
 808311e:	60ac      	str	r4, [r5, #8]
 8083120:	9307      	str	r3, [sp, #28]
 8083122:	f7fc ffbc 	bl	808009e <_Znwj>
 8083126:	4601      	mov	r1, r0
 8083128:	b118      	cbz	r0, 8083132 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 808312a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808312c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808312e:	6044      	str	r4, [r0, #4]
 8083130:	6084      	str	r4, [r0, #8]
 8083132:	a804      	add	r0, sp, #16
 8083134:	9103      	str	r1, [sp, #12]
 8083136:	f7ff feef 	bl	8082f18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 808313a:	4b22      	ldr	r3, [pc, #136]	; (80831c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 808313c:	2008      	movs	r0, #8
 808313e:	9308      	str	r3, [sp, #32]
 8083140:	f7fc ffad 	bl	808009e <_Znwj>
 8083144:	4604      	mov	r4, r0
 8083146:	b128      	cbz	r0, 8083154 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8083148:	9b03      	ldr	r3, [sp, #12]
 808314a:	a904      	add	r1, sp, #16
 808314c:	f840 3b04 	str.w	r3, [r0], #4
 8083150:	f7ff feac 	bl	8082eac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8083154:	9500      	str	r5, [sp, #0]
 8083156:	fa5f f38a 	uxtb.w	r3, sl
 808315a:	464a      	mov	r2, r9
 808315c:	4641      	mov	r1, r8
 808315e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8083160:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8083162:	f7ff fbeb 	bl	808293c <spark_send_event>
 8083166:	b920      	cbnz	r0, 8083172 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8083168:	9b03      	ldr	r3, [sp, #12]
 808316a:	785b      	ldrb	r3, [r3, #1]
 808316c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8083170:	b183      	cbz	r3, 8083194 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 8083172:	9b03      	ldr	r3, [sp, #12]
 8083174:	a904      	add	r1, sp, #16
 8083176:	a806      	add	r0, sp, #24
 8083178:	9305      	str	r3, [sp, #20]
 808317a:	f7ff fe97 	bl	8082eac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 808317e:	a905      	add	r1, sp, #20
 8083180:	4630      	mov	r0, r6
 8083182:	f7ff fe82 	bl	8082e8a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8083186:	a806      	add	r0, sp, #24
 8083188:	f7ff fe69 	bl	8082e5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808318c:	a804      	add	r0, sp, #16
 808318e:	f7ff fe66 	bl	8082e5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8083192:	e013      	b.n	80831bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 8083194:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8083198:	a905      	add	r1, sp, #20
 808319a:	a803      	add	r0, sp, #12
 808319c:	9205      	str	r2, [sp, #20]
 808319e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80831a2:	f7ff fefd 	bl	8082fa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80831a6:	a805      	add	r0, sp, #20
 80831a8:	f7ff fe02 	bl	8082db0 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80831ac:	a805      	add	r0, sp, #20
 80831ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80831b0:	f7ff fe83 	bl	8082eba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80831b4:	a806      	add	r0, sp, #24
 80831b6:	f7ff fe52 	bl	8082e5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80831ba:	e7da      	b.n	8083172 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 80831bc:	4630      	mov	r0, r6
 80831be:	b00b      	add	sp, #44	; 0x2c
 80831c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80831c4:	08083339 	.word	0x08083339

080831c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80831c8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80831ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80831cc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80831ce:	d006      	beq.n	80831de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80831d0:	2a03      	cmp	r2, #3
 80831d2:	d017      	beq.n	8083204 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80831d4:	2a01      	cmp	r2, #1
 80831d6:	d122      	bne.n	808321e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80831d8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80831da:	6003      	str	r3, [r0, #0]
	      break;
 80831dc:	e01f      	b.n	808321e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80831de:	2018      	movs	r0, #24
 80831e0:	680e      	ldr	r6, [r1, #0]
 80831e2:	f7fc ff5c 	bl	808009e <_Znwj>
 80831e6:	4605      	mov	r5, r0
 80831e8:	b150      	cbz	r0, 8083200 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80831ea:	4631      	mov	r1, r6
 80831ec:	f7ff fec8 	bl	8082f80 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80831f0:	6930      	ldr	r0, [r6, #16]
 80831f2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80831f6:	b108      	cbz	r0, 80831fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80831f8:	f002 fbfa 	bl	80859f0 <strdup>
 80831fc:	6128      	str	r0, [r5, #16]
 80831fe:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8083200:	6025      	str	r5, [r4, #0]
 8083202:	e00c      	b.n	808321e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8083204:	6804      	ldr	r4, [r0, #0]
 8083206:	b154      	cbz	r4, 808321e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 8083208:	f104 0010 	add.w	r0, r4, #16
 808320c:	f7ff fdd0 	bl	8082db0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8083210:	4620      	mov	r0, r4
 8083212:	f7fe fe2f 	bl	8081e74 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8083216:	2118      	movs	r1, #24
 8083218:	4620      	mov	r0, r4
 808321a:	f001 f998 	bl	808454e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808321e:	2000      	movs	r0, #0
 8083220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08083222 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8083222:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8083224:	2300      	movs	r3, #0
 8083226:	6083      	str	r3, [r0, #8]
 8083228:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808322a:	4604      	mov	r4, r0
 808322c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808322e:	b12b      	cbz	r3, 808323c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8083230:	2202      	movs	r2, #2
 8083232:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8083234:	68eb      	ldr	r3, [r5, #12]
 8083236:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8083238:	68ab      	ldr	r3, [r5, #8]
 808323a:	60a3      	str	r3, [r4, #8]
	}
    }
 808323c:	4620      	mov	r0, r4
 808323e:	bd38      	pop	{r3, r4, r5, pc}

08083240 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8083240:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8083242:	b570      	push	{r4, r5, r6, lr}
 8083244:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8083246:	d006      	beq.n	8083256 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8083248:	2a03      	cmp	r2, #3
 808324a:	d011      	beq.n	8083270 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 808324c:	2a01      	cmp	r2, #1
 808324e:	d118      	bne.n	8083282 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8083250:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8083252:	6003      	str	r3, [r0, #0]
	      break;
 8083254:	e015      	b.n	8083282 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8083256:	2014      	movs	r0, #20
 8083258:	680e      	ldr	r6, [r1, #0]
 808325a:	f7fc ff20 	bl	808009e <_Znwj>
 808325e:	4605      	mov	r5, r0
 8083260:	b120      	cbz	r0, 808326c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8083262:	4631      	mov	r1, r6
 8083264:	f7ff ffdd 	bl	8083222 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8083268:	7c33      	ldrb	r3, [r6, #16]
 808326a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808326c:	6025      	str	r5, [r4, #0]
 808326e:	e008      	b.n	8083282 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8083270:	6804      	ldr	r4, [r0, #0]
 8083272:	b134      	cbz	r4, 8083282 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8083274:	4620      	mov	r0, r4
 8083276:	f7fe fdfd 	bl	8081e74 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808327a:	2114      	movs	r1, #20
 808327c:	4620      	mov	r0, r4
 808327e:	f001 f966 	bl	808454e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8083282:	2000      	movs	r0, #0
 8083284:	bd70      	pop	{r4, r5, r6, pc}
	...

08083288 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8083288:	b5f0      	push	{r4, r5, r6, r7, lr}
 808328a:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 808328c:	f3bf 8f5f 	dmb	sy
 8083290:	b087      	sub	sp, #28
 8083292:	2300      	movs	r3, #0
 8083294:	e850 6f00 	ldrex	r6, [r0]
 8083298:	e840 3200 	strex	r2, r3, [r0]
 808329c:	2a00      	cmp	r2, #0
 808329e:	d1f9      	bne.n	8083294 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80832a0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80832a4:	2e00      	cmp	r6, #0
 80832a6:	d03f      	beq.n	8083328 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80832a8:	4618      	mov	r0, r3
 80832aa:	f7ff facf 	bl	808284c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80832ae:	4607      	mov	r7, r0
 80832b0:	b120      	cbz	r0, 80832bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80832b2:	4621      	mov	r1, r4
 80832b4:	4630      	mov	r0, r6
 80832b6:	f7ff fe53 	bl	8082f60 <_ZNKSt8functionIFvRKbEEclES1_>
 80832ba:	e02e      	b.n	808331a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80832bc:	4631      	mov	r1, r6
 80832be:	a801      	add	r0, sp, #4
 80832c0:	f7ff ffaf 	bl	8083222 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80832c4:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80832c6:	2010      	movs	r0, #16
 80832c8:	f88d 3014 	strb.w	r3, [sp, #20]
 80832cc:	f7fc fee7 	bl	808009e <_Znwj>
 80832d0:	4605      	mov	r5, r0
 80832d2:	b1d0      	cbz	r0, 808330a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80832d4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80832d6:	2014      	movs	r0, #20
 80832d8:	f7fc fee1 	bl	808009e <_Znwj>
 80832dc:	4604      	mov	r4, r0
 80832de:	b178      	cbz	r0, 8083300 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80832e0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80832e2:	4601      	mov	r1, r0
 80832e4:	a801      	add	r0, sp, #4
 80832e6:	f7ff fe06 	bl	8082ef6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80832ea:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80832ec:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80832ee:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80832f0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80832f2:	9203      	str	r2, [sp, #12]
 80832f4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80832f6:	60e3      	str	r3, [r4, #12]
 80832f8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80832fc:	9204      	str	r2, [sp, #16]
 80832fe:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8083300:	4b0a      	ldr	r3, [pc, #40]	; (808332c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8083302:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8083304:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8083306:	4b0a      	ldr	r3, [pc, #40]	; (8083330 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8083308:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808330a:	a801      	add	r0, sp, #4
 808330c:	f7fe fdb2 	bl	8081e74 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8083310:	2200      	movs	r2, #0
 8083312:	4629      	mov	r1, r5
 8083314:	4807      	ldr	r0, [pc, #28]	; (8083334 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8083316:	f7ff faa1 	bl	808285c <application_thread_invoke>
 808331a:	4630      	mov	r0, r6
 808331c:	f7fe fdaa 	bl	8081e74 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8083320:	2110      	movs	r1, #16
 8083322:	4630      	mov	r0, r6
 8083324:	f001 f913 	bl	808454e <_ZdlPvj>
        }
    }
 8083328:	b007      	add	sp, #28
 808332a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808332c:	08082f73 	.word	0x08082f73
 8083330:	08083241 	.word	0x08083241
 8083334:	08082ab3 	.word	0x08082ab3

08083338 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8083338:	b530      	push	{r4, r5, lr}
 808333a:	4604      	mov	r4, r0
 808333c:	b085      	sub	sp, #20
 808333e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8083340:	4668      	mov	r0, sp
 8083342:	4611      	mov	r1, r2
 8083344:	f7ff fdb9 	bl	8082eba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8083348:	b17c      	cbz	r4, 808336a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 808334a:	b224      	sxth	r4, r4
 808334c:	4628      	mov	r0, r5
 808334e:	b10d      	cbz	r5, 8083354 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8083350:	f002 fb4e 	bl	80859f0 <strdup>
 8083354:	9002      	str	r0, [sp, #8]
 8083356:	a902      	add	r1, sp, #8
 8083358:	4668      	mov	r0, sp
 808335a:	f8ad 400c 	strh.w	r4, [sp, #12]
 808335e:	f7ff fe1f 	bl	8082fa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8083362:	a802      	add	r0, sp, #8
 8083364:	f7ff fd24 	bl	8082db0 <_ZN8particle5ErrorD1Ev>
 8083368:	e01d      	b.n	80833a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808336a:	f04f 0201 	mov.w	r2, #1
 808336e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8083370:	f88d 4008 	strb.w	r4, [sp, #8]
 8083374:	e8d0 3f4f 	ldrexb	r3, [r0]
 8083378:	42a3      	cmp	r3, r4
 808337a:	d103      	bne.n	8083384 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 808337c:	e8c0 2f41 	strexb	r1, r2, [r0]
 8083380:	2900      	cmp	r1, #0
 8083382:	d1f7      	bne.n	8083374 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8083384:	d002      	beq.n	808338c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8083386:	f88d 3008 	strb.w	r3, [sp, #8]
 808338a:	e00c      	b.n	80833a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 808338c:	f110 010c 	adds.w	r1, r0, #12
 8083390:	f04f 0301 	mov.w	r3, #1
 8083394:	bf18      	it	ne
 8083396:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8083398:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 808339c:	3004      	adds	r0, #4
 808339e:	f800 3c03 	strb.w	r3, [r0, #-3]
 80833a2:	f7ff ff71 	bl	8083288 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80833a6:	a801      	add	r0, sp, #4
 80833a8:	f7ff fd59 	bl	8082e5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80833ac:	b005      	add	sp, #20
 80833ae:	bd30      	pop	{r4, r5, pc}

080833b0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80833b0:	4770      	bx	lr

080833b2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80833b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80833b4:	4606      	mov	r6, r0
 80833b6:	4615      	mov	r5, r2
 80833b8:	460c      	mov	r4, r1
 80833ba:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80833bc:	42bc      	cmp	r4, r7
 80833be:	d006      	beq.n	80833ce <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80833c0:	6833      	ldr	r3, [r6, #0]
 80833c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80833c6:	689b      	ldr	r3, [r3, #8]
 80833c8:	4630      	mov	r0, r6
 80833ca:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80833cc:	e7f6      	b.n	80833bc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80833ce:	4628      	mov	r0, r5
 80833d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080833d2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80833d2:	2200      	movs	r2, #0
 80833d4:	7c00      	ldrb	r0, [r0, #16]
 80833d6:	f7ff b91f 	b.w	8082618 <HAL_I2C_Write_Data>

080833da <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80833da:	2100      	movs	r1, #0
 80833dc:	7c00      	ldrb	r0, [r0, #16]
 80833de:	f7ff b923 	b.w	8082628 <HAL_I2C_Available_Data>

080833e2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80833e2:	2100      	movs	r1, #0
 80833e4:	7c00      	ldrb	r0, [r0, #16]
 80833e6:	f7ff b927 	b.w	8082638 <HAL_I2C_Read_Data>

080833ea <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80833ea:	2100      	movs	r1, #0
 80833ec:	7c00      	ldrb	r0, [r0, #16]
 80833ee:	f7ff b92b 	b.w	8082648 <HAL_I2C_Peek_Data>

080833f2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80833f2:	2100      	movs	r1, #0
 80833f4:	7c00      	ldrb	r0, [r0, #16]
 80833f6:	f7ff b92f 	b.w	8082658 <HAL_I2C_Flush_Data>

080833fa <_ZN7TwoWireD0Ev>:
 80833fa:	b510      	push	{r4, lr}
 80833fc:	4604      	mov	r4, r0
 80833fe:	2114      	movs	r1, #20
 8083400:	f001 f8a5 	bl	808454e <_ZdlPvj>
 8083404:	4620      	mov	r0, r4
 8083406:	bd10      	pop	{r4, pc}

08083408 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 8083408:	b510      	push	{r4, lr}
 808340a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 808340c:	2300      	movs	r3, #0
 808340e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8083410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8083414:	60a3      	str	r3, [r4, #8]
 8083416:	4b04      	ldr	r3, [pc, #16]	; (8083428 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 8083418:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 808341a:	4608      	mov	r0, r1
 808341c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 808341e:	4611      	mov	r1, r2
 8083420:	f7ff f92a 	bl	8082678 <HAL_I2C_Init>
}
 8083424:	4620      	mov	r0, r4
 8083426:	bd10      	pop	{r4, pc}
 8083428:	080869f8 	.word	0x080869f8

0808342c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808342c:	2300      	movs	r3, #0
 808342e:	461a      	mov	r2, r3
 8083430:	4619      	mov	r1, r3
 8083432:	7c00      	ldrb	r0, [r0, #16]
 8083434:	f7ff b8d8 	b.w	80825e8 <HAL_I2C_Begin>

08083438 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 8083438:	b570      	push	{r4, r5, r6, lr}
 808343a:	460c      	mov	r4, r1
 808343c:	4606      	mov	r6, r0
 808343e:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
 8083440:	2514      	movs	r5, #20
 8083442:	462a      	mov	r2, r5
 8083444:	2100      	movs	r1, #0
 8083446:	a801      	add	r0, sp, #4
 8083448:	f002 fa90 	bl	808596c <memset>
 808344c:	7823      	ldrb	r3, [r4, #0]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
 808344e:	2200      	movs	r2, #0
 8083450:	f88d 3008 	strb.w	r3, [sp, #8]
 8083454:	6863      	ldr	r3, [r4, #4]
 8083456:	a901      	add	r1, sp, #4
 8083458:	9303      	str	r3, [sp, #12]
 808345a:	68e3      	ldr	r3, [r4, #12]
 808345c:	7c30      	ldrb	r0, [r6, #16]
 808345e:	9304      	str	r3, [sp, #16]
 8083460:	7a23      	ldrb	r3, [r4, #8]
 8083462:	f8ad 5004 	strh.w	r5, [sp, #4]
 8083466:	9305      	str	r3, [sp, #20]
 8083468:	f7ff f91e 	bl	80826a8 <HAL_I2C_Request_Data_Ex>
}
 808346c:	b006      	add	sp, #24
 808346e:	bd70      	pop	{r4, r5, r6, pc}

08083470 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
 8083470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 8083472:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8083474:	f88d 1000 	strb.w	r1, [sp]
 8083478:	f04f 0164 	mov.w	r1, #100	; 0x64
 808347c:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 808347e:	bf18      	it	ne
 8083480:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 8083482:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
 8083484:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 8083486:	f88d 3008 	strb.w	r3, [sp, #8]
 808348a:	f7ff ffd5 	bl	8083438 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 808348e:	b005      	add	sp, #20
 8083490:	f85d fb04 	ldr.w	pc, [sp], #4

08083494 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8083494:	2200      	movs	r2, #0
 8083496:	7c00      	ldrb	r0, [r0, #16]
 8083498:	f7ff b8ae 	b.w	80825f8 <HAL_I2C_Begin_Transmission>

0808349c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 808349c:	b2c9      	uxtb	r1, r1
 808349e:	f7ff bff9 	b.w	8083494 <_ZN7TwoWire17beginTransmissionEh>

080834a2 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80834a2:	2200      	movs	r2, #0
 80834a4:	7c00      	ldrb	r0, [r0, #16]
 80834a6:	f7ff b8af 	b.w	8082608 <HAL_I2C_End_Transmission>

080834aa <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80834aa:	2100      	movs	r1, #0
 80834ac:	7c00      	ldrb	r0, [r0, #16]
 80834ae:	f7ff b8db 	b.w	8082668 <HAL_I2C_Is_Enabled>

080834b2 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 80834b2:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 80834b4:	2100      	movs	r1, #0
 80834b6:	7c00      	ldrb	r0, [r0, #16]
 80834b8:	f7ff f8e6 	bl	8082688 <HAL_I2C_Acquire>
}
 80834bc:	fab0 f080 	clz	r0, r0
 80834c0:	0940      	lsrs	r0, r0, #5
 80834c2:	bd08      	pop	{r3, pc}

080834c4 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 80834c4:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 80834c6:	2100      	movs	r1, #0
 80834c8:	7c00      	ldrb	r0, [r0, #16]
 80834ca:	f7ff f8e5 	bl	8082698 <HAL_I2C_Release>
}
 80834ce:	fab0 f080 	clz	r0, r0
 80834d2:	0940      	lsrs	r0, r0, #5
 80834d4:	bd08      	pop	{r3, pc}

080834d6 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80834d6:	4700      	bx	r0

080834d8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80834d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80834da:	461c      	mov	r4, r3
 80834dc:	b085      	sub	sp, #20
 80834de:	460e      	mov	r6, r1
 80834e0:	4617      	mov	r7, r2
 80834e2:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
 80834e4:	f7ff f870 	bl	80825c8 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80834e8:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80834ea:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80834ec:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80834f0:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80834f2:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80834f6:	bfb4      	ite	lt
 80834f8:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80834fa:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80834fe:	4632      	mov	r2, r6
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8083500:	bfa4      	itt	ge
 8083502:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 8083506:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8083508:	9300      	str	r3, [sp, #0]
 808350a:	4906      	ldr	r1, [pc, #24]	; (8083524 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)
 808350c:	463b      	mov	r3, r7
 808350e:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 8083510:	bfa8      	it	ge
 8083512:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8083516:	f7ff f84f 	bl	80825b8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 808351a:	fab0 f080 	clz	r0, r0
 808351e:	0940      	lsrs	r0, r0, #5
 8083520:	b005      	add	sp, #20
 8083522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083524:	080834d7 	.word	0x080834d7

08083528 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
 8083528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808352a:	4606      	mov	r6, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
 808352c:	f7ff f84c 	bl	80825c8 <HAL_Interrupts_Detach>
 8083530:	4607      	mov	r7, r0
 8083532:	b968      	cbnz	r0, 8083550 <_Z15detachInterruptt+0x28>
        return false;
    }
    if (handlers[pin]) {
 8083534:	4d08      	ldr	r5, [pc, #32]	; (8083558 <_Z15detachInterruptt+0x30>)
 8083536:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 808353a:	b15c      	cbz	r4, 8083554 <_Z15detachInterruptt+0x2c>
 808353c:	4620      	mov	r0, r4
 808353e:	f7fe fc99 	bl	8081e74 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
 8083542:	2110      	movs	r1, #16
 8083544:	4620      	mov	r0, r4
 8083546:	f001 f802 	bl	808454e <_ZdlPvj>
        handlers[pin] = nullptr;
 808354a:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
 808354e:	e001      	b.n	8083554 <_Z15detachInterruptt+0x2c>
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
        return false;
 8083550:	2000      	movs	r0, #0
 8083552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    if (handlers[pin]) {
        delete handlers[pin];
        handlers[pin] = nullptr;
    }
    return true;
 8083554:	2001      	movs	r0, #1
}
 8083556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8083558:	200002c4 	.word	0x200002c4

0808355c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 808355c:	4770      	bx	lr

0808355e <_ZN9IPAddressD0Ev>:
 808355e:	b510      	push	{r4, lr}
 8083560:	4604      	mov	r4, r0
 8083562:	2108      	movs	r1, #8
 8083564:	f000 fff3 	bl	808454e <_ZdlPvj>
 8083568:	4620      	mov	r0, r4
 808356a:	bd10      	pop	{r4, pc}

0808356c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808356e:	460f      	mov	r7, r1
 8083570:	f100 0608 	add.w	r6, r0, #8
 8083574:	1d05      	adds	r5, r0, #4
 8083576:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8083578:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 808357c:	220a      	movs	r2, #10
 808357e:	4638      	mov	r0, r7
 8083580:	f000 f98b 	bl	808389a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8083584:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8083586:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8083588:	d007      	beq.n	808359a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 808358a:	2c00      	cmp	r4, #0
 808358c:	d0f4      	beq.n	8083578 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808358e:	212e      	movs	r1, #46	; 0x2e
 8083590:	4638      	mov	r0, r7
 8083592:	f000 f969 	bl	8083868 <_ZN5Print5printEc>
 8083596:	4404      	add	r4, r0
 8083598:	e7ee      	b.n	8083578 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 808359a:	4620      	mov	r0, r4
 808359c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080835a0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80835a0:	4a02      	ldr	r2, [pc, #8]	; (80835ac <_ZN9IPAddressC1Ev+0xc>)
 80835a2:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80835a4:	2200      	movs	r2, #0
 80835a6:	6042      	str	r2, [r0, #4]
{
    clear();
}
 80835a8:	4770      	bx	lr
 80835aa:	bf00      	nop
 80835ac:	08086a20 	.word	0x08086a20

080835b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80835b0:	4a02      	ldr	r2, [pc, #8]	; (80835bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 80835b2:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 80835b4:	680a      	ldr	r2, [r1, #0]
 80835b6:	6042      	str	r2, [r0, #4]
}
 80835b8:	4770      	bx	lr
 80835ba:	bf00      	nop
 80835bc:	08086a20 	.word	0x08086a20

080835c0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80835c0:	4a01      	ldr	r2, [pc, #4]	; (80835c8 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80835c2:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80835c4:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 80835c6:	4770      	bx	lr
 80835c8:	08086a20 	.word	0x08086a20

080835cc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80835cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80835ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80835d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80835d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80835da:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80835de:	6041      	str	r1, [r0, #4]
 80835e0:	bd10      	pop	{r4, pc}
	...

080835e4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80835e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80835e6:	4d04      	ldr	r5, [pc, #16]	; (80835f8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80835e8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80835ea:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80835ee:	9500      	str	r5, [sp, #0]
 80835f0:	f7ff ffec 	bl	80835cc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80835f4:	b003      	add	sp, #12
 80835f6:	bd30      	pop	{r4, r5, pc}
 80835f8:	08086a20 	.word	0x08086a20

080835fc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80835fc:	4a01      	ldr	r2, [pc, #4]	; (8083604 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80835fe:	4b02      	ldr	r3, [pc, #8]	; (8083608 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8083600:	601a      	str	r2, [r3, #0]
 8083602:	4770      	bx	lr
 8083604:	08086aa2 	.word	0x08086aa2
 8083608:	20000380 	.word	0x20000380

0808360c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808360c:	2300      	movs	r3, #0
 808360e:	461a      	mov	r2, r3
 8083610:	6840      	ldr	r0, [r0, #4]
 8083612:	f7ff b9bb 	b.w	808298c <network_connect>

08083616 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8083616:	2200      	movs	r2, #0
 8083618:	2102      	movs	r1, #2
 808361a:	6840      	ldr	r0, [r0, #4]
 808361c:	f7ff b9c6 	b.w	80829ac <network_disconnect>

08083620 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8083620:	2200      	movs	r2, #0
 8083622:	4611      	mov	r1, r2
 8083624:	6840      	ldr	r0, [r0, #4]
 8083626:	f7ff b9b9 	b.w	808299c <network_connecting>

0808362a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808362a:	2200      	movs	r2, #0
 808362c:	4611      	mov	r1, r2
 808362e:	6840      	ldr	r0, [r0, #4]
 8083630:	f7ff b9c4 	b.w	80829bc <network_ready>

08083634 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8083634:	2300      	movs	r3, #0
 8083636:	461a      	mov	r2, r3
 8083638:	4619      	mov	r1, r3
 808363a:	6840      	ldr	r0, [r0, #4]
 808363c:	f7ff b9c6 	b.w	80829cc <network_on>

08083640 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8083640:	2300      	movs	r3, #0
 8083642:	461a      	mov	r2, r3
 8083644:	4619      	mov	r1, r3
 8083646:	6840      	ldr	r0, [r0, #4]
 8083648:	f7ff b9c8 	b.w	80829dc <network_off>

0808364c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808364c:	2200      	movs	r2, #0
 808364e:	f081 0101 	eor.w	r1, r1, #1
 8083652:	6840      	ldr	r0, [r0, #4]
 8083654:	f7ff b9ca 	b.w	80829ec <network_listen>

08083658 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8083658:	2200      	movs	r2, #0
 808365a:	6840      	ldr	r0, [r0, #4]
 808365c:	f7ff b9d6 	b.w	8082a0c <network_set_listen_timeout>

08083660 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8083660:	2200      	movs	r2, #0
 8083662:	4611      	mov	r1, r2
 8083664:	6840      	ldr	r0, [r0, #4]
 8083666:	f7ff b9d9 	b.w	8082a1c <network_get_listen_timeout>

0808366a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808366a:	2200      	movs	r2, #0
 808366c:	4611      	mov	r1, r2
 808366e:	6840      	ldr	r0, [r0, #4]
 8083670:	f7ff b9c4 	b.w	80829fc <network_listening>

08083674 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8083674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083676:	4617      	mov	r7, r2
 8083678:	b087      	sub	sp, #28
 808367a:	4605      	mov	r5, r0
    IPAddress addr;
 808367c:	a804      	add	r0, sp, #16
 808367e:	f7ff ff8f 	bl	80835a0 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8083682:	2600      	movs	r6, #0
 8083684:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8083686:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8083688:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808368c:	f002 f9cb 	bl	8085a26 <strlen>
 8083690:	4b0a      	ldr	r3, [pc, #40]	; (80836bc <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8083692:	9600      	str	r6, [sp, #0]
 8083694:	b281      	uxth	r1, r0
 8083696:	685b      	ldr	r3, [r3, #4]
 8083698:	4622      	mov	r2, r4
 808369a:	4638      	mov	r0, r7
 808369c:	f7fe feb4 	bl	8082408 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80836a0:	b120      	cbz	r0, 80836ac <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 80836a2:	4631      	mov	r1, r6
 80836a4:	4628      	mov	r0, r5
 80836a6:	f7ff ff8b 	bl	80835c0 <_ZN9IPAddressC1Em>
 80836aa:	e003      	b.n	80836b4 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80836ac:	4621      	mov	r1, r4
 80836ae:	4628      	mov	r0, r5
 80836b0:	f7ff ff7e 	bl	80835b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80836b4:	4628      	mov	r0, r5
 80836b6:	b007      	add	sp, #28
 80836b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80836ba:	bf00      	nop
 80836bc:	20000294 	.word	0x20000294

080836c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80836c0:	4b02      	ldr	r3, [pc, #8]	; (80836cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80836c2:	4a03      	ldr	r2, [pc, #12]	; (80836d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80836c4:	601a      	str	r2, [r3, #0]
 80836c6:	2200      	movs	r2, #0
 80836c8:	605a      	str	r2, [r3, #4]
 80836ca:	4770      	bx	lr
 80836cc:	20000384 	.word	0x20000384
 80836d0:	08086b10 	.word	0x08086b10

080836d4 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 80836d4:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80836d6:	f000 fef7 	bl	80844c8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 80836da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 80836de:	f7ff bee8 	b.w	80834b2 <_ZN7TwoWire4lockEv>

080836e2 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 80836e2:	b510      	push	{r4, lr}
 80836e4:	4604      	mov	r4, r0
    lock_(_lock)
 80836e6:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 80836e8:	b109      	cbz	r1, 80836ee <_ZN4PMICC1Eb+0xc>
        lock();
 80836ea:	f7ff fff3 	bl	80836d4 <_ZN4PMIC4lockEv>
    }
}
 80836ee:	4620      	mov	r0, r4
 80836f0:	bd10      	pop	{r4, pc}

080836f2 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 80836f2:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80836f4:	f000 fee8 	bl	80844c8 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 80836f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 80836fc:	f7ff bee2 	b.w	80834c4 <_ZN7TwoWire6unlockEv>

08083700 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8083700:	b510      	push	{r4, lr}
{
    if (lock_) {
 8083702:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8083704:	4604      	mov	r4, r0
{
    if (lock_) {
 8083706:	b10b      	cbz	r3, 808370c <_ZN4PMICD1Ev+0xc>
        unlock();
 8083708:	f7ff fff3 	bl	80836f2 <_ZN4PMIC6unlockEv>
    }
}
 808370c:	4620      	mov	r0, r4
 808370e:	bd10      	pop	{r4, pc}

08083710 <_ZNSt10lock_guardI4PMICED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8083710:	b510      	push	{r4, lr}
 8083712:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8083714:	6800      	ldr	r0, [r0, #0]
 8083716:	f7ff ffec 	bl	80836f2 <_ZN4PMIC6unlockEv>
 808371a:	4620      	mov	r0, r4
 808371c:	bd10      	pop	{r4, pc}

0808371e <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 808371e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8083720:	ac02      	add	r4, sp, #8
 8083722:	460d      	mov	r5, r1
 8083724:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8083728:	f7ff ffd4 	bl	80836d4 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808372c:	f000 fecc 	bl	80844c8 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8083730:	216b      	movs	r1, #107	; 0x6b
 8083732:	f7ff feb3 	bl	808349c <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8083736:	f000 fec7 	bl	80844c8 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 808373a:	6803      	ldr	r3, [r0, #0]
 808373c:	4629      	mov	r1, r5
 808373e:	689b      	ldr	r3, [r3, #8]
 8083740:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8083742:	f000 fec1 	bl	80844c8 <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 8083746:	2101      	movs	r1, #1
 8083748:	f7ff feab 	bl	80834a2 <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808374c:	f000 febc 	bl	80844c8 <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 8083750:	2301      	movs	r3, #1
 8083752:	461a      	mov	r2, r3
 8083754:	216b      	movs	r1, #107	; 0x6b
 8083756:	f7ff fe8b 	bl	8083470 <_ZN7TwoWire11requestFromEhjh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808375a:	f000 feb5 	bl	80844c8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 808375e:	6803      	ldr	r3, [r0, #0]
 8083760:	695b      	ldr	r3, [r3, #20]
 8083762:	4798      	blx	r3
 8083764:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 8083766:	4620      	mov	r0, r4
 8083768:	f7ff ffd2 	bl	8083710 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 808376c:	b2e8      	uxtb	r0, r5
 808376e:	b003      	add	sp, #12
 8083770:	bd30      	pop	{r4, r5, pc}

08083772 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 8083772:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8083774:	ac02      	add	r4, sp, #8
 8083776:	4615      	mov	r5, r2
 8083778:	460e      	mov	r6, r1
 808377a:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808377e:	f7ff ffa9 	bl	80836d4 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8083782:	f000 fea1 	bl	80844c8 <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8083786:	216b      	movs	r1, #107	; 0x6b
 8083788:	f7ff fe88 	bl	808349c <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808378c:	f000 fe9c 	bl	80844c8 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 8083790:	6803      	ldr	r3, [r0, #0]
 8083792:	4631      	mov	r1, r6
 8083794:	689b      	ldr	r3, [r3, #8]
 8083796:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8083798:	f000 fe96 	bl	80844c8 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 808379c:	6803      	ldr	r3, [r0, #0]
 808379e:	4629      	mov	r1, r5
 80837a0:	689b      	ldr	r3, [r3, #8]
 80837a2:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80837a4:	f000 fe90 	bl	80844c8 <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 80837a8:	2101      	movs	r1, #1
 80837aa:	f7ff fe7a 	bl	80834a2 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 80837ae:	4620      	mov	r0, r4
 80837b0:	f7ff ffae 	bl	8083710 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 80837b4:	b002      	add	sp, #8
 80837b6:	bd70      	pop	{r4, r5, r6, pc}

080837b8 <_ZN4PMIC15disableChargingEv>:
 * Function Name  : disableCharging
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
 80837b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80837ba:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80837bc:	ac02      	add	r4, sp, #8
 80837be:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 80837c2:	f7ff ff87 	bl	80836d4 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 80837c6:	2101      	movs	r1, #1
 80837c8:	4628      	mov	r0, r5
 80837ca:	f7ff ffa8 	bl	808371e <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
 80837ce:	2101      	movs	r1, #1
 80837d0:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
 80837d4:	4628      	mov	r0, r5
 80837d6:	f7ff ffcc 	bl	8083772 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
    std::lock_guard<PMIC> l(*this);
 80837da:	4620      	mov	r0, r4
 80837dc:	f7ff ff98 	bl	8083710 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
    return 1;
}
 80837e0:	2001      	movs	r0, #1
 80837e2:	b003      	add	sp, #12
 80837e4:	bd30      	pop	{r4, r5, pc}

080837e6 <_ZN4PMIC10disableOTGEv>:
 * Function Name  : disableOTG
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
 80837e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80837e8:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80837ea:	ac02      	add	r4, sp, #8
 80837ec:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 80837f0:	f7ff ff70 	bl	80836d4 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 80837f4:	2101      	movs	r1, #1
 80837f6:	4628      	mov	r0, r5
 80837f8:	f7ff ff91 	bl	808371e <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
 80837fc:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
 8083800:	f042 0210 	orr.w	r2, r2, #16
 8083804:	2101      	movs	r1, #1
 8083806:	4628      	mov	r0, r5
 8083808:	f7ff ffb3 	bl	8083772 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
    std::lock_guard<PMIC> l(*this);
 808380c:	4620      	mov	r0, r4
 808380e:	f7ff ff7f 	bl	8083710 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    DATA = DATA & 0b11001111;
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
    return 1;
}
 8083812:	2001      	movs	r0, #1
 8083814:	b003      	add	sp, #12
 8083816:	bd30      	pop	{r4, r5, pc}

08083818 <_ZN4PMIC14enableChargingEv>:
 8083818:	f7ff bfe5 	b.w	80837e6 <_ZN4PMIC10disableOTGEv>

0808381c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808381e:	4606      	mov	r6, r0
 8083820:	460d      	mov	r5, r1
 8083822:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8083824:	2400      	movs	r4, #0
  while (size--) {
 8083826:	42bd      	cmp	r5, r7
 8083828:	d00c      	beq.n	8083844 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808382a:	6833      	ldr	r3, [r6, #0]
 808382c:	f815 1b01 	ldrb.w	r1, [r5], #1
 8083830:	689b      	ldr	r3, [r3, #8]
 8083832:	4630      	mov	r0, r6
 8083834:	4798      	blx	r3
     if (chunk>=0)
 8083836:	2800      	cmp	r0, #0
 8083838:	db01      	blt.n	808383e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808383a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 808383c:	e7f3      	b.n	8083826 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808383e:	2c00      	cmp	r4, #0
 8083840:	bf08      	it	eq
 8083842:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8083844:	4620      	mov	r0, r4
 8083846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08083848 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8083848:	b570      	push	{r4, r5, r6, lr}
 808384a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 808384c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 808384e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8083850:	b149      	cbz	r1, 8083866 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8083852:	f002 f8e8 	bl	8085a26 <strlen>
 8083856:	682b      	ldr	r3, [r5, #0]
 8083858:	4602      	mov	r2, r0
 808385a:	4621      	mov	r1, r4
 808385c:	4628      	mov	r0, r5
    }
 808385e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8083862:	68db      	ldr	r3, [r3, #12]
 8083864:	4718      	bx	r3
    }
 8083866:	bd70      	pop	{r4, r5, r6, pc}

08083868 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8083868:	6803      	ldr	r3, [r0, #0]
 808386a:	689b      	ldr	r3, [r3, #8]
 808386c:	4718      	bx	r3

0808386e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808386e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8083870:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8083872:	4605      	mov	r5, r0
  size_t n = print('\r');
 8083874:	f7ff fff8 	bl	8083868 <_ZN5Print5printEc>
  n += print('\n');
 8083878:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 808387a:	4604      	mov	r4, r0
  n += print('\n');
 808387c:	4628      	mov	r0, r5
 808387e:	f7ff fff3 	bl	8083868 <_ZN5Print5printEc>
  return n;
}
 8083882:	4420      	add	r0, r4
 8083884:	bd38      	pop	{r3, r4, r5, pc}

08083886 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8083886:	b538      	push	{r3, r4, r5, lr}
 8083888:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808388a:	f7ff ffdd 	bl	8083848 <_ZN5Print5writeEPKc>
 808388e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8083890:	4628      	mov	r0, r5
 8083892:	f7ff ffec 	bl	808386e <_ZN5Print7printlnEv>
  return n;
}
 8083896:	4420      	add	r0, r4
 8083898:	bd38      	pop	{r3, r4, r5, pc}

0808389a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808389a:	2a01      	cmp	r2, #1
 808389c:	bf98      	it	ls
 808389e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80838a0:	b530      	push	{r4, r5, lr}
 80838a2:	460b      	mov	r3, r1
 80838a4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80838a6:	2100      	movs	r1, #0
 80838a8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80838ac:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80838b0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80838b4:	fb05 3312 	mls	r3, r5, r2, r3
 80838b8:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80838ba:	2b09      	cmp	r3, #9
 80838bc:	bf94      	ite	ls
 80838be:	3330      	addls	r3, #48	; 0x30
 80838c0:	3337      	addhi	r3, #55	; 0x37
 80838c2:	b2db      	uxtb	r3, r3
 80838c4:	4621      	mov	r1, r4
 80838c6:	f804 3901 	strb.w	r3, [r4], #-1
 80838ca:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80838cc:	2d00      	cmp	r5, #0
 80838ce:	d1ef      	bne.n	80838b0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80838d0:	f7ff ffba 	bl	8083848 <_ZN5Print5writeEPKc>
}
 80838d4:	b00b      	add	sp, #44	; 0x2c
 80838d6:	bd30      	pop	{r4, r5, pc}

080838d8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80838d8:	b510      	push	{r4, lr}
 80838da:	4604      	mov	r4, r0
 80838dc:	f7fe faca 	bl	8081e74 <_ZNSt14_Function_baseD1Ev>
 80838e0:	4620      	mov	r0, r4
 80838e2:	bd10      	pop	{r4, pc}

080838e4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80838e4:	4803      	ldr	r0, [pc, #12]	; (80838f4 <_GLOBAL__sub_I_RGB+0x10>)
 80838e6:	2300      	movs	r3, #0
 80838e8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80838ea:	4a03      	ldr	r2, [pc, #12]	; (80838f8 <_GLOBAL__sub_I_RGB+0x14>)
 80838ec:	4903      	ldr	r1, [pc, #12]	; (80838fc <_GLOBAL__sub_I_RGB+0x18>)
 80838ee:	f000 be29 	b.w	8084544 <__aeabi_atexit>
 80838f2:	bf00      	nop
 80838f4:	2000038c 	.word	0x2000038c
 80838f8:	20000134 	.word	0x20000134
 80838fc:	080838d9 	.word	0x080838d9

08083900 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8083900:	b570      	push	{r4, r5, r6, lr}
 8083902:	4604      	mov	r4, r0
 8083904:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 8083906:	2500      	movs	r5, #0
 8083908:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 808390c:	f7fe fdbc 	bl	8082488 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 8083910:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 8083912:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 8083914:	f7fe fed0 	bl	80826b8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 8083918:	6065      	str	r5, [r4, #4]
}
 808391a:	4620      	mov	r0, r4
 808391c:	bd70      	pop	{r4, r5, r6, pc}

0808391e <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 808391e:	7800      	ldrb	r0, [r0, #0]
 8083920:	f7fe bed2 	b.w	80826c8 <HAL_SPI_Is_Enabled>

08083924 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8083924:	b510      	push	{r4, lr}
 8083926:	4604      	mov	r4, r0
{
	free(buffer);
 8083928:	6800      	ldr	r0, [r0, #0]
 808392a:	f7ff f887 	bl	8082a3c <free>
}
 808392e:	4620      	mov	r0, r4
 8083930:	bd10      	pop	{r4, pc}

08083932 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8083932:	b510      	push	{r4, lr}
 8083934:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8083936:	6800      	ldr	r0, [r0, #0]
 8083938:	b108      	cbz	r0, 808393e <_ZN6String10invalidateEv+0xc>
 808393a:	f7ff f87f 	bl	8082a3c <free>
	buffer = NULL;
 808393e:	2300      	movs	r3, #0
 8083940:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8083942:	60a3      	str	r3, [r4, #8]
 8083944:	6063      	str	r3, [r4, #4]
 8083946:	bd10      	pop	{r4, pc}

08083948 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8083948:	b538      	push	{r3, r4, r5, lr}
 808394a:	4604      	mov	r4, r0
 808394c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 808394e:	6800      	ldr	r0, [r0, #0]
 8083950:	3101      	adds	r1, #1
 8083952:	f7ff f87b 	bl	8082a4c <realloc>
	if (newbuffer) {
 8083956:	b110      	cbz	r0, 808395e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8083958:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 808395c:	2001      	movs	r0, #1
	}
	return 0;
}
 808395e:	bd38      	pop	{r3, r4, r5, pc}

08083960 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8083960:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8083962:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8083964:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8083966:	b113      	cbz	r3, 808396e <_ZN6String7reserveEj+0xe>
 8083968:	6843      	ldr	r3, [r0, #4]
 808396a:	428b      	cmp	r3, r1
 808396c:	d207      	bcs.n	808397e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 808396e:	4620      	mov	r0, r4
 8083970:	f7ff ffea 	bl	8083948 <_ZN6String12changeBufferEj>
 8083974:	b120      	cbz	r0, 8083980 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8083976:	68a3      	ldr	r3, [r4, #8]
 8083978:	b90b      	cbnz	r3, 808397e <_ZN6String7reserveEj+0x1e>
 808397a:	6822      	ldr	r2, [r4, #0]
 808397c:	7013      	strb	r3, [r2, #0]
 808397e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8083980:	bd10      	pop	{r4, pc}

08083982 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8083982:	b570      	push	{r4, r5, r6, lr}
 8083984:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8083986:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8083988:	4604      	mov	r4, r0
 808398a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 808398c:	f7ff ffe8 	bl	8083960 <_ZN6String7reserveEj>
 8083990:	b918      	cbnz	r0, 808399a <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8083992:	4620      	mov	r0, r4
 8083994:	f7ff ffcd 	bl	8083932 <_ZN6String10invalidateEv>
		return *this;
 8083998:	e009      	b.n	80839ae <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 808399a:	462a      	mov	r2, r5
 808399c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 808399e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80839a0:	6820      	ldr	r0, [r4, #0]
 80839a2:	f001 ffbd 	bl	8085920 <memcpy>
	buffer[len] = 0;
 80839a6:	6822      	ldr	r2, [r4, #0]
 80839a8:	68a3      	ldr	r3, [r4, #8]
 80839aa:	2100      	movs	r1, #0
 80839ac:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80839ae:	4620      	mov	r0, r4
 80839b0:	bd70      	pop	{r4, r5, r6, pc}

080839b2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80839b2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80839b4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80839b6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80839b8:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80839ba:	6043      	str	r3, [r0, #4]
	len = 0;
 80839bc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80839be:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80839c0:	460d      	mov	r5, r1
 80839c2:	b139      	cbz	r1, 80839d4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80839c4:	4608      	mov	r0, r1
 80839c6:	f002 f82e 	bl	8085a26 <strlen>
 80839ca:	4629      	mov	r1, r5
 80839cc:	4602      	mov	r2, r0
 80839ce:	4620      	mov	r0, r4
 80839d0:	f7ff ffd7 	bl	8083982 <_ZN6String4copyEPKcj>
}
 80839d4:	4620      	mov	r0, r4
 80839d6:	bd38      	pop	{r3, r4, r5, pc}

080839d8 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80839d8:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80839da:	b510      	push	{r4, lr}
 80839dc:	460b      	mov	r3, r1
 80839de:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80839e0:	d007      	beq.n	80839f2 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80839e2:	6809      	ldr	r1, [r1, #0]
 80839e4:	b119      	cbz	r1, 80839ee <_ZN6StringaSERKS_+0x16>
 80839e6:	689a      	ldr	r2, [r3, #8]
 80839e8:	f7ff ffcb 	bl	8083982 <_ZN6String4copyEPKcj>
 80839ec:	e001      	b.n	80839f2 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80839ee:	f7ff ffa0 	bl	8083932 <_ZN6String10invalidateEv>

	return *this;
}
 80839f2:	4620      	mov	r0, r4
 80839f4:	bd10      	pop	{r4, pc}

080839f6 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80839f6:	b510      	push	{r4, lr}
 80839f8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80839fa:	2300      	movs	r3, #0
 80839fc:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80839fe:	6043      	str	r3, [r0, #4]
	len = 0;
 8083a00:	6083      	str	r3, [r0, #8]
	flags = 0;
 8083a02:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8083a04:	f7ff ffe8 	bl	80839d8 <_ZN6StringaSERKS_>
}
 8083a08:	4620      	mov	r0, r4
 8083a0a:	bd10      	pop	{r4, pc}

08083a0c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8083a0c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8083a0e:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8083a10:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8083a12:	b912      	cbnz	r2, 8083a1a <_ZNK6String6equalsEPKc+0xe>
 8083a14:	b919      	cbnz	r1, 8083a1e <_ZNK6String6equalsEPKc+0x12>
 8083a16:	2001      	movs	r0, #1
 8083a18:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8083a1a:	b911      	cbnz	r1, 8083a22 <_ZNK6String6equalsEPKc+0x16>
 8083a1c:	6803      	ldr	r3, [r0, #0]
 8083a1e:	7818      	ldrb	r0, [r3, #0]
 8083a20:	e002      	b.n	8083a28 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8083a22:	6800      	ldr	r0, [r0, #0]
 8083a24:	f001 ffd2 	bl	80859cc <strcmp>
 8083a28:	fab0 f080 	clz	r0, r0
 8083a2c:	0940      	lsrs	r0, r0, #5
}
 8083a2e:	bd08      	pop	{r3, pc}

08083a30 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 8083a30:	b570      	push	{r4, r5, r6, lr}
 8083a32:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 8083a34:	b19a      	cbz	r2, 8083a5e <_ZNK6String8getBytesEPhjj+0x2e>
 8083a36:	b191      	cbz	r1, 8083a5e <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
 8083a38:	6885      	ldr	r5, [r0, #8]
 8083a3a:	429d      	cmp	r5, r3
 8083a3c:	d802      	bhi.n	8083a44 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 8083a3e:	2300      	movs	r3, #0
 8083a40:	700b      	strb	r3, [r1, #0]
		return;
 8083a42:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
 8083a44:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
 8083a46:	1aed      	subs	r5, r5, r3
 8083a48:	42ac      	cmp	r4, r5
 8083a4a:	bf28      	it	cs
 8083a4c:	462c      	movcs	r4, r5
	strncpy((char *)buf, buffer + index, n);
 8083a4e:	6801      	ldr	r1, [r0, #0]
 8083a50:	4622      	mov	r2, r4
 8083a52:	4419      	add	r1, r3
 8083a54:	4630      	mov	r0, r6
 8083a56:	f002 f803 	bl	8085a60 <strncpy>
	buf[n] = 0;
 8083a5a:	2300      	movs	r3, #0
 8083a5c:	5533      	strb	r3, [r6, r4]
 8083a5e:	bd70      	pop	{r4, r5, r6, pc}

08083a60 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8083a60:	b510      	push	{r4, lr}
 8083a62:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8083a64:	6800      	ldr	r0, [r0, #0]
 8083a66:	b118      	cbz	r0, 8083a70 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 8083a68:	f7fe ffe8 	bl	8082a3c <free>
            wakeupSource_ = nullptr;
 8083a6c:	2300      	movs	r3, #0
 8083a6e:	6023      	str	r3, [r4, #0]
 8083a70:	bd10      	pop	{r4, pc}

08083a72 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8083a72:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 8083a74:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8083a78:	460d      	mov	r5, r1
        error_ = result.error_;
 8083a7a:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 8083a7c:	460b      	mov	r3, r1
 8083a7e:	f853 2f06 	ldr.w	r2, [r3, #6]!
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8083a82:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
 8083a84:	f8c0 2006 	str.w	r2, [r0, #6]
 8083a88:	889b      	ldrh	r3, [r3, #4]
 8083a8a:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 8083a8c:	f7ff ffe8 	bl	8083a60 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
 8083a90:	682b      	ldr	r3, [r5, #0]
 8083a92:	b113      	cbz	r3, 8083a9a <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 8083a94:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 8083a96:	2300      	movs	r3, #0
 8083a98:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
 8083a9a:	4620      	mov	r0, r4
 8083a9c:	bd38      	pop	{r3, r4, r5, pc}

08083a9e <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
 8083a9e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
 8083aa2:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
 8083aa4:	b90b      	cbnz	r3, 8083aaa <_ZN17SystemSleepResult13toSleepResultEv+0xc>
 8083aa6:	680a      	ldr	r2, [r1, #0]
 8083aa8:	b19a      	cbz	r2, 8083ad2 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
 8083aaa:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
 8083aac:	b15c      	cbz	r4, 8083ac6 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
 8083aae:	88a2      	ldrh	r2, [r4, #4]
 8083ab0:	2a01      	cmp	r2, #1
 8083ab2:	d003      	beq.n	8083abc <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
 8083ab4:	2a04      	cmp	r2, #4
 8083ab6:	d106      	bne.n	8083ac6 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 8083ab8:	2202      	movs	r2, #2
 8083aba:	e005      	b.n	8083ac8 <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 8083abc:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 8083abe:	718a      	strb	r2, [r1, #6]
 8083ac0:	810b      	strh	r3, [r1, #8]
 8083ac2:	814c      	strh	r4, [r1, #10]
                    break;
 8083ac4:	e005      	b.n	8083ad2 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8083ac6:	2204      	movs	r2, #4
 8083ac8:	810b      	strh	r3, [r1, #8]
 8083aca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8083ace:	718a      	strb	r2, [r1, #6]
 8083ad0:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
 8083ad2:	f851 3f06 	ldr.w	r3, [r1, #6]!
 8083ad6:	6003      	str	r3, [r0, #0]
 8083ad8:	888b      	ldrh	r3, [r1, #4]
 8083ada:	8083      	strh	r3, [r0, #4]
    }
 8083adc:	bd10      	pop	{r4, pc}
	...

08083ae0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
 8083ae0:	b538      	push	{r3, r4, r5, lr}
 8083ae2:	460c      	mov	r4, r1
 8083ae4:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
 8083ae6:	f7ff ffbb 	bl	8083a60 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (source) {
 8083aea:	b144      	cbz	r4, 8083afe <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
 8083aec:	8820      	ldrh	r0, [r4, #0]
 8083aee:	f7fe ff9d 	bl	8082a2c <malloc>
 8083af2:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
 8083af4:	b128      	cbz	r0, 8083b02 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
 8083af6:	8822      	ldrh	r2, [r4, #0]
 8083af8:	4621      	mov	r1, r4
 8083afa:	f001 ff11 	bl	8085920 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
 8083afe:	2000      	movs	r0, #0
 8083b00:	bd38      	pop	{r3, r4, r5, pc}
        if (source) {
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
            if (wakeupSource_) {
                memcpy(wakeupSource_, source, source->size);
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
 8083b02:	4801      	ldr	r0, [pc, #4]	; (8083b08 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
            }
        }
        return SYSTEM_ERROR_NONE;
    }
 8083b04:	bd38      	pop	{r3, r4, r5, pc}
 8083b06:	bf00      	nop
 8083b08:	fffffefc 	.word	0xfffffefc

08083b0c <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 8083b0c:	4601      	mov	r1, r0
 8083b0e:	2200      	movs	r2, #0
 8083b10:	208c      	movs	r0, #140	; 0x8c
 8083b12:	f7fe bcd9 	b.w	80824c8 <HAL_Core_System_Reset_Ex>

08083b16 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 8083b16:	2000      	movs	r0, #0
 8083b18:	f7ff bff8 	b.w	8083b0c <_ZN11SystemClass5resetEm>

08083b1c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>:
void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
 8083b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083b1e:	4d30      	ldr	r5, [pc, #192]	; (8083be0 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
 8083b20:	7d0b      	ldrb	r3, [r1, #20]
 8083b22:	4604      	mov	r4, r0
 8083b24:	b08b      	sub	sp, #44	; 0x2c
 8083b26:	4608      	mov	r0, r1
 8083b28:	1daf      	adds	r7, r5, #6
 8083b2a:	b313      	cbz	r3, 8083b72 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>
    particle::EnumFlags<SystemSleepFlag> sleepFlags() const {
        return particle::EnumFlags<SystemSleepFlag>::fromUnderlying(config_->flags);
    }

    SystemSleepMode sleepMode() const {
        return static_cast<SystemSleepMode>(config_->mode);
 8083b2c:	680b      	ldr	r3, [r1, #0]
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
 8083b2e:	791b      	ldrb	r3, [r3, #4]
 8083b30:	b1fb      	cbz	r3, 8083b72 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8083b32:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8083b36:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
 8083b38:	a902      	add	r1, sp, #8
 8083b3a:	3004      	adds	r0, #4
 8083b3c:	9202      	str	r2, [sp, #8]
 8083b3e:	f8ad 200c 	strh.w	r2, [sp, #12]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8083b42:	f88d 200e 	strb.w	r2, [sp, #14]
 8083b46:	f8ad 2010 	strh.w	r2, [sp, #16]
 8083b4a:	f8ad 3012 	strh.w	r3, [sp, #18]
 8083b4e:	f7fe feb3 	bl	80828b8 <system_sleep_ext>
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
 8083b52:	ab0a      	add	r3, sp, #40	; 0x28
 8083b54:	f853 2d1a 	ldr.w	r2, [r3, #-26]!
        result.setError(static_cast<system_error_t>(ret));
 8083b58:	b200      	sxth	r0, r0
 8083b5a:	889b      	ldrh	r3, [r3, #4]
    ~SystemSleepResult() {
        freeWakeupSourceMemory();
    }

    void setError(system_error_t error, bool clear = false) {
        error_ = error;
 8083b5c:	f8ad 000c 	strh.w	r0, [sp, #12]
        compatResult_ = result.compatResult_;
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
 8083b60:	80a8      	strh	r0, [r5, #4]
        compatResult_ = result.compatResult_;
 8083b62:	f8c5 2006 	str.w	r2, [r5, #6]
        copyWakeupSource(result.wakeupSource_);
 8083b66:	9902      	ldr	r1, [sp, #8]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
 8083b68:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
 8083b6a:	4628      	mov	r0, r5
 8083b6c:	f7ff ffb8 	bl	8083ae0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
 8083b70:	e01c      	b.n	8083bac <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x90>
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
 8083b72:	2320      	movs	r3, #32
 8083b74:	9302      	str	r3, [sp, #8]
 8083b76:	4b1b      	ldr	r3, [pc, #108]	; (8083be4 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc8>)
 8083b78:	2600      	movs	r6, #0
 8083b7a:	9300      	str	r3, [sp, #0]
 8083b7c:	491a      	ldr	r1, [pc, #104]	; (8083be8 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xcc>)
 8083b7e:	4633      	mov	r3, r6
 8083b80:	2032      	movs	r0, #50	; 0x32
 8083b82:	aa02      	add	r2, sp, #8
 8083b84:	9603      	str	r6, [sp, #12]
 8083b86:	f7fe fe1f 	bl	80827c8 <log_message>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8083b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8083b8e:	f8ad 3012 	strh.w	r3, [sp, #18]
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
 8083b92:	f64f 63f2 	movw	r3, #65266	; 0xfef2
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
 8083b96:	a902      	add	r1, sp, #8
 8083b98:	4811      	ldr	r0, [pc, #68]	; (8083be0 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8083b9a:	9602      	str	r6, [sp, #8]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8083b9c:	f88d 600e 	strb.w	r6, [sp, #14]
 8083ba0:	f8ad 6010 	strh.w	r6, [sp, #16]
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
 8083ba4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8083ba8:	f7ff ff63 	bl	8083a72 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 8083bac:	a802      	add	r0, sp, #8
 8083bae:	f7ff ff57 	bl	8083a60 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8083bb2:	2300      	movs	r3, #0
 8083bb4:	6023      	str	r3, [r4, #0]
 8083bb6:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8083bb8:	71a3      	strb	r3, [r4, #6]
 8083bba:	8123      	strh	r3, [r4, #8]
 8083bbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8083bc0:	8163      	strh	r3, [r4, #10]
    }

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
 8083bc2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
        compatResult_ = result.compatResult_;
        copyWakeupSource(result.wakeupSource_);
 8083bc6:	6829      	ldr	r1, [r5, #0]
    }

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
 8083bc8:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
 8083bca:	683b      	ldr	r3, [r7, #0]
        copyWakeupSource(result.wakeupSource_);
 8083bcc:	4620      	mov	r0, r4

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
 8083bce:	f8c4 3006 	str.w	r3, [r4, #6]
 8083bd2:	88bb      	ldrh	r3, [r7, #4]
 8083bd4:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
 8083bd6:	f7ff ff83 	bl	8083ae0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
        result.setError(static_cast<system_error_t>(ret));
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
 8083bda:	4620      	mov	r0, r4
 8083bdc:	b00b      	add	sp, #44	; 0x2c
 8083bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083be0:	2000039c 	.word	0x2000039c
 8083be4:	08086b43 	.word	0x08086b43
 8083be8:	08086b3c 	.word	0x08086b3c

08083bec <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8083bec:	b530      	push	{r4, r5, lr}
 8083bee:	4604      	mov	r4, r0
 8083bf0:	b085      	sub	sp, #20
 8083bf2:	4608      	mov	r0, r1
 8083bf4:	4611      	mov	r1, r2
 8083bf6:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8083bf8:	2300      	movs	r3, #0
 8083bfa:	f7fe fe17 	bl	808282c <system_sleep>
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
 8083bfe:	2300      	movs	r3, #0
 8083c00:	9301      	str	r3, [sp, #4]
 8083c02:	f8ad 3008 	strh.w	r3, [sp, #8]
 8083c06:	f88d 300a 	strb.w	r3, [sp, #10]
 8083c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 8083c0e:	4d09      	ldr	r5, [pc, #36]	; (8083c34 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 8083c10:	a901      	add	r1, sp, #4
 8083c12:	f8ad 000c 	strh.w	r0, [sp, #12]
 8083c16:	4628      	mov	r0, r5
 8083c18:	f8ad 300e 	strh.w	r3, [sp, #14]
 8083c1c:	f7ff ff29 	bl	8083a72 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 8083c20:	a801      	add	r0, sp, #4
 8083c22:	f7ff ff1d 	bl	8083a60 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
 8083c26:	4620      	mov	r0, r4
 8083c28:	4629      	mov	r1, r5
 8083c2a:	f7ff ff38 	bl	8083a9e <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 8083c2e:	4620      	mov	r0, r4
 8083c30:	b005      	add	sp, #20
 8083c32:	bd30      	pop	{r4, r5, pc}
 8083c34:	2000039c 	.word	0x2000039c

08083c38 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8083c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8083c3c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8083c3e:	4c08      	ldr	r4, [pc, #32]	; (8083c60 <_GLOBAL__sub_I_System+0x28>)
 8083c40:	2000      	movs	r0, #0
 8083c42:	6020      	str	r0, [r4, #0]
 8083c44:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8083c46:	71a0      	strb	r0, [r4, #6]
 8083c48:	8120      	strh	r0, [r4, #8]
 8083c4a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8083c4c:	f7fe fdde 	bl	808280c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 8083c50:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8083c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 8083c56:	4a03      	ldr	r2, [pc, #12]	; (8083c64 <_GLOBAL__sub_I_System+0x2c>)
 8083c58:	4903      	ldr	r1, [pc, #12]	; (8083c68 <_GLOBAL__sub_I_System+0x30>)
 8083c5a:	f000 bc73 	b.w	8084544 <__aeabi_atexit>
 8083c5e:	bf00      	nop
 8083c60:	2000039c 	.word	0x2000039c
 8083c64:	20000134 	.word	0x20000134
 8083c68:	08080231 	.word	0x08080231

08083c6c <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8083c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 8083c6e:	4b14      	ldr	r3, [pc, #80]	; (8083cc0 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8083c70:	4f14      	ldr	r7, [pc, #80]	; (8083cc4 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8083c72:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 8083c74:	4b14      	ldr	r3, [pc, #80]	; (8083cc8 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8083c76:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 8083c78:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 8083c7a:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 8083c7c:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 8083c7e:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8083c80:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8083c82:	d01b      	beq.n	8083cbc <_ZL22Refresh_UnixTime_Cachel+0x50>
 8083c84:	a80a      	add	r0, sp, #40	; 0x28
 8083c86:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 8083c8a:	f001 fd51 	bl	8085730 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8083c8e:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8083c90:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 8083c92:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8083c94:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8083c98:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 8083c9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8083c9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8083c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8083ca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8083ca2:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8083ca6:	4c09      	ldr	r4, [pc, #36]	; (8083ccc <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8083ca8:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8083cac:	ad01      	add	r5, sp, #4
 8083cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8083cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8083cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8083cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8083cb6:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8083cb8:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8083cbc:	b00b      	add	sp, #44	; 0x2c
 8083cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083cc0:	200003d8 	.word	0x200003d8
 8083cc4:	200003d4 	.word	0x200003d4
 8083cc8:	200003d0 	.word	0x200003d0
 8083ccc:	200003a8 	.word	0x200003a8

08083cd0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 8083cd0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 8083cd2:	2000      	movs	r0, #0
 8083cd4:	f7fe fe4a 	bl	808296c <spark_sync_time_pending>
 8083cd8:	b128      	cbz	r0, 8083ce6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8083cda:	f7fe fe1f 	bl	808291c <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 8083cde:	f080 0001 	eor.w	r0, r0, #1
 8083ce2:	b2c0      	uxtb	r0, r0
 8083ce4:	bd08      	pop	{r3, pc}
 8083ce6:	2001      	movs	r0, #1
    }
 8083ce8:	bd08      	pop	{r3, pc}
	...

08083cec <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
 8083cec:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 8083cee:	f7ff ffbd 	bl	8083c6c <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
 8083cf2:	4b01      	ldr	r3, [pc, #4]	; (8083cf8 <_ZN9TimeClass4hourEl+0xc>)
 8083cf4:	6898      	ldr	r0, [r3, #8]
 8083cf6:	bd08      	pop	{r3, pc}
 8083cf8:	200003a8 	.word	0x200003a8

08083cfc <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
 8083cfc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 8083cfe:	f7ff ffb5 	bl	8083c6c <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
 8083d02:	4b01      	ldr	r3, [pc, #4]	; (8083d08 <_ZN9TimeClass3dayEl+0xc>)
 8083d04:	68d8      	ldr	r0, [r3, #12]
 8083d06:	bd08      	pop	{r3, pc}
 8083d08:	200003a8 	.word	0x200003a8

08083d0c <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
 8083d0c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 8083d0e:	f7ff ffad 	bl	8083c6c <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
 8083d12:	4b02      	ldr	r3, [pc, #8]	; (8083d1c <_ZN9TimeClass7weekdayEl+0x10>)
 8083d14:	6998      	ldr	r0, [r3, #24]
}
 8083d16:	3001      	adds	r0, #1
 8083d18:	bd08      	pop	{r3, pc}
 8083d1a:	bf00      	nop
 8083d1c:	200003a8 	.word	0x200003a8

08083d20 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 8083d20:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 8083d22:	f7ff ffa3 	bl	8083c6c <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 8083d26:	4b02      	ldr	r3, [pc, #8]	; (8083d30 <_ZN9TimeClass5monthEl+0x10>)
 8083d28:	6918      	ldr	r0, [r3, #16]
}
 8083d2a:	3001      	adds	r0, #1
 8083d2c:	bd08      	pop	{r3, pc}
 8083d2e:	bf00      	nop
 8083d30:	200003a8 	.word	0x200003a8

08083d34 <_ZN9TimeClass5localEv>:
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
}

time_t TimeClass::local()
{
 8083d34:	b508      	push	{r3, lr}
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
 8083d36:	f7fe fbf7 	bl	8082528 <HAL_RTC_Get_UnixTime>
 8083d3a:	4b03      	ldr	r3, [pc, #12]	; (8083d48 <_ZN9TimeClass5localEv+0x14>)
 8083d3c:	681b      	ldr	r3, [r3, #0]
 8083d3e:	4418      	add	r0, r3
 8083d40:	4b02      	ldr	r3, [pc, #8]	; (8083d4c <_ZN9TimeClass5localEv+0x18>)
 8083d42:	681b      	ldr	r3, [r3, #0]
}
 8083d44:	4418      	add	r0, r3
 8083d46:	bd08      	pop	{r3, pc}
 8083d48:	200003d8 	.word	0x200003d8
 8083d4c:	200003d0 	.word	0x200003d0

08083d50 <_ZN9TimeClass4zoneEf>:

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8083d50:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8083d52:	4909      	ldr	r1, [pc, #36]	; (8083d78 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8083d54:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8083d56:	f001 fc4f 	bl	80855f8 <__aeabi_fcmplt>
 8083d5a:	b960      	cbnz	r0, 8083d76 <_ZN9TimeClass4zoneEf+0x26>
 8083d5c:	4907      	ldr	r1, [pc, #28]	; (8083d7c <_ZN9TimeClass4zoneEf+0x2c>)
 8083d5e:	4620      	mov	r0, r4
 8083d60:	f001 fc68 	bl	8085634 <__aeabi_fcmpgt>
 8083d64:	b938      	cbnz	r0, 8083d76 <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 8083d66:	4906      	ldr	r1, [pc, #24]	; (8083d80 <_ZN9TimeClass4zoneEf+0x30>)
 8083d68:	4620      	mov	r0, r4
 8083d6a:	f001 faa7 	bl	80852bc <__aeabi_fmul>
 8083d6e:	f001 fc6b 	bl	8085648 <__aeabi_f2iz>
 8083d72:	4b04      	ldr	r3, [pc, #16]	; (8083d84 <_ZN9TimeClass4zoneEf+0x34>)
 8083d74:	6018      	str	r0, [r3, #0]
 8083d76:	bd10      	pop	{r4, pc}
 8083d78:	c1400000 	.word	0xc1400000
 8083d7c:	41600000 	.word	0x41600000
 8083d80:	45610000 	.word	0x45610000
 8083d84:	200003d8 	.word	0x200003d8

08083d88 <_ZN9TimeClass12setDSTOffsetEf>:
{
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
 8083d88:	b510      	push	{r4, lr}
    if (offset < 0 || offset > 2)
 8083d8a:	2100      	movs	r1, #0
{
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
 8083d8c:	4604      	mov	r4, r0
    if (offset < 0 || offset > 2)
 8083d8e:	f001 fc33 	bl	80855f8 <__aeabi_fcmplt>
 8083d92:	b968      	cbnz	r0, 8083db0 <_ZN9TimeClass12setDSTOffsetEf+0x28>
 8083d94:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8083d98:	4620      	mov	r0, r4
 8083d9a:	f001 fc4b 	bl	8085634 <__aeabi_fcmpgt>
 8083d9e:	b938      	cbnz	r0, 8083db0 <_ZN9TimeClass12setDSTOffsetEf+0x28>
    {
        return;
    }
    dst_cache = offset * 3600;
 8083da0:	4904      	ldr	r1, [pc, #16]	; (8083db4 <_ZN9TimeClass12setDSTOffsetEf+0x2c>)
 8083da2:	4620      	mov	r0, r4
 8083da4:	f001 fa8a 	bl	80852bc <__aeabi_fmul>
 8083da8:	f001 fc4e 	bl	8085648 <__aeabi_f2iz>
 8083dac:	4b02      	ldr	r3, [pc, #8]	; (8083db8 <_ZN9TimeClass12setDSTOffsetEf+0x30>)
 8083dae:	6018      	str	r0, [r3, #0]
 8083db0:	bd10      	pop	{r4, pc}
 8083db2:	bf00      	nop
 8083db4:	45610000 	.word	0x45610000
 8083db8:	20000078 	.word	0x20000078

08083dbc <_ZN9TimeClass8beginDSTEv>:
}

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
 8083dbc:	4b02      	ldr	r3, [pc, #8]	; (8083dc8 <_ZN9TimeClass8beginDSTEv+0xc>)
 8083dbe:	681a      	ldr	r2, [r3, #0]
 8083dc0:	4b02      	ldr	r3, [pc, #8]	; (8083dcc <_ZN9TimeClass8beginDSTEv+0x10>)
 8083dc2:	601a      	str	r2, [r3, #0]
 8083dc4:	4770      	bx	lr
 8083dc6:	bf00      	nop
 8083dc8:	20000078 	.word	0x20000078
 8083dcc:	200003d0 	.word	0x200003d0

08083dd0 <_ZN9TimeClass6endDSTEv>:
}

void TimeClass::endDST()
{
    dst_current_cache = 0;
 8083dd0:	4b01      	ldr	r3, [pc, #4]	; (8083dd8 <_ZN9TimeClass6endDSTEv+0x8>)
 8083dd2:	2200      	movs	r2, #0
 8083dd4:	601a      	str	r2, [r3, #0]
 8083dd6:	4770      	bx	lr
 8083dd8:	200003d0 	.word	0x200003d0

08083ddc <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8083ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 8083dde:	4b0e      	ldr	r3, [pc, #56]	; (8083e18 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8083de0:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 8083de2:	681b      	ldr	r3, [r3, #0]
 8083de4:	a802      	add	r0, sp, #8
 8083de6:	4419      	add	r1, r3
 8083de8:	4b0c      	ldr	r3, [pc, #48]	; (8083e1c <_ZN9TimeClass7timeStrEl+0x40>)
 8083dea:	681b      	ldr	r3, [r3, #0]
 8083dec:	4419      	add	r1, r3
 8083dee:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 8083df2:	f001 fc9d 	bl	8085730 <localtime>
        char* ascstr = asctime(calendar_time);
 8083df6:	f001 fc4d 	bl	8085694 <asctime>
 8083dfa:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 8083dfc:	f001 fe13 	bl	8085a26 <strlen>
        ascstr[len-1] = 0; // remove final newline
 8083e00:	2300      	movs	r3, #0
 8083e02:	4428      	add	r0, r5
 8083e04:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 8083e08:	4629      	mov	r1, r5
 8083e0a:	4620      	mov	r0, r4
 8083e0c:	f7ff fdd1 	bl	80839b2 <_ZN6StringC1EPK19__FlashStringHelper>
}
 8083e10:	4620      	mov	r0, r4
 8083e12:	b003      	add	sp, #12
 8083e14:	bd30      	pop	{r4, r5, pc}
 8083e16:	bf00      	nop
 8083e18:	200003d8 	.word	0x200003d8
 8083e1c:	200003d0 	.word	0x200003d0

08083e20 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8083e20:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8083e22:	2000      	movs	r0, #0
 8083e24:	f7fe fb88 	bl	8082538 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8083e28:	4604      	mov	r4, r0
 8083e2a:	b968      	cbnz	r0, 8083e48 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8083e2c:	f7fe fce6 	bl	80827fc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8083e30:	2801      	cmp	r0, #1
 8083e32:	d10b      	bne.n	8083e4c <_ZN9TimeClass7isValidEv+0x2c>
 8083e34:	4620      	mov	r0, r4
 8083e36:	f7fe fd19 	bl	808286c <system_thread_get_state>
 8083e3a:	b938      	cbnz	r0, 8083e4c <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8083e3c:	f7ff ff48 	bl	8083cd0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8083e40:	b930      	cbnz	r0, 8083e50 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8083e42:	f7fe fd53 	bl	80828ec <spark_process>
 8083e46:	e7f9      	b.n	8083e3c <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8083e48:	2001      	movs	r0, #1
 8083e4a:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8083e4c:	2000      	movs	r0, #0
 8083e4e:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8083e50:	f7ff ff3e 	bl	8083cd0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8083e54:	2000      	movs	r0, #0
 8083e56:	f7fe fb6f 	bl	8082538 <HAL_RTC_Time_Is_Valid>
 8083e5a:	3000      	adds	r0, #0
 8083e5c:	bf18      	it	ne
 8083e5e:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8083e60:	bd10      	pop	{r4, pc}

08083e62 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8083e62:	b508      	push	{r3, lr}
    (void)isValid();
 8083e64:	f7ff ffdc 	bl	8083e20 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 8083e68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8083e6c:	f7fe bb5c 	b.w	8082528 <HAL_RTC_Get_UnixTime>

08083e70 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 8083e70:	b508      	push	{r3, lr}
	return hour(now());
 8083e72:	f7ff fff6 	bl	8083e62 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8083e76:	f7ff fef9 	bl	8083c6c <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 8083e7a:	4b01      	ldr	r3, [pc, #4]	; (8083e80 <_ZN9TimeClass4hourEv+0x10>)
 8083e7c:	6898      	ldr	r0, [r3, #8]
 8083e7e:	bd08      	pop	{r3, pc}
 8083e80:	200003a8 	.word	0x200003a8

08083e84 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 8083e84:	b508      	push	{r3, lr}
	return minute(now());
 8083e86:	f7ff ffec 	bl	8083e62 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8083e8a:	f7ff feef 	bl	8083c6c <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 8083e8e:	4b01      	ldr	r3, [pc, #4]	; (8083e94 <_ZN9TimeClass6minuteEv+0x10>)
 8083e90:	6858      	ldr	r0, [r3, #4]
 8083e92:	bd08      	pop	{r3, pc}
 8083e94:	200003a8 	.word	0x200003a8

08083e98 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 8083e98:	b508      	push	{r3, lr}
	return day(now());
 8083e9a:	f7ff ffe2 	bl	8083e62 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8083e9e:	f7ff fee5 	bl	8083c6c <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 8083ea2:	4b01      	ldr	r3, [pc, #4]	; (8083ea8 <_ZN9TimeClass3dayEv+0x10>)
 8083ea4:	68d8      	ldr	r0, [r3, #12]
 8083ea6:	bd08      	pop	{r3, pc}
 8083ea8:	200003a8 	.word	0x200003a8

08083eac <_ZN9TimeClass7weekdayEv>:
	return calendar_time_cache.tm_mday;
}

/* the current weekday */
int TimeClass::weekday()
{
 8083eac:	b508      	push	{r3, lr}
	return weekday(now());
 8083eae:	f7ff ffd8 	bl	8083e62 <_ZN9TimeClass3nowEv>
}
 8083eb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* the current weekday */
int TimeClass::weekday()
{
	return weekday(now());
 8083eb6:	f7ff bf29 	b.w	8083d0c <_ZN9TimeClass7weekdayEl>

08083eba <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
 8083eba:	b508      	push	{r3, lr}
	return month(now());
 8083ebc:	f7ff ffd1 	bl	8083e62 <_ZN9TimeClass3nowEv>
}
 8083ec0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
 8083ec4:	f7ff bf2c 	b.w	8083d20 <_ZN9TimeClass5monthEl>

08083ec8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8083ec8:	4b02      	ldr	r3, [pc, #8]	; (8083ed4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8083eca:	681a      	ldr	r2, [r3, #0]
 8083ecc:	4b02      	ldr	r3, [pc, #8]	; (8083ed8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8083ece:	601a      	str	r2, [r3, #0]
 8083ed0:	4770      	bx	lr
 8083ed2:	bf00      	nop
 8083ed4:	2000007c 	.word	0x2000007c
 8083ed8:	200003cc 	.word	0x200003cc

08083edc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8083edc:	4770      	bx	lr

08083ede <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8083ede:	7441      	strb	r1, [r0, #17]
 8083ee0:	4770      	bx	lr

08083ee2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 8083ee2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 8083ee4:	7c00      	ldrb	r0, [r0, #16]
 8083ee6:	f7fe fc2f 	bl	8082748 <HAL_USART_Available_Data_For_Write>
}
 8083eea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8083eee:	bd08      	pop	{r3, pc}

08083ef0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8083ef0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 8083ef2:	7c00      	ldrb	r0, [r0, #16]
 8083ef4:	f7fe fc00 	bl	80826f8 <HAL_USART_Available_Data>
}
 8083ef8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8083efc:	bd08      	pop	{r3, pc}

08083efe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8083efe:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 8083f00:	7c00      	ldrb	r0, [r0, #16]
 8083f02:	f7fe fc09 	bl	8082718 <HAL_USART_Peek_Data>
}
 8083f06:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8083f0a:	bf28      	it	cs
 8083f0c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8083f10:	bd08      	pop	{r3, pc}

08083f12 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8083f12:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 8083f14:	7c00      	ldrb	r0, [r0, #16]
 8083f16:	f7fe fbf7 	bl	8082708 <HAL_USART_Read_Data>
}
 8083f1a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8083f1e:	bf28      	it	cs
 8083f20:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8083f24:	bd08      	pop	{r3, pc}

08083f26 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8083f26:	7c00      	ldrb	r0, [r0, #16]
 8083f28:	f7fe bbfe 	b.w	8082728 <HAL_USART_Flush_Data>

08083f2c <_ZN11USARTSerialD0Ev>:
 8083f2c:	b510      	push	{r4, lr}
 8083f2e:	4604      	mov	r4, r0
 8083f30:	2114      	movs	r1, #20
 8083f32:	f000 fb0c 	bl	808454e <_ZdlPvj>
 8083f36:	4620      	mov	r0, r4
 8083f38:	bd10      	pop	{r4, pc}

08083f3a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8083f3a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8083f3c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8083f3e:	4604      	mov	r4, r0
 8083f40:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8083f42:	b925      	cbnz	r5, 8083f4e <_ZN11USARTSerial5writeEh+0x14>
 8083f44:	7c00      	ldrb	r0, [r0, #16]
 8083f46:	f7fe fbff 	bl	8082748 <HAL_USART_Available_Data_For_Write>
 8083f4a:	2800      	cmp	r0, #0
 8083f4c:	dd05      	ble.n	8083f5a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8083f4e:	4631      	mov	r1, r6
 8083f50:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8083f52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8083f56:	f7fe bbc7 	b.w	80826e8 <HAL_USART_Write_Data>
  }
  return 0;
}
 8083f5a:	4628      	mov	r0, r5
 8083f5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08083f60 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8083f60:	b510      	push	{r4, lr}
 8083f62:	4604      	mov	r4, r0
 8083f64:	4608      	mov	r0, r1
 8083f66:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8083f68:	2200      	movs	r2, #0
 8083f6a:	6062      	str	r2, [r4, #4]
 8083f6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8083f70:	60a2      	str	r2, [r4, #8]
 8083f72:	4a05      	ldr	r2, [pc, #20]	; (8083f88 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8083f74:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8083f76:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8083f78:	2201      	movs	r2, #1
 8083f7a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8083f7c:	461a      	mov	r2, r3
 8083f7e:	f7fe fbab 	bl	80826d8 <HAL_USART_Init>
}
 8083f82:	4620      	mov	r0, r4
 8083f84:	bd10      	pop	{r4, pc}
 8083f86:	bf00      	nop
 8083f88:	08086b9c 	.word	0x08086b9c

08083f8c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8083f8c:	7c00      	ldrb	r0, [r0, #16]
 8083f8e:	f7fe bbd3 	b.w	8082738 <HAL_USART_Is_Enabled>
	...

08083f94 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8083f94:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8083f96:	4d0c      	ldr	r5, [pc, #48]	; (8083fc8 <_Z22__fetch_global_Serial1v+0x34>)
 8083f98:	6829      	ldr	r1, [r5, #0]
 8083f9a:	f011 0401 	ands.w	r4, r1, #1
 8083f9e:	d111      	bne.n	8083fc4 <_Z22__fetch_global_Serial1v+0x30>
 8083fa0:	4628      	mov	r0, r5
 8083fa2:	f7fc f88b 	bl	80800bc <__cxa_guard_acquire>
 8083fa6:	b168      	cbz	r0, 8083fc4 <_Z22__fetch_global_Serial1v+0x30>
 8083fa8:	4a08      	ldr	r2, [pc, #32]	; (8083fcc <_Z22__fetch_global_Serial1v+0x38>)
 8083faa:	4621      	mov	r1, r4
 8083fac:	4b08      	ldr	r3, [pc, #32]	; (8083fd0 <_Z22__fetch_global_Serial1v+0x3c>)
 8083fae:	4809      	ldr	r0, [pc, #36]	; (8083fd4 <_Z22__fetch_global_Serial1v+0x40>)
 8083fb0:	f7ff ffd6 	bl	8083f60 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8083fb4:	4628      	mov	r0, r5
 8083fb6:	f7fc f886 	bl	80800c6 <__cxa_guard_release>
 8083fba:	4a07      	ldr	r2, [pc, #28]	; (8083fd8 <_Z22__fetch_global_Serial1v+0x44>)
 8083fbc:	4907      	ldr	r1, [pc, #28]	; (8083fdc <_Z22__fetch_global_Serial1v+0x48>)
 8083fbe:	4805      	ldr	r0, [pc, #20]	; (8083fd4 <_Z22__fetch_global_Serial1v+0x40>)
 8083fc0:	f000 fac0 	bl	8084544 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8083fc4:	4803      	ldr	r0, [pc, #12]	; (8083fd4 <_Z22__fetch_global_Serial1v+0x40>)
 8083fc6:	bd38      	pop	{r3, r4, r5, pc}
 8083fc8:	20000474 	.word	0x20000474
 8083fcc:	20000478 	.word	0x20000478
 8083fd0:	200003f0 	.word	0x200003f0
 8083fd4:	200003dc 	.word	0x200003dc
 8083fd8:	20000134 	.word	0x20000134
 8083fdc:	08083edd 	.word	0x08083edd

08083fe0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8083fe0:	7441      	strb	r1, [r0, #17]
 8083fe2:	4770      	bx	lr

08083fe4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8083fe4:	4770      	bx	lr

08083fe6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 8083fe6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8083fe8:	2100      	movs	r1, #0
 8083fea:	7c00      	ldrb	r0, [r0, #16]
 8083fec:	f7fe fbcc 	bl	8082788 <HAL_USB_USART_Receive_Data>
}
 8083ff0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8083ff4:	bf28      	it	cs
 8083ff6:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8083ffa:	bd08      	pop	{r3, pc}

08083ffc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 8083ffc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8083ffe:	2101      	movs	r1, #1
 8084000:	7c00      	ldrb	r0, [r0, #16]
 8084002:	f7fe fbc1 	bl	8082788 <HAL_USB_USART_Receive_Data>
}
 8084006:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808400a:	bf28      	it	cs
 808400c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8084010:	bd08      	pop	{r3, pc}

08084012 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 8084012:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8084014:	7c00      	ldrb	r0, [r0, #16]
 8084016:	f7fe fbaf 	bl	8082778 <HAL_USB_USART_Available_Data_For_Write>
}
 808401a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808401e:	bd08      	pop	{r3, pc}

08084020 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 8084020:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8084022:	7c00      	ldrb	r0, [r0, #16]
 8084024:	f7fe fba0 	bl	8082768 <HAL_USB_USART_Available_Data>
}
 8084028:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808402c:	bd08      	pop	{r3, pc}

0808402e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 808402e:	7c00      	ldrb	r0, [r0, #16]
 8084030:	f7fe bbba 	b.w	80827a8 <HAL_USB_USART_Flush_Data>

08084034 <_ZN9USBSerialD0Ev>:
 8084034:	b510      	push	{r4, lr}
 8084036:	4604      	mov	r4, r0
 8084038:	2114      	movs	r1, #20
 808403a:	f000 fa88 	bl	808454e <_ZdlPvj>
 808403e:	4620      	mov	r0, r4
 8084040:	bd10      	pop	{r4, pc}

08084042 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8084042:	b538      	push	{r3, r4, r5, lr}
 8084044:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8084046:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8084048:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808404a:	f7fe fb95 	bl	8082778 <HAL_USB_USART_Available_Data_For_Write>
 808404e:	2800      	cmp	r0, #0
 8084050:	dc01      	bgt.n	8084056 <_ZN9USBSerial5writeEh+0x14>
 8084052:	7c60      	ldrb	r0, [r4, #17]
 8084054:	b128      	cbz	r0, 8084062 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8084056:	4629      	mov	r1, r5
 8084058:	7c20      	ldrb	r0, [r4, #16]
 808405a:	f7fe fb9d 	bl	8082798 <HAL_USB_USART_Send_Data>
 808405e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8084062:	bd38      	pop	{r3, r4, r5, pc}

08084064 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8084064:	b510      	push	{r4, lr}
 8084066:	4604      	mov	r4, r0
 8084068:	2300      	movs	r3, #0
 808406a:	6063      	str	r3, [r4, #4]
 808406c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8084070:	60a3      	str	r3, [r4, #8]
 8084072:	4b05      	ldr	r3, [pc, #20]	; (8084088 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8084074:	4608      	mov	r0, r1
 8084076:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8084078:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 808407a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 808407c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 808407e:	4611      	mov	r1, r2
 8084080:	f7fe fb6a 	bl	8082758 <HAL_USB_USART_Init>
}
 8084084:	4620      	mov	r0, r4
 8084086:	bd10      	pop	{r4, pc}
 8084088:	08086bcc 	.word	0x08086bcc

0808408c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 808408c:	b510      	push	{r4, lr}
 808408e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8084090:	2214      	movs	r2, #20
 8084092:	2100      	movs	r1, #0
 8084094:	f001 fc6a 	bl	808596c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8084098:	4b05      	ldr	r3, [pc, #20]	; (80840b0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808409a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808409c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808409e:	4b05      	ldr	r3, [pc, #20]	; (80840b4 <_Z19acquireSerialBufferv+0x28>)
 80840a0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80840a2:	f240 1301 	movw	r3, #257	; 0x101
 80840a6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80840a8:	2381      	movs	r3, #129	; 0x81
 80840aa:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80840ac:	bd10      	pop	{r4, pc}
 80840ae:	bf00      	nop
 80840b0:	20000581 	.word	0x20000581
 80840b4:	20000500 	.word	0x20000500

080840b8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80840b8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80840ba:	4d0e      	ldr	r5, [pc, #56]	; (80840f4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80840bc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80840be:	a801      	add	r0, sp, #4
 80840c0:	f7ff ffe4 	bl	808408c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80840c4:	6829      	ldr	r1, [r5, #0]
 80840c6:	f011 0401 	ands.w	r4, r1, #1
 80840ca:	d110      	bne.n	80840ee <_Z16_fetch_usbserialv+0x36>
 80840cc:	4628      	mov	r0, r5
 80840ce:	f7fb fff5 	bl	80800bc <__cxa_guard_acquire>
 80840d2:	b160      	cbz	r0, 80840ee <_Z16_fetch_usbserialv+0x36>
 80840d4:	aa01      	add	r2, sp, #4
 80840d6:	4621      	mov	r1, r4
 80840d8:	4807      	ldr	r0, [pc, #28]	; (80840f8 <_Z16_fetch_usbserialv+0x40>)
 80840da:	f7ff ffc3 	bl	8084064 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80840de:	4628      	mov	r0, r5
 80840e0:	f7fb fff1 	bl	80800c6 <__cxa_guard_release>
 80840e4:	4a05      	ldr	r2, [pc, #20]	; (80840fc <_Z16_fetch_usbserialv+0x44>)
 80840e6:	4906      	ldr	r1, [pc, #24]	; (8084100 <_Z16_fetch_usbserialv+0x48>)
 80840e8:	4803      	ldr	r0, [pc, #12]	; (80840f8 <_Z16_fetch_usbserialv+0x40>)
 80840ea:	f000 fa2b 	bl	8084544 <__aeabi_atexit>
	return _usbserial;
}
 80840ee:	4802      	ldr	r0, [pc, #8]	; (80840f8 <_Z16_fetch_usbserialv+0x40>)
 80840f0:	b007      	add	sp, #28
 80840f2:	bd30      	pop	{r4, r5, pc}
 80840f4:	200004fc 	.word	0x200004fc
 80840f8:	20000684 	.word	0x20000684
 80840fc:	20000134 	.word	0x20000134
 8084100:	08083fe5 	.word	0x08083fe5

08084104 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8084104:	b510      	push	{r4, lr}
 8084106:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8084108:	2214      	movs	r2, #20
 808410a:	2100      	movs	r1, #0
 808410c:	f001 fc2e 	bl	808596c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8084110:	4b05      	ldr	r3, [pc, #20]	; (8084128 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8084112:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8084114:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8084116:	4b05      	ldr	r3, [pc, #20]	; (808412c <_Z23acquireUSBSerial1Bufferv+0x28>)
 8084118:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808411a:	f240 1301 	movw	r3, #257	; 0x101
 808411e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8084120:	2381      	movs	r3, #129	; 0x81
 8084122:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8084124:	bd10      	pop	{r4, pc}
 8084126:	bf00      	nop
 8084128:	20000734 	.word	0x20000734
 808412c:	2000069c 	.word	0x2000069c

08084130 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8084130:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8084132:	4c0e      	ldr	r4, [pc, #56]	; (808416c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8084134:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8084136:	a801      	add	r0, sp, #4
 8084138:	f7ff ffe4 	bl	8084104 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808413c:	6823      	ldr	r3, [r4, #0]
 808413e:	07db      	lsls	r3, r3, #31
 8084140:	d410      	bmi.n	8084164 <_Z17_fetch_usbserial1v+0x34>
 8084142:	4620      	mov	r0, r4
 8084144:	f7fb ffba 	bl	80800bc <__cxa_guard_acquire>
 8084148:	b160      	cbz	r0, 8084164 <_Z17_fetch_usbserial1v+0x34>
 808414a:	aa01      	add	r2, sp, #4
 808414c:	2101      	movs	r1, #1
 808414e:	4808      	ldr	r0, [pc, #32]	; (8084170 <_Z17_fetch_usbserial1v+0x40>)
 8084150:	f7ff ff88 	bl	8084064 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8084154:	4620      	mov	r0, r4
 8084156:	f7fb ffb6 	bl	80800c6 <__cxa_guard_release>
 808415a:	4a06      	ldr	r2, [pc, #24]	; (8084174 <_Z17_fetch_usbserial1v+0x44>)
 808415c:	4906      	ldr	r1, [pc, #24]	; (8084178 <_Z17_fetch_usbserial1v+0x48>)
 808415e:	4804      	ldr	r0, [pc, #16]	; (8084170 <_Z17_fetch_usbserial1v+0x40>)
 8084160:	f000 f9f0 	bl	8084544 <__aeabi_atexit>
  return _usbserial1;
}
 8084164:	4802      	ldr	r0, [pc, #8]	; (8084170 <_Z17_fetch_usbserial1v+0x40>)
 8084166:	b006      	add	sp, #24
 8084168:	bd10      	pop	{r4, pc}
 808416a:	bf00      	nop
 808416c:	20000698 	.word	0x20000698
 8084170:	20000720 	.word	0x20000720
 8084174:	20000134 	.word	0x20000134
 8084178:	08083fe5 	.word	0x08083fe5

0808417c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 808417c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 808417e:	4b18      	ldr	r3, [pc, #96]	; (80841e0 <serialEventRun+0x64>)
 8084180:	b133      	cbz	r3, 8084190 <serialEventRun+0x14>
 8084182:	f7ff ff99 	bl	80840b8 <_Z16_fetch_usbserialv>
 8084186:	6803      	ldr	r3, [r0, #0]
 8084188:	691b      	ldr	r3, [r3, #16]
 808418a:	4798      	blx	r3
 808418c:	2800      	cmp	r0, #0
 808418e:	dc1e      	bgt.n	80841ce <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8084190:	4b14      	ldr	r3, [pc, #80]	; (80841e4 <serialEventRun+0x68>)
 8084192:	b133      	cbz	r3, 80841a2 <serialEventRun+0x26>
 8084194:	f7ff fefe 	bl	8083f94 <_Z22__fetch_global_Serial1v>
 8084198:	6803      	ldr	r3, [r0, #0]
 808419a:	691b      	ldr	r3, [r3, #16]
 808419c:	4798      	blx	r3
 808419e:	2800      	cmp	r0, #0
 80841a0:	dc18      	bgt.n	80841d4 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80841a2:	4b11      	ldr	r3, [pc, #68]	; (80841e8 <serialEventRun+0x6c>)
 80841a4:	b10b      	cbz	r3, 80841aa <serialEventRun+0x2e>
 80841a6:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 80841aa:	4b10      	ldr	r3, [pc, #64]	; (80841ec <serialEventRun+0x70>)
 80841ac:	b10b      	cbz	r3, 80841b2 <serialEventRun+0x36>
 80841ae:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 80841b2:	4b0f      	ldr	r3, [pc, #60]	; (80841f0 <serialEventRun+0x74>)
 80841b4:	b10b      	cbz	r3, 80841ba <serialEventRun+0x3e>
 80841b6:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80841ba:	4b0e      	ldr	r3, [pc, #56]	; (80841f4 <serialEventRun+0x78>)
 80841bc:	b17b      	cbz	r3, 80841de <serialEventRun+0x62>
 80841be:	f7ff ffb7 	bl	8084130 <_Z17_fetch_usbserial1v>
 80841c2:	6803      	ldr	r3, [r0, #0]
 80841c4:	691b      	ldr	r3, [r3, #16]
 80841c6:	4798      	blx	r3
 80841c8:	2800      	cmp	r0, #0
 80841ca:	dc06      	bgt.n	80841da <serialEventRun+0x5e>
 80841cc:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80841ce:	f3af 8000 	nop.w
 80841d2:	e7dd      	b.n	8084190 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80841d4:	f3af 8000 	nop.w
 80841d8:	e7e3      	b.n	80841a2 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80841da:	f3af 8000 	nop.w
 80841de:	bd08      	pop	{r3, pc}
	...

080841f8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80841f8:	b508      	push	{r3, lr}
	serialEventRun();
 80841fa:	f7ff ffbf 	bl	808417c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80841fe:	f7fe f98b 	bl	8082518 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8084202:	4b01      	ldr	r3, [pc, #4]	; (8084208 <_post_loop+0x10>)
 8084204:	6018      	str	r0, [r3, #0]
 8084206:	bd08      	pop	{r3, pc}
 8084208:	20000850 	.word	0x20000850

0808420c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 808420c:	4802      	ldr	r0, [pc, #8]	; (8084218 <_Z33system_initialize_user_backup_ramv+0xc>)
 808420e:	4a03      	ldr	r2, [pc, #12]	; (808421c <_Z33system_initialize_user_backup_ramv+0x10>)
 8084210:	4903      	ldr	r1, [pc, #12]	; (8084220 <_Z33system_initialize_user_backup_ramv+0x14>)
 8084212:	1a12      	subs	r2, r2, r0
 8084214:	f001 bb84 	b.w	8085920 <memcpy>
 8084218:	40024000 	.word	0x40024000
 808421c:	40024804 	.word	0x40024804
 8084220:	08086e90 	.word	0x08086e90

08084224 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8084224:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8084226:	2300      	movs	r3, #0
 8084228:	9300      	str	r3, [sp, #0]
 808422a:	461a      	mov	r2, r3
 808422c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8084230:	f7fe fb2e 	bl	8082890 <system_ctrl_set_result>
}
 8084234:	b003      	add	sp, #12
 8084236:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808423c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 808423c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 808423e:	8843      	ldrh	r3, [r0, #2]
 8084240:	2b0a      	cmp	r3, #10
 8084242:	d008      	beq.n	8084256 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8084244:	2b50      	cmp	r3, #80	; 0x50
 8084246:	d109      	bne.n	808425c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8084248:	4b09      	ldr	r3, [pc, #36]	; (8084270 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808424a:	681b      	ldr	r3, [r3, #0]
 808424c:	b13b      	cbz	r3, 808425e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 808424e:	b003      	add	sp, #12
 8084250:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8084254:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8084256:	f7ff ffe5 	bl	8084224 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 808425a:	e006      	b.n	808426a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808425c:	2300      	movs	r3, #0
 808425e:	9300      	str	r3, [sp, #0]
 8084260:	461a      	mov	r2, r3
 8084262:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8084266:	f7fe fb13 	bl	8082890 <system_ctrl_set_result>
        break;
    }
}
 808426a:	b003      	add	sp, #12
 808426c:	f85d fb04 	ldr.w	pc, [sp], #4
 8084270:	20000838 	.word	0x20000838

08084274 <module_user_init_hook>:

void module_user_init_hook()
{
 8084274:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8084276:	4c10      	ldr	r4, [pc, #64]	; (80842b8 <module_user_init_hook+0x44>)
 8084278:	4d10      	ldr	r5, [pc, #64]	; (80842bc <module_user_init_hook+0x48>)
 808427a:	6823      	ldr	r3, [r4, #0]
 808427c:	42ab      	cmp	r3, r5
 808427e:	4b10      	ldr	r3, [pc, #64]	; (80842c0 <module_user_init_hook+0x4c>)
 8084280:	bf0c      	ite	eq
 8084282:	2201      	moveq	r2, #1
 8084284:	2200      	movne	r2, #0
 8084286:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8084288:	d002      	beq.n	8084290 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 808428a:	f7ff ffbf 	bl	808420c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808428e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8084290:	f7fe f92a 	bl	80824e8 <HAL_RNG_GetRandomNumber>
 8084294:	4604      	mov	r4, r0
    srand(seed);
 8084296:	f001 fb71 	bl	808597c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808429a:	4b0a      	ldr	r3, [pc, #40]	; (80842c4 <module_user_init_hook+0x50>)
 808429c:	b113      	cbz	r3, 80842a4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 808429e:	4620      	mov	r0, r4
 80842a0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80842a4:	2100      	movs	r1, #0
 80842a6:	4807      	ldr	r0, [pc, #28]	; (80842c4 <module_user_init_hook+0x50>)
 80842a8:	f7fe fb68 	bl	808297c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80842ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80842b0:	2100      	movs	r1, #0
 80842b2:	4805      	ldr	r0, [pc, #20]	; (80842c8 <module_user_init_hook+0x54>)
 80842b4:	f7fe bae2 	b.w	808287c <system_ctrl_set_app_request_handler>
 80842b8:	40024800 	.word	0x40024800
 80842bc:	9a271c1e 	.word	0x9a271c1e
 80842c0:	2000083c 	.word	0x2000083c
 80842c4:	00000000 	.word	0x00000000
 80842c8:	0808423d 	.word	0x0808423d

080842cc <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 80842cc:	b508      	push	{r3, lr}
 80842ce:	4b02      	ldr	r3, [pc, #8]	; (80842d8 <spark_protocol_instance+0xc>)
 80842d0:	681b      	ldr	r3, [r3, #0]
 80842d2:	681b      	ldr	r3, [r3, #0]
 80842d4:	9301      	str	r3, [sp, #4]
 80842d6:	bd08      	pop	{r3, pc}
 80842d8:	0802019c 	.word	0x0802019c

080842dc <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 80842dc:	b508      	push	{r3, lr}
 80842de:	4b02      	ldr	r3, [pc, #8]	; (80842e8 <spark_protocol_set_product_id+0xc>)
 80842e0:	681b      	ldr	r3, [r3, #0]
 80842e2:	685b      	ldr	r3, [r3, #4]
 80842e4:	9301      	str	r3, [sp, #4]
 80842e6:	bd08      	pop	{r3, pc}
 80842e8:	0802019c 	.word	0x0802019c

080842ec <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 80842ec:	b508      	push	{r3, lr}
 80842ee:	4b02      	ldr	r3, [pc, #8]	; (80842f8 <spark_protocol_set_product_firmware_version+0xc>)
 80842f0:	681b      	ldr	r3, [r3, #0]
 80842f2:	689b      	ldr	r3, [r3, #8]
 80842f4:	9301      	str	r3, [sp, #4]
 80842f6:	bd08      	pop	{r3, pc}
 80842f8:	0802019c 	.word	0x0802019c

080842fc <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80842fc:	b510      	push	{r4, lr}
 80842fe:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 8084300:	6880      	ldr	r0, [r0, #8]
 8084302:	b108      	cbz	r0, 8084308 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 8084304:	f7fe f8c8 	bl	8082498 <os_mutex_recursive_destroy>
 8084308:	4620      	mov	r0, r4
 808430a:	bd10      	pop	{r4, pc}

0808430c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 808430c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 808430e:	4e1a      	ldr	r6, [pc, #104]	; (8084378 <pinAvailable+0x6c>)
 8084310:	4604      	mov	r4, r0
 8084312:	6831      	ldr	r1, [r6, #0]
 8084314:	f011 0501 	ands.w	r5, r1, #1
 8084318:	d10f      	bne.n	808433a <pinAvailable+0x2e>
 808431a:	4630      	mov	r0, r6
 808431c:	f7fb fece 	bl	80800bc <__cxa_guard_acquire>
 8084320:	b158      	cbz	r0, 808433a <pinAvailable+0x2e>
 8084322:	4629      	mov	r1, r5
 8084324:	4815      	ldr	r0, [pc, #84]	; (808437c <pinAvailable+0x70>)
 8084326:	f7ff faeb 	bl	8083900 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808432a:	4630      	mov	r0, r6
 808432c:	f7fb fecb 	bl	80800c6 <__cxa_guard_release>
 8084330:	4a13      	ldr	r2, [pc, #76]	; (8084380 <pinAvailable+0x74>)
 8084332:	4914      	ldr	r1, [pc, #80]	; (8084384 <pinAvailable+0x78>)
 8084334:	4811      	ldr	r0, [pc, #68]	; (808437c <pinAvailable+0x70>)
 8084336:	f000 f905 	bl	8084544 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 808433a:	4810      	ldr	r0, [pc, #64]	; (808437c <pinAvailable+0x70>)
 808433c:	f7ff faef 	bl	808391e <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8084340:	b128      	cbz	r0, 808434e <pinAvailable+0x42>
 8084342:	f1a4 030d 	sub.w	r3, r4, #13
 8084346:	2b02      	cmp	r3, #2
 8084348:	d801      	bhi.n	808434e <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 808434a:	2000      	movs	r0, #0
 808434c:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 808434e:	f000 f895 	bl	808447c <_Z19__fetch_global_Wirev>
 8084352:	f7ff f8aa 	bl	80834aa <_ZN7TwoWire9isEnabledEv>
 8084356:	b108      	cbz	r0, 808435c <pinAvailable+0x50>
 8084358:	2c01      	cmp	r4, #1
 808435a:	d9f6      	bls.n	808434a <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 808435c:	f7ff fe1a 	bl	8083f94 <_Z22__fetch_global_Serial1v>
 8084360:	f7ff fe14 	bl	8083f8c <_ZN11USARTSerial9isEnabledEv>
 8084364:	b118      	cbz	r0, 808436e <pinAvailable+0x62>
 8084366:	f1a4 0312 	sub.w	r3, r4, #18
 808436a:	2b01      	cmp	r3, #1
 808436c:	d9ed      	bls.n	808434a <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 808436e:	2c2e      	cmp	r4, #46	; 0x2e
 8084370:	bf8c      	ite	hi
 8084372:	2000      	movhi	r0, #0
 8084374:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8084376:	bd70      	pop	{r4, r5, r6, pc}
 8084378:	20000840 	.word	0x20000840
 808437c:	20000844 	.word	0x20000844
 8084380:	20000134 	.word	0x20000134
 8084384:	080842fd 	.word	0x080842fd

08084388 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8084388:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 808438a:	b538      	push	{r3, r4, r5, lr}
 808438c:	4604      	mov	r4, r0
 808438e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8084390:	d80a      	bhi.n	80843a8 <pinMode+0x20>
 8084392:	29ff      	cmp	r1, #255	; 0xff
 8084394:	d008      	beq.n	80843a8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8084396:	f7ff ffb9 	bl	808430c <pinAvailable>
 808439a:	b128      	cbz	r0, 80843a8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808439c:	4629      	mov	r1, r5
 808439e:	4620      	mov	r0, r4
}
 80843a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80843a4:	f7fe b8e8 	b.w	8082578 <HAL_Pin_Mode>
 80843a8:	bd38      	pop	{r3, r4, r5, pc}

080843aa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80843aa:	b538      	push	{r3, r4, r5, lr}
 80843ac:	4604      	mov	r4, r0
 80843ae:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80843b0:	f7fe f8ea 	bl	8082588 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80843b4:	28ff      	cmp	r0, #255	; 0xff
 80843b6:	d010      	beq.n	80843da <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80843b8:	2806      	cmp	r0, #6
 80843ba:	d804      	bhi.n	80843c6 <digitalWrite+0x1c>
 80843bc:	234d      	movs	r3, #77	; 0x4d
 80843be:	fa23 f000 	lsr.w	r0, r3, r0
 80843c2:	07c3      	lsls	r3, r0, #31
 80843c4:	d409      	bmi.n	80843da <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80843c6:	4620      	mov	r0, r4
 80843c8:	f7ff ffa0 	bl	808430c <pinAvailable>
 80843cc:	b128      	cbz	r0, 80843da <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80843ce:	4629      	mov	r1, r5
 80843d0:	4620      	mov	r0, r4
}
 80843d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80843d6:	f7fe b8df 	b.w	8082598 <HAL_GPIO_Write>
 80843da:	bd38      	pop	{r3, r4, r5, pc}

080843dc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80843dc:	b510      	push	{r4, lr}
 80843de:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80843e0:	f7fe f8d2 	bl	8082588 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80843e4:	3804      	subs	r0, #4
 80843e6:	b2c0      	uxtb	r0, r0
 80843e8:	2801      	cmp	r0, #1
 80843ea:	d908      	bls.n	80843fe <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80843ec:	4620      	mov	r0, r4
 80843ee:	f7ff ff8d 	bl	808430c <pinAvailable>
 80843f2:	b120      	cbz	r0, 80843fe <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80843f4:	4620      	mov	r0, r4
}
 80843f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80843fa:	f7fe b8d5 	b.w	80825a8 <HAL_GPIO_Read>
}
 80843fe:	2000      	movs	r0, #0
 8084400:	bd10      	pop	{r4, pc}

08084402 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8084402:	b510      	push	{r4, lr}
 8084404:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8084406:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8084408:	bf9c      	itt	ls
 808440a:	340a      	addls	r4, #10
 808440c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808440e:	4620      	mov	r0, r4
 8084410:	f7ff ff7c 	bl	808430c <pinAvailable>
 8084414:	b150      	cbz	r0, 808442c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8084416:	2103      	movs	r1, #3
 8084418:	4620      	mov	r0, r4
 808441a:	f7fe f8a5 	bl	8082568 <HAL_Validate_Pin_Function>
 808441e:	2803      	cmp	r0, #3
 8084420:	d104      	bne.n	808442c <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8084422:	4620      	mov	r0, r4
}
 8084424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8084428:	f7fe b8d6 	b.w	80825d8 <HAL_ADC_Read>
}
 808442c:	2000      	movs	r0, #0
 808442e:	bd10      	pop	{r4, pc}

08084430 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:

#ifndef SPARK_WIRING_NO_I2C

namespace {

HAL_I2C_Config defaultWireConfig() {
 8084430:	b570      	push	{r4, r5, r6, lr}
 8084432:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8084434:	2514      	movs	r5, #20
 8084436:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8084438:	4e09      	ldr	r6, [pc, #36]	; (8084460 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 808443a:	2100      	movs	r1, #0
 808443c:	f001 fa96 	bl	808596c <memset>
 8084440:	8025      	strh	r5, [r4, #0]
 8084442:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8084444:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8084446:	60a5      	str	r5, [r4, #8]
 8084448:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808444a:	4628      	mov	r0, r5
 808444c:	f000 f899 	bl	8084582 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8084450:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8084452:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8084454:	4628      	mov	r0, r5
 8084456:	f000 f894 	bl	8084582 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 808445a:	60e0      	str	r0, [r4, #12]

	return config;
}
 808445c:	4620      	mov	r0, r4
 808445e:	bd70      	pop	{r4, r5, r6, pc}
 8084460:	08086bf4 	.word	0x08086bf4

08084464 <_Z17acquireWireBufferv>:
 8084464:	b510      	push	{r4, lr}
 8084466:	4604      	mov	r4, r0
 8084468:	f7ff ffe2 	bl	8084430 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 808446c:	4620      	mov	r0, r4
 808446e:	bd10      	pop	{r4, pc}

08084470 <_Z18acquireWire3Bufferv>:
}
#endif

#if Wiring_Wire3
HAL_I2C_Config __attribute__((weak)) acquireWire3Buffer()
{
 8084470:	b510      	push	{r4, lr}
 8084472:	4604      	mov	r4, r0
	return defaultWireConfig();
 8084474:	f7ff ffdc 	bl	8084430 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8084478:	4620      	mov	r0, r4
 808447a:	bd10      	pop	{r4, pc}

0808447c <_Z19__fetch_global_Wirev>:
#endif

TwoWire& __fetch_global_Wire()
{
 808447c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808447e:	4d0e      	ldr	r5, [pc, #56]	; (80844b8 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 8084480:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8084482:	6829      	ldr	r1, [r5, #0]
 8084484:	f011 0401 	ands.w	r4, r1, #1
 8084488:	d113      	bne.n	80844b2 <_Z19__fetch_global_Wirev+0x36>
 808448a:	4628      	mov	r0, r5
 808448c:	f7fb fe16 	bl	80800bc <__cxa_guard_acquire>
 8084490:	b178      	cbz	r0, 80844b2 <_Z19__fetch_global_Wirev+0x36>
 8084492:	a801      	add	r0, sp, #4
 8084494:	f7ff ffe6 	bl	8084464 <_Z17acquireWireBufferv>
 8084498:	aa01      	add	r2, sp, #4
 808449a:	4621      	mov	r1, r4
 808449c:	4807      	ldr	r0, [pc, #28]	; (80844bc <_Z19__fetch_global_Wirev+0x40>)
 808449e:	f7fe ffb3 	bl	8083408 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80844a2:	4628      	mov	r0, r5
 80844a4:	f7fb fe0f 	bl	80800c6 <__cxa_guard_release>
 80844a8:	4a05      	ldr	r2, [pc, #20]	; (80844c0 <_Z19__fetch_global_Wirev+0x44>)
 80844aa:	4906      	ldr	r1, [pc, #24]	; (80844c4 <_Z19__fetch_global_Wirev+0x48>)
 80844ac:	4803      	ldr	r0, [pc, #12]	; (80844bc <_Z19__fetch_global_Wirev+0x40>)
 80844ae:	f000 f849 	bl	8084544 <__aeabi_atexit>
	return wire;
}
 80844b2:	4802      	ldr	r0, [pc, #8]	; (80844bc <_Z19__fetch_global_Wirev+0x40>)
 80844b4:	b007      	add	sp, #28
 80844b6:	bd30      	pop	{r4, r5, pc}
 80844b8:	20000854 	.word	0x20000854
 80844bc:	2000086c 	.word	0x2000086c
 80844c0:	20000134 	.word	0x20000134
 80844c4:	080833b1 	.word	0x080833b1

080844c8 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 80844c8:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 80844ca:	4c0e      	ldr	r4, [pc, #56]	; (8084504 <_Z20__fetch_global_Wire3v+0x3c>)
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 80844cc:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 80844ce:	6823      	ldr	r3, [r4, #0]
 80844d0:	07db      	lsls	r3, r3, #31
 80844d2:	d413      	bmi.n	80844fc <_Z20__fetch_global_Wire3v+0x34>
 80844d4:	4620      	mov	r0, r4
 80844d6:	f7fb fdf1 	bl	80800bc <__cxa_guard_acquire>
 80844da:	b178      	cbz	r0, 80844fc <_Z20__fetch_global_Wire3v+0x34>
 80844dc:	a801      	add	r0, sp, #4
 80844de:	f7ff ffc7 	bl	8084470 <_Z18acquireWire3Bufferv>
 80844e2:	aa01      	add	r2, sp, #4
 80844e4:	2102      	movs	r1, #2
 80844e6:	4808      	ldr	r0, [pc, #32]	; (8084508 <_Z20__fetch_global_Wire3v+0x40>)
 80844e8:	f7fe ff8e 	bl	8083408 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80844ec:	4620      	mov	r0, r4
 80844ee:	f7fb fdea 	bl	80800c6 <__cxa_guard_release>
 80844f2:	4a06      	ldr	r2, [pc, #24]	; (808450c <_Z20__fetch_global_Wire3v+0x44>)
 80844f4:	4906      	ldr	r1, [pc, #24]	; (8084510 <_Z20__fetch_global_Wire3v+0x48>)
 80844f6:	4804      	ldr	r0, [pc, #16]	; (8084508 <_Z20__fetch_global_Wire3v+0x40>)
 80844f8:	f000 f824 	bl	8084544 <__aeabi_atexit>
	return wire;
}
 80844fc:	4802      	ldr	r0, [pc, #8]	; (8084508 <_Z20__fetch_global_Wire3v+0x40>)
 80844fe:	b006      	add	sp, #24
 8084500:	bd10      	pop	{r4, pc}
 8084502:	bf00      	nop
 8084504:	20000880 	.word	0x20000880
 8084508:	20000858 	.word	0x20000858
 808450c:	20000134 	.word	0x20000134
 8084510:	080833b1 	.word	0x080833b1

08084514 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8084514:	b513      	push	{r0, r1, r4, lr}
 8084516:	4c08      	ldr	r4, [pc, #32]	; (8084538 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8084518:	2300      	movs	r3, #0
 808451a:	461a      	mov	r2, r3
 808451c:	4619      	mov	r1, r3
 808451e:	9300      	str	r3, [sp, #0]
 8084520:	4620      	mov	r0, r4
 8084522:	f7ff f85f 	bl	80835e4 <_ZN9IPAddressC1Ehhhh>
 8084526:	4620      	mov	r0, r4
 8084528:	4a04      	ldr	r2, [pc, #16]	; (808453c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808452a:	4905      	ldr	r1, [pc, #20]	; (8084540 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 808452c:	b002      	add	sp, #8
 808452e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8084532:	f000 b807 	b.w	8084544 <__aeabi_atexit>
 8084536:	bf00      	nop
 8084538:	20000884 	.word	0x20000884
 808453c:	20000134 	.word	0x20000134
 8084540:	0808355d 	.word	0x0808355d

08084544 <__aeabi_atexit>:
 8084544:	460b      	mov	r3, r1
 8084546:	4601      	mov	r1, r0
 8084548:	4618      	mov	r0, r3
 808454a:	f001 b8e3 	b.w	8085714 <__cxa_atexit>

0808454e <_ZdlPvj>:
 808454e:	f7fb bda8 	b.w	80800a2 <_ZdlPv>
	...

08084554 <_ZSt15get_new_handlerv>:
 8084554:	4b02      	ldr	r3, [pc, #8]	; (8084560 <_ZSt15get_new_handlerv+0xc>)
 8084556:	6818      	ldr	r0, [r3, #0]
 8084558:	f3bf 8f5f 	dmb	sy
 808455c:	4770      	bx	lr
 808455e:	bf00      	nop
 8084560:	2000088c 	.word	0x2000088c

08084564 <_ZnwjRKSt9nothrow_t>:
 8084564:	b510      	push	{r4, lr}
 8084566:	2800      	cmp	r0, #0
 8084568:	bf14      	ite	ne
 808456a:	4604      	movne	r4, r0
 808456c:	2401      	moveq	r4, #1
 808456e:	4620      	mov	r0, r4
 8084570:	f7fe fa5c 	bl	8082a2c <malloc>
 8084574:	b920      	cbnz	r0, 8084580 <_ZnwjRKSt9nothrow_t+0x1c>
 8084576:	f7ff ffed 	bl	8084554 <_ZSt15get_new_handlerv>
 808457a:	b108      	cbz	r0, 8084580 <_ZnwjRKSt9nothrow_t+0x1c>
 808457c:	4780      	blx	r0
 808457e:	e7f6      	b.n	808456e <_ZnwjRKSt9nothrow_t+0xa>
 8084580:	bd10      	pop	{r4, pc}

08084582 <_ZnajRKSt9nothrow_t>:
 8084582:	f7ff bfef 	b.w	8084564 <_ZnwjRKSt9nothrow_t>

08084586 <_ZSt25__throw_bad_function_callv>:
 8084586:	b508      	push	{r3, lr}
 8084588:	f7fe fa80 	bl	8082a8c <abort>

0808458c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 808458c:	4b24      	ldr	r3, [pc, #144]	; (8084620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 808458e:	681a      	ldr	r2, [r3, #0]
 8084590:	07d0      	lsls	r0, r2, #31
 8084592:	bf5c      	itt	pl
 8084594:	2201      	movpl	r2, #1
 8084596:	601a      	strpl	r2, [r3, #0]
 8084598:	4b22      	ldr	r3, [pc, #136]	; (8084624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 808459a:	681a      	ldr	r2, [r3, #0]
 808459c:	07d1      	lsls	r1, r2, #31
 808459e:	bf5c      	itt	pl
 80845a0:	2201      	movpl	r2, #1
 80845a2:	601a      	strpl	r2, [r3, #0]
 80845a4:	4b20      	ldr	r3, [pc, #128]	; (8084628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80845a6:	681a      	ldr	r2, [r3, #0]
 80845a8:	07d2      	lsls	r2, r2, #31
 80845aa:	bf5c      	itt	pl
 80845ac:	2201      	movpl	r2, #1
 80845ae:	601a      	strpl	r2, [r3, #0]
 80845b0:	4b1e      	ldr	r3, [pc, #120]	; (808462c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80845b2:	681a      	ldr	r2, [r3, #0]
 80845b4:	07d0      	lsls	r0, r2, #31
 80845b6:	bf5c      	itt	pl
 80845b8:	2201      	movpl	r2, #1
 80845ba:	601a      	strpl	r2, [r3, #0]
 80845bc:	4b1c      	ldr	r3, [pc, #112]	; (8084630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80845be:	681a      	ldr	r2, [r3, #0]
 80845c0:	07d1      	lsls	r1, r2, #31
 80845c2:	bf5c      	itt	pl
 80845c4:	2201      	movpl	r2, #1
 80845c6:	601a      	strpl	r2, [r3, #0]
 80845c8:	4b1a      	ldr	r3, [pc, #104]	; (8084634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80845ca:	681a      	ldr	r2, [r3, #0]
 80845cc:	07d2      	lsls	r2, r2, #31
 80845ce:	bf5c      	itt	pl
 80845d0:	2201      	movpl	r2, #1
 80845d2:	601a      	strpl	r2, [r3, #0]
 80845d4:	4b18      	ldr	r3, [pc, #96]	; (8084638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80845d6:	681a      	ldr	r2, [r3, #0]
 80845d8:	07d0      	lsls	r0, r2, #31
 80845da:	bf5c      	itt	pl
 80845dc:	2201      	movpl	r2, #1
 80845de:	601a      	strpl	r2, [r3, #0]
 80845e0:	4b16      	ldr	r3, [pc, #88]	; (808463c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80845e2:	681a      	ldr	r2, [r3, #0]
 80845e4:	07d1      	lsls	r1, r2, #31
 80845e6:	bf5c      	itt	pl
 80845e8:	2201      	movpl	r2, #1
 80845ea:	601a      	strpl	r2, [r3, #0]
 80845ec:	4b14      	ldr	r3, [pc, #80]	; (8084640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80845ee:	681a      	ldr	r2, [r3, #0]
 80845f0:	07d2      	lsls	r2, r2, #31
 80845f2:	bf5c      	itt	pl
 80845f4:	2201      	movpl	r2, #1
 80845f6:	601a      	strpl	r2, [r3, #0]
 80845f8:	4b12      	ldr	r3, [pc, #72]	; (8084644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80845fa:	681a      	ldr	r2, [r3, #0]
 80845fc:	07d0      	lsls	r0, r2, #31
 80845fe:	bf5c      	itt	pl
 8084600:	2201      	movpl	r2, #1
 8084602:	601a      	strpl	r2, [r3, #0]
 8084604:	4b10      	ldr	r3, [pc, #64]	; (8084648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8084606:	681a      	ldr	r2, [r3, #0]
 8084608:	07d1      	lsls	r1, r2, #31
 808460a:	bf5c      	itt	pl
 808460c:	2201      	movpl	r2, #1
 808460e:	601a      	strpl	r2, [r3, #0]
 8084610:	4b0e      	ldr	r3, [pc, #56]	; (808464c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8084612:	681a      	ldr	r2, [r3, #0]
 8084614:	07d2      	lsls	r2, r2, #31
 8084616:	bf5c      	itt	pl
 8084618:	2201      	movpl	r2, #1
 808461a:	601a      	strpl	r2, [r3, #0]
 808461c:	4770      	bx	lr
 808461e:	bf00      	nop
 8084620:	200008bc 	.word	0x200008bc
 8084624:	200008b8 	.word	0x200008b8
 8084628:	200008b4 	.word	0x200008b4
 808462c:	200008b0 	.word	0x200008b0
 8084630:	200008ac 	.word	0x200008ac
 8084634:	200008a8 	.word	0x200008a8
 8084638:	200008a4 	.word	0x200008a4
 808463c:	200008a0 	.word	0x200008a0
 8084640:	2000089c 	.word	0x2000089c
 8084644:	20000898 	.word	0x20000898
 8084648:	20000894 	.word	0x20000894
 808464c:	20000890 	.word	0x20000890

08084650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8084650:	4b18      	ldr	r3, [pc, #96]	; (80846b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8084652:	681a      	ldr	r2, [r3, #0]
 8084654:	07d1      	lsls	r1, r2, #31
 8084656:	bf5c      	itt	pl
 8084658:	2201      	movpl	r2, #1
 808465a:	601a      	strpl	r2, [r3, #0]
 808465c:	4b16      	ldr	r3, [pc, #88]	; (80846b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808465e:	681a      	ldr	r2, [r3, #0]
 8084660:	07d2      	lsls	r2, r2, #31
 8084662:	bf5c      	itt	pl
 8084664:	2201      	movpl	r2, #1
 8084666:	601a      	strpl	r2, [r3, #0]
 8084668:	4b14      	ldr	r3, [pc, #80]	; (80846bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808466a:	681a      	ldr	r2, [r3, #0]
 808466c:	07d0      	lsls	r0, r2, #31
 808466e:	bf5c      	itt	pl
 8084670:	2201      	movpl	r2, #1
 8084672:	601a      	strpl	r2, [r3, #0]
 8084674:	4b12      	ldr	r3, [pc, #72]	; (80846c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8084676:	681a      	ldr	r2, [r3, #0]
 8084678:	07d1      	lsls	r1, r2, #31
 808467a:	bf5c      	itt	pl
 808467c:	2201      	movpl	r2, #1
 808467e:	601a      	strpl	r2, [r3, #0]
 8084680:	4b10      	ldr	r3, [pc, #64]	; (80846c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8084682:	681a      	ldr	r2, [r3, #0]
 8084684:	07d2      	lsls	r2, r2, #31
 8084686:	bf5c      	itt	pl
 8084688:	2201      	movpl	r2, #1
 808468a:	601a      	strpl	r2, [r3, #0]
 808468c:	4b0e      	ldr	r3, [pc, #56]	; (80846c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808468e:	681a      	ldr	r2, [r3, #0]
 8084690:	07d0      	lsls	r0, r2, #31
 8084692:	bf5c      	itt	pl
 8084694:	2201      	movpl	r2, #1
 8084696:	601a      	strpl	r2, [r3, #0]
 8084698:	4b0c      	ldr	r3, [pc, #48]	; (80846cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808469a:	681a      	ldr	r2, [r3, #0]
 808469c:	07d1      	lsls	r1, r2, #31
 808469e:	bf5c      	itt	pl
 80846a0:	2201      	movpl	r2, #1
 80846a2:	601a      	strpl	r2, [r3, #0]
 80846a4:	4b0a      	ldr	r3, [pc, #40]	; (80846d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80846a6:	681a      	ldr	r2, [r3, #0]
 80846a8:	07d2      	lsls	r2, r2, #31
 80846aa:	bf5c      	itt	pl
 80846ac:	2201      	movpl	r2, #1
 80846ae:	601a      	strpl	r2, [r3, #0]
 80846b0:	4770      	bx	lr
 80846b2:	bf00      	nop
 80846b4:	200008dc 	.word	0x200008dc
 80846b8:	200008d8 	.word	0x200008d8
 80846bc:	200008d4 	.word	0x200008d4
 80846c0:	200008d0 	.word	0x200008d0
 80846c4:	200008cc 	.word	0x200008cc
 80846c8:	200008c8 	.word	0x200008c8
 80846cc:	200008c4 	.word	0x200008c4
 80846d0:	200008c0 	.word	0x200008c0

080846d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80846d4:	4b18      	ldr	r3, [pc, #96]	; (8084738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80846d6:	681a      	ldr	r2, [r3, #0]
 80846d8:	07d1      	lsls	r1, r2, #31
 80846da:	bf5c      	itt	pl
 80846dc:	2201      	movpl	r2, #1
 80846de:	601a      	strpl	r2, [r3, #0]
 80846e0:	4b16      	ldr	r3, [pc, #88]	; (808473c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80846e2:	681a      	ldr	r2, [r3, #0]
 80846e4:	07d2      	lsls	r2, r2, #31
 80846e6:	bf5c      	itt	pl
 80846e8:	2201      	movpl	r2, #1
 80846ea:	601a      	strpl	r2, [r3, #0]
 80846ec:	4b14      	ldr	r3, [pc, #80]	; (8084740 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80846ee:	681a      	ldr	r2, [r3, #0]
 80846f0:	07d0      	lsls	r0, r2, #31
 80846f2:	bf5c      	itt	pl
 80846f4:	2201      	movpl	r2, #1
 80846f6:	601a      	strpl	r2, [r3, #0]
 80846f8:	4b12      	ldr	r3, [pc, #72]	; (8084744 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80846fa:	681a      	ldr	r2, [r3, #0]
 80846fc:	07d1      	lsls	r1, r2, #31
 80846fe:	bf5c      	itt	pl
 8084700:	2201      	movpl	r2, #1
 8084702:	601a      	strpl	r2, [r3, #0]
 8084704:	4b10      	ldr	r3, [pc, #64]	; (8084748 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8084706:	681a      	ldr	r2, [r3, #0]
 8084708:	07d2      	lsls	r2, r2, #31
 808470a:	bf5c      	itt	pl
 808470c:	2201      	movpl	r2, #1
 808470e:	601a      	strpl	r2, [r3, #0]
 8084710:	4b0e      	ldr	r3, [pc, #56]	; (808474c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8084712:	681a      	ldr	r2, [r3, #0]
 8084714:	07d0      	lsls	r0, r2, #31
 8084716:	bf5c      	itt	pl
 8084718:	2201      	movpl	r2, #1
 808471a:	601a      	strpl	r2, [r3, #0]
 808471c:	4b0c      	ldr	r3, [pc, #48]	; (8084750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808471e:	681a      	ldr	r2, [r3, #0]
 8084720:	07d1      	lsls	r1, r2, #31
 8084722:	bf5c      	itt	pl
 8084724:	2201      	movpl	r2, #1
 8084726:	601a      	strpl	r2, [r3, #0]
 8084728:	4b0a      	ldr	r3, [pc, #40]	; (8084754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808472a:	681a      	ldr	r2, [r3, #0]
 808472c:	07d2      	lsls	r2, r2, #31
 808472e:	bf5c      	itt	pl
 8084730:	2201      	movpl	r2, #1
 8084732:	601a      	strpl	r2, [r3, #0]
 8084734:	4770      	bx	lr
 8084736:	bf00      	nop
 8084738:	200008fc 	.word	0x200008fc
 808473c:	200008f8 	.word	0x200008f8
 8084740:	200008f4 	.word	0x200008f4
 8084744:	200008f0 	.word	0x200008f0
 8084748:	200008ec 	.word	0x200008ec
 808474c:	200008e8 	.word	0x200008e8
 8084750:	200008e4 	.word	0x200008e4
 8084754:	200008e0 	.word	0x200008e0

08084758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8084758:	4b24      	ldr	r3, [pc, #144]	; (80847ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 808475a:	681a      	ldr	r2, [r3, #0]
 808475c:	07d0      	lsls	r0, r2, #31
 808475e:	bf5c      	itt	pl
 8084760:	2201      	movpl	r2, #1
 8084762:	601a      	strpl	r2, [r3, #0]
 8084764:	4b22      	ldr	r3, [pc, #136]	; (80847f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8084766:	681a      	ldr	r2, [r3, #0]
 8084768:	07d1      	lsls	r1, r2, #31
 808476a:	bf5c      	itt	pl
 808476c:	2201      	movpl	r2, #1
 808476e:	601a      	strpl	r2, [r3, #0]
 8084770:	4b20      	ldr	r3, [pc, #128]	; (80847f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8084772:	681a      	ldr	r2, [r3, #0]
 8084774:	07d2      	lsls	r2, r2, #31
 8084776:	bf5c      	itt	pl
 8084778:	2201      	movpl	r2, #1
 808477a:	601a      	strpl	r2, [r3, #0]
 808477c:	4b1e      	ldr	r3, [pc, #120]	; (80847f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 808477e:	681a      	ldr	r2, [r3, #0]
 8084780:	07d0      	lsls	r0, r2, #31
 8084782:	bf5c      	itt	pl
 8084784:	2201      	movpl	r2, #1
 8084786:	601a      	strpl	r2, [r3, #0]
 8084788:	4b1c      	ldr	r3, [pc, #112]	; (80847fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 808478a:	681a      	ldr	r2, [r3, #0]
 808478c:	07d1      	lsls	r1, r2, #31
 808478e:	bf5c      	itt	pl
 8084790:	2201      	movpl	r2, #1
 8084792:	601a      	strpl	r2, [r3, #0]
 8084794:	4b1a      	ldr	r3, [pc, #104]	; (8084800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8084796:	681a      	ldr	r2, [r3, #0]
 8084798:	07d2      	lsls	r2, r2, #31
 808479a:	bf5c      	itt	pl
 808479c:	2201      	movpl	r2, #1
 808479e:	601a      	strpl	r2, [r3, #0]
 80847a0:	4b18      	ldr	r3, [pc, #96]	; (8084804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80847a2:	681a      	ldr	r2, [r3, #0]
 80847a4:	07d0      	lsls	r0, r2, #31
 80847a6:	bf5c      	itt	pl
 80847a8:	2201      	movpl	r2, #1
 80847aa:	601a      	strpl	r2, [r3, #0]
 80847ac:	4b16      	ldr	r3, [pc, #88]	; (8084808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80847ae:	681a      	ldr	r2, [r3, #0]
 80847b0:	07d1      	lsls	r1, r2, #31
 80847b2:	bf5c      	itt	pl
 80847b4:	2201      	movpl	r2, #1
 80847b6:	601a      	strpl	r2, [r3, #0]
 80847b8:	4b14      	ldr	r3, [pc, #80]	; (808480c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80847ba:	681a      	ldr	r2, [r3, #0]
 80847bc:	07d2      	lsls	r2, r2, #31
 80847be:	bf5c      	itt	pl
 80847c0:	2201      	movpl	r2, #1
 80847c2:	601a      	strpl	r2, [r3, #0]
 80847c4:	4b12      	ldr	r3, [pc, #72]	; (8084810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80847c6:	681a      	ldr	r2, [r3, #0]
 80847c8:	07d0      	lsls	r0, r2, #31
 80847ca:	bf5c      	itt	pl
 80847cc:	2201      	movpl	r2, #1
 80847ce:	601a      	strpl	r2, [r3, #0]
 80847d0:	4b10      	ldr	r3, [pc, #64]	; (8084814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80847d2:	681a      	ldr	r2, [r3, #0]
 80847d4:	07d1      	lsls	r1, r2, #31
 80847d6:	bf5c      	itt	pl
 80847d8:	2201      	movpl	r2, #1
 80847da:	601a      	strpl	r2, [r3, #0]
 80847dc:	4b0e      	ldr	r3, [pc, #56]	; (8084818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80847de:	681a      	ldr	r2, [r3, #0]
 80847e0:	07d2      	lsls	r2, r2, #31
 80847e2:	bf5c      	itt	pl
 80847e4:	2201      	movpl	r2, #1
 80847e6:	601a      	strpl	r2, [r3, #0]
 80847e8:	4770      	bx	lr
 80847ea:	bf00      	nop
 80847ec:	2000092c 	.word	0x2000092c
 80847f0:	20000928 	.word	0x20000928
 80847f4:	20000924 	.word	0x20000924
 80847f8:	20000920 	.word	0x20000920
 80847fc:	2000091c 	.word	0x2000091c
 8084800:	20000918 	.word	0x20000918
 8084804:	20000914 	.word	0x20000914
 8084808:	20000910 	.word	0x20000910
 808480c:	2000090c 	.word	0x2000090c
 8084810:	20000908 	.word	0x20000908
 8084814:	20000904 	.word	0x20000904
 8084818:	20000900 	.word	0x20000900

0808481c <__aeabi_drsub>:
 808481c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8084820:	e002      	b.n	8084828 <__adddf3>
 8084822:	bf00      	nop

08084824 <__aeabi_dsub>:
 8084824:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08084828 <__adddf3>:
 8084828:	b530      	push	{r4, r5, lr}
 808482a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808482e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8084832:	ea94 0f05 	teq	r4, r5
 8084836:	bf08      	it	eq
 8084838:	ea90 0f02 	teqeq	r0, r2
 808483c:	bf1f      	itttt	ne
 808483e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8084842:	ea55 0c02 	orrsne.w	ip, r5, r2
 8084846:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 808484a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808484e:	f000 80e2 	beq.w	8084a16 <__adddf3+0x1ee>
 8084852:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8084856:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 808485a:	bfb8      	it	lt
 808485c:	426d      	neglt	r5, r5
 808485e:	dd0c      	ble.n	808487a <__adddf3+0x52>
 8084860:	442c      	add	r4, r5
 8084862:	ea80 0202 	eor.w	r2, r0, r2
 8084866:	ea81 0303 	eor.w	r3, r1, r3
 808486a:	ea82 0000 	eor.w	r0, r2, r0
 808486e:	ea83 0101 	eor.w	r1, r3, r1
 8084872:	ea80 0202 	eor.w	r2, r0, r2
 8084876:	ea81 0303 	eor.w	r3, r1, r3
 808487a:	2d36      	cmp	r5, #54	; 0x36
 808487c:	bf88      	it	hi
 808487e:	bd30      	pophi	{r4, r5, pc}
 8084880:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8084884:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8084888:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 808488c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8084890:	d002      	beq.n	8084898 <__adddf3+0x70>
 8084892:	4240      	negs	r0, r0
 8084894:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8084898:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 808489c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80848a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80848a4:	d002      	beq.n	80848ac <__adddf3+0x84>
 80848a6:	4252      	negs	r2, r2
 80848a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80848ac:	ea94 0f05 	teq	r4, r5
 80848b0:	f000 80a7 	beq.w	8084a02 <__adddf3+0x1da>
 80848b4:	f1a4 0401 	sub.w	r4, r4, #1
 80848b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80848bc:	db0d      	blt.n	80848da <__adddf3+0xb2>
 80848be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80848c2:	fa22 f205 	lsr.w	r2, r2, r5
 80848c6:	1880      	adds	r0, r0, r2
 80848c8:	f141 0100 	adc.w	r1, r1, #0
 80848cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80848d0:	1880      	adds	r0, r0, r2
 80848d2:	fa43 f305 	asr.w	r3, r3, r5
 80848d6:	4159      	adcs	r1, r3
 80848d8:	e00e      	b.n	80848f8 <__adddf3+0xd0>
 80848da:	f1a5 0520 	sub.w	r5, r5, #32
 80848de:	f10e 0e20 	add.w	lr, lr, #32
 80848e2:	2a01      	cmp	r2, #1
 80848e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80848e8:	bf28      	it	cs
 80848ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80848ee:	fa43 f305 	asr.w	r3, r3, r5
 80848f2:	18c0      	adds	r0, r0, r3
 80848f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80848f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80848fc:	d507      	bpl.n	808490e <__adddf3+0xe6>
 80848fe:	f04f 0e00 	mov.w	lr, #0
 8084902:	f1dc 0c00 	rsbs	ip, ip, #0
 8084906:	eb7e 0000 	sbcs.w	r0, lr, r0
 808490a:	eb6e 0101 	sbc.w	r1, lr, r1
 808490e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8084912:	d31b      	bcc.n	808494c <__adddf3+0x124>
 8084914:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8084918:	d30c      	bcc.n	8084934 <__adddf3+0x10c>
 808491a:	0849      	lsrs	r1, r1, #1
 808491c:	ea5f 0030 	movs.w	r0, r0, rrx
 8084920:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8084924:	f104 0401 	add.w	r4, r4, #1
 8084928:	ea4f 5244 	mov.w	r2, r4, lsl #21
 808492c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8084930:	f080 809a 	bcs.w	8084a68 <__adddf3+0x240>
 8084934:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8084938:	bf08      	it	eq
 808493a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808493e:	f150 0000 	adcs.w	r0, r0, #0
 8084942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8084946:	ea41 0105 	orr.w	r1, r1, r5
 808494a:	bd30      	pop	{r4, r5, pc}
 808494c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8084950:	4140      	adcs	r0, r0
 8084952:	eb41 0101 	adc.w	r1, r1, r1
 8084956:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808495a:	f1a4 0401 	sub.w	r4, r4, #1
 808495e:	d1e9      	bne.n	8084934 <__adddf3+0x10c>
 8084960:	f091 0f00 	teq	r1, #0
 8084964:	bf04      	itt	eq
 8084966:	4601      	moveq	r1, r0
 8084968:	2000      	moveq	r0, #0
 808496a:	fab1 f381 	clz	r3, r1
 808496e:	bf08      	it	eq
 8084970:	3320      	addeq	r3, #32
 8084972:	f1a3 030b 	sub.w	r3, r3, #11
 8084976:	f1b3 0220 	subs.w	r2, r3, #32
 808497a:	da0c      	bge.n	8084996 <__adddf3+0x16e>
 808497c:	320c      	adds	r2, #12
 808497e:	dd08      	ble.n	8084992 <__adddf3+0x16a>
 8084980:	f102 0c14 	add.w	ip, r2, #20
 8084984:	f1c2 020c 	rsb	r2, r2, #12
 8084988:	fa01 f00c 	lsl.w	r0, r1, ip
 808498c:	fa21 f102 	lsr.w	r1, r1, r2
 8084990:	e00c      	b.n	80849ac <__adddf3+0x184>
 8084992:	f102 0214 	add.w	r2, r2, #20
 8084996:	bfd8      	it	le
 8084998:	f1c2 0c20 	rsble	ip, r2, #32
 808499c:	fa01 f102 	lsl.w	r1, r1, r2
 80849a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80849a4:	bfdc      	itt	le
 80849a6:	ea41 010c 	orrle.w	r1, r1, ip
 80849aa:	4090      	lslle	r0, r2
 80849ac:	1ae4      	subs	r4, r4, r3
 80849ae:	bfa2      	ittt	ge
 80849b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80849b4:	4329      	orrge	r1, r5
 80849b6:	bd30      	popge	{r4, r5, pc}
 80849b8:	ea6f 0404 	mvn.w	r4, r4
 80849bc:	3c1f      	subs	r4, #31
 80849be:	da1c      	bge.n	80849fa <__adddf3+0x1d2>
 80849c0:	340c      	adds	r4, #12
 80849c2:	dc0e      	bgt.n	80849e2 <__adddf3+0x1ba>
 80849c4:	f104 0414 	add.w	r4, r4, #20
 80849c8:	f1c4 0220 	rsb	r2, r4, #32
 80849cc:	fa20 f004 	lsr.w	r0, r0, r4
 80849d0:	fa01 f302 	lsl.w	r3, r1, r2
 80849d4:	ea40 0003 	orr.w	r0, r0, r3
 80849d8:	fa21 f304 	lsr.w	r3, r1, r4
 80849dc:	ea45 0103 	orr.w	r1, r5, r3
 80849e0:	bd30      	pop	{r4, r5, pc}
 80849e2:	f1c4 040c 	rsb	r4, r4, #12
 80849e6:	f1c4 0220 	rsb	r2, r4, #32
 80849ea:	fa20 f002 	lsr.w	r0, r0, r2
 80849ee:	fa01 f304 	lsl.w	r3, r1, r4
 80849f2:	ea40 0003 	orr.w	r0, r0, r3
 80849f6:	4629      	mov	r1, r5
 80849f8:	bd30      	pop	{r4, r5, pc}
 80849fa:	fa21 f004 	lsr.w	r0, r1, r4
 80849fe:	4629      	mov	r1, r5
 8084a00:	bd30      	pop	{r4, r5, pc}
 8084a02:	f094 0f00 	teq	r4, #0
 8084a06:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8084a0a:	bf06      	itte	eq
 8084a0c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8084a10:	3401      	addeq	r4, #1
 8084a12:	3d01      	subne	r5, #1
 8084a14:	e74e      	b.n	80848b4 <__adddf3+0x8c>
 8084a16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8084a1a:	bf18      	it	ne
 8084a1c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8084a20:	d029      	beq.n	8084a76 <__adddf3+0x24e>
 8084a22:	ea94 0f05 	teq	r4, r5
 8084a26:	bf08      	it	eq
 8084a28:	ea90 0f02 	teqeq	r0, r2
 8084a2c:	d005      	beq.n	8084a3a <__adddf3+0x212>
 8084a2e:	ea54 0c00 	orrs.w	ip, r4, r0
 8084a32:	bf04      	itt	eq
 8084a34:	4619      	moveq	r1, r3
 8084a36:	4610      	moveq	r0, r2
 8084a38:	bd30      	pop	{r4, r5, pc}
 8084a3a:	ea91 0f03 	teq	r1, r3
 8084a3e:	bf1e      	ittt	ne
 8084a40:	2100      	movne	r1, #0
 8084a42:	2000      	movne	r0, #0
 8084a44:	bd30      	popne	{r4, r5, pc}
 8084a46:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8084a4a:	d105      	bne.n	8084a58 <__adddf3+0x230>
 8084a4c:	0040      	lsls	r0, r0, #1
 8084a4e:	4149      	adcs	r1, r1
 8084a50:	bf28      	it	cs
 8084a52:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8084a56:	bd30      	pop	{r4, r5, pc}
 8084a58:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8084a5c:	bf3c      	itt	cc
 8084a5e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8084a62:	bd30      	popcc	{r4, r5, pc}
 8084a64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8084a68:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8084a6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8084a70:	f04f 0000 	mov.w	r0, #0
 8084a74:	bd30      	pop	{r4, r5, pc}
 8084a76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8084a7a:	bf1a      	itte	ne
 8084a7c:	4619      	movne	r1, r3
 8084a7e:	4610      	movne	r0, r2
 8084a80:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8084a84:	bf1c      	itt	ne
 8084a86:	460b      	movne	r3, r1
 8084a88:	4602      	movne	r2, r0
 8084a8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8084a8e:	bf06      	itte	eq
 8084a90:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8084a94:	ea91 0f03 	teqeq	r1, r3
 8084a98:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8084a9c:	bd30      	pop	{r4, r5, pc}
 8084a9e:	bf00      	nop

08084aa0 <__aeabi_ui2d>:
 8084aa0:	f090 0f00 	teq	r0, #0
 8084aa4:	bf04      	itt	eq
 8084aa6:	2100      	moveq	r1, #0
 8084aa8:	4770      	bxeq	lr
 8084aaa:	b530      	push	{r4, r5, lr}
 8084aac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8084ab0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8084ab4:	f04f 0500 	mov.w	r5, #0
 8084ab8:	f04f 0100 	mov.w	r1, #0
 8084abc:	e750      	b.n	8084960 <__adddf3+0x138>
 8084abe:	bf00      	nop

08084ac0 <__aeabi_i2d>:
 8084ac0:	f090 0f00 	teq	r0, #0
 8084ac4:	bf04      	itt	eq
 8084ac6:	2100      	moveq	r1, #0
 8084ac8:	4770      	bxeq	lr
 8084aca:	b530      	push	{r4, r5, lr}
 8084acc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8084ad0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8084ad4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8084ad8:	bf48      	it	mi
 8084ada:	4240      	negmi	r0, r0
 8084adc:	f04f 0100 	mov.w	r1, #0
 8084ae0:	e73e      	b.n	8084960 <__adddf3+0x138>
 8084ae2:	bf00      	nop

08084ae4 <__aeabi_f2d>:
 8084ae4:	0042      	lsls	r2, r0, #1
 8084ae6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8084aea:	ea4f 0131 	mov.w	r1, r1, rrx
 8084aee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8084af2:	bf1f      	itttt	ne
 8084af4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8084af8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8084afc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8084b00:	4770      	bxne	lr
 8084b02:	f092 0f00 	teq	r2, #0
 8084b06:	bf14      	ite	ne
 8084b08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8084b0c:	4770      	bxeq	lr
 8084b0e:	b530      	push	{r4, r5, lr}
 8084b10:	f44f 7460 	mov.w	r4, #896	; 0x380
 8084b14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8084b18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8084b1c:	e720      	b.n	8084960 <__adddf3+0x138>
 8084b1e:	bf00      	nop

08084b20 <__aeabi_ul2d>:
 8084b20:	ea50 0201 	orrs.w	r2, r0, r1
 8084b24:	bf08      	it	eq
 8084b26:	4770      	bxeq	lr
 8084b28:	b530      	push	{r4, r5, lr}
 8084b2a:	f04f 0500 	mov.w	r5, #0
 8084b2e:	e00a      	b.n	8084b46 <__aeabi_l2d+0x16>

08084b30 <__aeabi_l2d>:
 8084b30:	ea50 0201 	orrs.w	r2, r0, r1
 8084b34:	bf08      	it	eq
 8084b36:	4770      	bxeq	lr
 8084b38:	b530      	push	{r4, r5, lr}
 8084b3a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8084b3e:	d502      	bpl.n	8084b46 <__aeabi_l2d+0x16>
 8084b40:	4240      	negs	r0, r0
 8084b42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8084b46:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8084b4a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8084b4e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8084b52:	f43f aedc 	beq.w	808490e <__adddf3+0xe6>
 8084b56:	f04f 0203 	mov.w	r2, #3
 8084b5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8084b5e:	bf18      	it	ne
 8084b60:	3203      	addne	r2, #3
 8084b62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8084b66:	bf18      	it	ne
 8084b68:	3203      	addne	r2, #3
 8084b6a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8084b6e:	f1c2 0320 	rsb	r3, r2, #32
 8084b72:	fa00 fc03 	lsl.w	ip, r0, r3
 8084b76:	fa20 f002 	lsr.w	r0, r0, r2
 8084b7a:	fa01 fe03 	lsl.w	lr, r1, r3
 8084b7e:	ea40 000e 	orr.w	r0, r0, lr
 8084b82:	fa21 f102 	lsr.w	r1, r1, r2
 8084b86:	4414      	add	r4, r2
 8084b88:	e6c1      	b.n	808490e <__adddf3+0xe6>
 8084b8a:	bf00      	nop

08084b8c <__aeabi_dmul>:
 8084b8c:	b570      	push	{r4, r5, r6, lr}
 8084b8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084b92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8084b96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8084b9a:	bf1d      	ittte	ne
 8084b9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8084ba0:	ea94 0f0c 	teqne	r4, ip
 8084ba4:	ea95 0f0c 	teqne	r5, ip
 8084ba8:	f000 f8de 	bleq	8084d68 <__aeabi_dmul+0x1dc>
 8084bac:	442c      	add	r4, r5
 8084bae:	ea81 0603 	eor.w	r6, r1, r3
 8084bb2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8084bb6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8084bba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8084bbe:	bf18      	it	ne
 8084bc0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8084bc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8084bc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8084bcc:	d038      	beq.n	8084c40 <__aeabi_dmul+0xb4>
 8084bce:	fba0 ce02 	umull	ip, lr, r0, r2
 8084bd2:	f04f 0500 	mov.w	r5, #0
 8084bd6:	fbe1 e502 	umlal	lr, r5, r1, r2
 8084bda:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8084bde:	fbe0 e503 	umlal	lr, r5, r0, r3
 8084be2:	f04f 0600 	mov.w	r6, #0
 8084be6:	fbe1 5603 	umlal	r5, r6, r1, r3
 8084bea:	f09c 0f00 	teq	ip, #0
 8084bee:	bf18      	it	ne
 8084bf0:	f04e 0e01 	orrne.w	lr, lr, #1
 8084bf4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8084bf8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8084bfc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8084c00:	d204      	bcs.n	8084c0c <__aeabi_dmul+0x80>
 8084c02:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8084c06:	416d      	adcs	r5, r5
 8084c08:	eb46 0606 	adc.w	r6, r6, r6
 8084c0c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8084c10:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8084c14:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8084c18:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8084c1c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8084c20:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8084c24:	bf88      	it	hi
 8084c26:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8084c2a:	d81e      	bhi.n	8084c6a <__aeabi_dmul+0xde>
 8084c2c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8084c30:	bf08      	it	eq
 8084c32:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8084c36:	f150 0000 	adcs.w	r0, r0, #0
 8084c3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8084c3e:	bd70      	pop	{r4, r5, r6, pc}
 8084c40:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8084c44:	ea46 0101 	orr.w	r1, r6, r1
 8084c48:	ea40 0002 	orr.w	r0, r0, r2
 8084c4c:	ea81 0103 	eor.w	r1, r1, r3
 8084c50:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8084c54:	bfc2      	ittt	gt
 8084c56:	ebd4 050c 	rsbsgt	r5, r4, ip
 8084c5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8084c5e:	bd70      	popgt	{r4, r5, r6, pc}
 8084c60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8084c64:	f04f 0e00 	mov.w	lr, #0
 8084c68:	3c01      	subs	r4, #1
 8084c6a:	f300 80ab 	bgt.w	8084dc4 <__aeabi_dmul+0x238>
 8084c6e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8084c72:	bfde      	ittt	le
 8084c74:	2000      	movle	r0, #0
 8084c76:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8084c7a:	bd70      	pople	{r4, r5, r6, pc}
 8084c7c:	f1c4 0400 	rsb	r4, r4, #0
 8084c80:	3c20      	subs	r4, #32
 8084c82:	da35      	bge.n	8084cf0 <__aeabi_dmul+0x164>
 8084c84:	340c      	adds	r4, #12
 8084c86:	dc1b      	bgt.n	8084cc0 <__aeabi_dmul+0x134>
 8084c88:	f104 0414 	add.w	r4, r4, #20
 8084c8c:	f1c4 0520 	rsb	r5, r4, #32
 8084c90:	fa00 f305 	lsl.w	r3, r0, r5
 8084c94:	fa20 f004 	lsr.w	r0, r0, r4
 8084c98:	fa01 f205 	lsl.w	r2, r1, r5
 8084c9c:	ea40 0002 	orr.w	r0, r0, r2
 8084ca0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8084ca4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8084ca8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8084cac:	fa21 f604 	lsr.w	r6, r1, r4
 8084cb0:	eb42 0106 	adc.w	r1, r2, r6
 8084cb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8084cb8:	bf08      	it	eq
 8084cba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8084cbe:	bd70      	pop	{r4, r5, r6, pc}
 8084cc0:	f1c4 040c 	rsb	r4, r4, #12
 8084cc4:	f1c4 0520 	rsb	r5, r4, #32
 8084cc8:	fa00 f304 	lsl.w	r3, r0, r4
 8084ccc:	fa20 f005 	lsr.w	r0, r0, r5
 8084cd0:	fa01 f204 	lsl.w	r2, r1, r4
 8084cd4:	ea40 0002 	orr.w	r0, r0, r2
 8084cd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8084cdc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8084ce0:	f141 0100 	adc.w	r1, r1, #0
 8084ce4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8084ce8:	bf08      	it	eq
 8084cea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8084cee:	bd70      	pop	{r4, r5, r6, pc}
 8084cf0:	f1c4 0520 	rsb	r5, r4, #32
 8084cf4:	fa00 f205 	lsl.w	r2, r0, r5
 8084cf8:	ea4e 0e02 	orr.w	lr, lr, r2
 8084cfc:	fa20 f304 	lsr.w	r3, r0, r4
 8084d00:	fa01 f205 	lsl.w	r2, r1, r5
 8084d04:	ea43 0302 	orr.w	r3, r3, r2
 8084d08:	fa21 f004 	lsr.w	r0, r1, r4
 8084d0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8084d10:	fa21 f204 	lsr.w	r2, r1, r4
 8084d14:	ea20 0002 	bic.w	r0, r0, r2
 8084d18:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8084d1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8084d20:	bf08      	it	eq
 8084d22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8084d26:	bd70      	pop	{r4, r5, r6, pc}
 8084d28:	f094 0f00 	teq	r4, #0
 8084d2c:	d10f      	bne.n	8084d4e <__aeabi_dmul+0x1c2>
 8084d2e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8084d32:	0040      	lsls	r0, r0, #1
 8084d34:	eb41 0101 	adc.w	r1, r1, r1
 8084d38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8084d3c:	bf08      	it	eq
 8084d3e:	3c01      	subeq	r4, #1
 8084d40:	d0f7      	beq.n	8084d32 <__aeabi_dmul+0x1a6>
 8084d42:	ea41 0106 	orr.w	r1, r1, r6
 8084d46:	f095 0f00 	teq	r5, #0
 8084d4a:	bf18      	it	ne
 8084d4c:	4770      	bxne	lr
 8084d4e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8084d52:	0052      	lsls	r2, r2, #1
 8084d54:	eb43 0303 	adc.w	r3, r3, r3
 8084d58:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8084d5c:	bf08      	it	eq
 8084d5e:	3d01      	subeq	r5, #1
 8084d60:	d0f7      	beq.n	8084d52 <__aeabi_dmul+0x1c6>
 8084d62:	ea43 0306 	orr.w	r3, r3, r6
 8084d66:	4770      	bx	lr
 8084d68:	ea94 0f0c 	teq	r4, ip
 8084d6c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8084d70:	bf18      	it	ne
 8084d72:	ea95 0f0c 	teqne	r5, ip
 8084d76:	d00c      	beq.n	8084d92 <__aeabi_dmul+0x206>
 8084d78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8084d7c:	bf18      	it	ne
 8084d7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8084d82:	d1d1      	bne.n	8084d28 <__aeabi_dmul+0x19c>
 8084d84:	ea81 0103 	eor.w	r1, r1, r3
 8084d88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8084d8c:	f04f 0000 	mov.w	r0, #0
 8084d90:	bd70      	pop	{r4, r5, r6, pc}
 8084d92:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8084d96:	bf06      	itte	eq
 8084d98:	4610      	moveq	r0, r2
 8084d9a:	4619      	moveq	r1, r3
 8084d9c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8084da0:	d019      	beq.n	8084dd6 <__aeabi_dmul+0x24a>
 8084da2:	ea94 0f0c 	teq	r4, ip
 8084da6:	d102      	bne.n	8084dae <__aeabi_dmul+0x222>
 8084da8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8084dac:	d113      	bne.n	8084dd6 <__aeabi_dmul+0x24a>
 8084dae:	ea95 0f0c 	teq	r5, ip
 8084db2:	d105      	bne.n	8084dc0 <__aeabi_dmul+0x234>
 8084db4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8084db8:	bf1c      	itt	ne
 8084dba:	4610      	movne	r0, r2
 8084dbc:	4619      	movne	r1, r3
 8084dbe:	d10a      	bne.n	8084dd6 <__aeabi_dmul+0x24a>
 8084dc0:	ea81 0103 	eor.w	r1, r1, r3
 8084dc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8084dc8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8084dcc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8084dd0:	f04f 0000 	mov.w	r0, #0
 8084dd4:	bd70      	pop	{r4, r5, r6, pc}
 8084dd6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8084dda:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8084dde:	bd70      	pop	{r4, r5, r6, pc}

08084de0 <__aeabi_ddiv>:
 8084de0:	b570      	push	{r4, r5, r6, lr}
 8084de2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084de6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8084dea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8084dee:	bf1d      	ittte	ne
 8084df0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8084df4:	ea94 0f0c 	teqne	r4, ip
 8084df8:	ea95 0f0c 	teqne	r5, ip
 8084dfc:	f000 f8a7 	bleq	8084f4e <__aeabi_ddiv+0x16e>
 8084e00:	eba4 0405 	sub.w	r4, r4, r5
 8084e04:	ea81 0e03 	eor.w	lr, r1, r3
 8084e08:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8084e0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8084e10:	f000 8088 	beq.w	8084f24 <__aeabi_ddiv+0x144>
 8084e14:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8084e18:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8084e1c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8084e20:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8084e24:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8084e28:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8084e2c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8084e30:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8084e34:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8084e38:	429d      	cmp	r5, r3
 8084e3a:	bf08      	it	eq
 8084e3c:	4296      	cmpeq	r6, r2
 8084e3e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8084e42:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8084e46:	d202      	bcs.n	8084e4e <__aeabi_ddiv+0x6e>
 8084e48:	085b      	lsrs	r3, r3, #1
 8084e4a:	ea4f 0232 	mov.w	r2, r2, rrx
 8084e4e:	1ab6      	subs	r6, r6, r2
 8084e50:	eb65 0503 	sbc.w	r5, r5, r3
 8084e54:	085b      	lsrs	r3, r3, #1
 8084e56:	ea4f 0232 	mov.w	r2, r2, rrx
 8084e5a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8084e5e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8084e62:	ebb6 0e02 	subs.w	lr, r6, r2
 8084e66:	eb75 0e03 	sbcs.w	lr, r5, r3
 8084e6a:	bf22      	ittt	cs
 8084e6c:	1ab6      	subcs	r6, r6, r2
 8084e6e:	4675      	movcs	r5, lr
 8084e70:	ea40 000c 	orrcs.w	r0, r0, ip
 8084e74:	085b      	lsrs	r3, r3, #1
 8084e76:	ea4f 0232 	mov.w	r2, r2, rrx
 8084e7a:	ebb6 0e02 	subs.w	lr, r6, r2
 8084e7e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8084e82:	bf22      	ittt	cs
 8084e84:	1ab6      	subcs	r6, r6, r2
 8084e86:	4675      	movcs	r5, lr
 8084e88:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8084e8c:	085b      	lsrs	r3, r3, #1
 8084e8e:	ea4f 0232 	mov.w	r2, r2, rrx
 8084e92:	ebb6 0e02 	subs.w	lr, r6, r2
 8084e96:	eb75 0e03 	sbcs.w	lr, r5, r3
 8084e9a:	bf22      	ittt	cs
 8084e9c:	1ab6      	subcs	r6, r6, r2
 8084e9e:	4675      	movcs	r5, lr
 8084ea0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8084ea4:	085b      	lsrs	r3, r3, #1
 8084ea6:	ea4f 0232 	mov.w	r2, r2, rrx
 8084eaa:	ebb6 0e02 	subs.w	lr, r6, r2
 8084eae:	eb75 0e03 	sbcs.w	lr, r5, r3
 8084eb2:	bf22      	ittt	cs
 8084eb4:	1ab6      	subcs	r6, r6, r2
 8084eb6:	4675      	movcs	r5, lr
 8084eb8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8084ebc:	ea55 0e06 	orrs.w	lr, r5, r6
 8084ec0:	d018      	beq.n	8084ef4 <__aeabi_ddiv+0x114>
 8084ec2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8084ec6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8084eca:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8084ece:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8084ed2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8084ed6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8084eda:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8084ede:	d1c0      	bne.n	8084e62 <__aeabi_ddiv+0x82>
 8084ee0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8084ee4:	d10b      	bne.n	8084efe <__aeabi_ddiv+0x11e>
 8084ee6:	ea41 0100 	orr.w	r1, r1, r0
 8084eea:	f04f 0000 	mov.w	r0, #0
 8084eee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8084ef2:	e7b6      	b.n	8084e62 <__aeabi_ddiv+0x82>
 8084ef4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8084ef8:	bf04      	itt	eq
 8084efa:	4301      	orreq	r1, r0
 8084efc:	2000      	moveq	r0, #0
 8084efe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8084f02:	bf88      	it	hi
 8084f04:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8084f08:	f63f aeaf 	bhi.w	8084c6a <__aeabi_dmul+0xde>
 8084f0c:	ebb5 0c03 	subs.w	ip, r5, r3
 8084f10:	bf04      	itt	eq
 8084f12:	ebb6 0c02 	subseq.w	ip, r6, r2
 8084f16:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8084f1a:	f150 0000 	adcs.w	r0, r0, #0
 8084f1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8084f22:	bd70      	pop	{r4, r5, r6, pc}
 8084f24:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8084f28:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8084f2c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8084f30:	bfc2      	ittt	gt
 8084f32:	ebd4 050c 	rsbsgt	r5, r4, ip
 8084f36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8084f3a:	bd70      	popgt	{r4, r5, r6, pc}
 8084f3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8084f40:	f04f 0e00 	mov.w	lr, #0
 8084f44:	3c01      	subs	r4, #1
 8084f46:	e690      	b.n	8084c6a <__aeabi_dmul+0xde>
 8084f48:	ea45 0e06 	orr.w	lr, r5, r6
 8084f4c:	e68d      	b.n	8084c6a <__aeabi_dmul+0xde>
 8084f4e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8084f52:	ea94 0f0c 	teq	r4, ip
 8084f56:	bf08      	it	eq
 8084f58:	ea95 0f0c 	teqeq	r5, ip
 8084f5c:	f43f af3b 	beq.w	8084dd6 <__aeabi_dmul+0x24a>
 8084f60:	ea94 0f0c 	teq	r4, ip
 8084f64:	d10a      	bne.n	8084f7c <__aeabi_ddiv+0x19c>
 8084f66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8084f6a:	f47f af34 	bne.w	8084dd6 <__aeabi_dmul+0x24a>
 8084f6e:	ea95 0f0c 	teq	r5, ip
 8084f72:	f47f af25 	bne.w	8084dc0 <__aeabi_dmul+0x234>
 8084f76:	4610      	mov	r0, r2
 8084f78:	4619      	mov	r1, r3
 8084f7a:	e72c      	b.n	8084dd6 <__aeabi_dmul+0x24a>
 8084f7c:	ea95 0f0c 	teq	r5, ip
 8084f80:	d106      	bne.n	8084f90 <__aeabi_ddiv+0x1b0>
 8084f82:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8084f86:	f43f aefd 	beq.w	8084d84 <__aeabi_dmul+0x1f8>
 8084f8a:	4610      	mov	r0, r2
 8084f8c:	4619      	mov	r1, r3
 8084f8e:	e722      	b.n	8084dd6 <__aeabi_dmul+0x24a>
 8084f90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8084f94:	bf18      	it	ne
 8084f96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8084f9a:	f47f aec5 	bne.w	8084d28 <__aeabi_dmul+0x19c>
 8084f9e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8084fa2:	f47f af0d 	bne.w	8084dc0 <__aeabi_dmul+0x234>
 8084fa6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8084faa:	f47f aeeb 	bne.w	8084d84 <__aeabi_dmul+0x1f8>
 8084fae:	e712      	b.n	8084dd6 <__aeabi_dmul+0x24a>

08084fb0 <__aeabi_d2iz>:
 8084fb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8084fb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8084fb8:	d215      	bcs.n	8084fe6 <__aeabi_d2iz+0x36>
 8084fba:	d511      	bpl.n	8084fe0 <__aeabi_d2iz+0x30>
 8084fbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8084fc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8084fc4:	d912      	bls.n	8084fec <__aeabi_d2iz+0x3c>
 8084fc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8084fca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8084fce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8084fd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8084fd6:	fa23 f002 	lsr.w	r0, r3, r2
 8084fda:	bf18      	it	ne
 8084fdc:	4240      	negne	r0, r0
 8084fde:	4770      	bx	lr
 8084fe0:	f04f 0000 	mov.w	r0, #0
 8084fe4:	4770      	bx	lr
 8084fe6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8084fea:	d105      	bne.n	8084ff8 <__aeabi_d2iz+0x48>
 8084fec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8084ff0:	bf08      	it	eq
 8084ff2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084ff6:	4770      	bx	lr
 8084ff8:	f04f 0000 	mov.w	r0, #0
 8084ffc:	4770      	bx	lr
 8084ffe:	bf00      	nop

08085000 <__aeabi_d2f>:
 8085000:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8085004:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8085008:	bf24      	itt	cs
 808500a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808500e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8085012:	d90d      	bls.n	8085030 <__aeabi_d2f+0x30>
 8085014:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8085018:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808501c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8085020:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8085024:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8085028:	bf08      	it	eq
 808502a:	f020 0001 	biceq.w	r0, r0, #1
 808502e:	4770      	bx	lr
 8085030:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8085034:	d121      	bne.n	808507a <__aeabi_d2f+0x7a>
 8085036:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808503a:	bfbc      	itt	lt
 808503c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8085040:	4770      	bxlt	lr
 8085042:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8085046:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808504a:	f1c2 0218 	rsb	r2, r2, #24
 808504e:	f1c2 0c20 	rsb	ip, r2, #32
 8085052:	fa10 f30c 	lsls.w	r3, r0, ip
 8085056:	fa20 f002 	lsr.w	r0, r0, r2
 808505a:	bf18      	it	ne
 808505c:	f040 0001 	orrne.w	r0, r0, #1
 8085060:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8085064:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8085068:	fa03 fc0c 	lsl.w	ip, r3, ip
 808506c:	ea40 000c 	orr.w	r0, r0, ip
 8085070:	fa23 f302 	lsr.w	r3, r3, r2
 8085074:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8085078:	e7cc      	b.n	8085014 <__aeabi_d2f+0x14>
 808507a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808507e:	d107      	bne.n	8085090 <__aeabi_d2f+0x90>
 8085080:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8085084:	bf1e      	ittt	ne
 8085086:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808508a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808508e:	4770      	bxne	lr
 8085090:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8085094:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8085098:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808509c:	4770      	bx	lr
 808509e:	bf00      	nop

080850a0 <__aeabi_frsub>:
 80850a0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80850a4:	e002      	b.n	80850ac <__addsf3>
 80850a6:	bf00      	nop

080850a8 <__aeabi_fsub>:
 80850a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080850ac <__addsf3>:
 80850ac:	0042      	lsls	r2, r0, #1
 80850ae:	bf1f      	itttt	ne
 80850b0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80850b4:	ea92 0f03 	teqne	r2, r3
 80850b8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80850bc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80850c0:	d06a      	beq.n	8085198 <__addsf3+0xec>
 80850c2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80850c6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80850ca:	bfc1      	itttt	gt
 80850cc:	18d2      	addgt	r2, r2, r3
 80850ce:	4041      	eorgt	r1, r0
 80850d0:	4048      	eorgt	r0, r1
 80850d2:	4041      	eorgt	r1, r0
 80850d4:	bfb8      	it	lt
 80850d6:	425b      	neglt	r3, r3
 80850d8:	2b19      	cmp	r3, #25
 80850da:	bf88      	it	hi
 80850dc:	4770      	bxhi	lr
 80850de:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80850e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80850e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80850ea:	bf18      	it	ne
 80850ec:	4240      	negne	r0, r0
 80850ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80850f2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80850f6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80850fa:	bf18      	it	ne
 80850fc:	4249      	negne	r1, r1
 80850fe:	ea92 0f03 	teq	r2, r3
 8085102:	d03f      	beq.n	8085184 <__addsf3+0xd8>
 8085104:	f1a2 0201 	sub.w	r2, r2, #1
 8085108:	fa41 fc03 	asr.w	ip, r1, r3
 808510c:	eb10 000c 	adds.w	r0, r0, ip
 8085110:	f1c3 0320 	rsb	r3, r3, #32
 8085114:	fa01 f103 	lsl.w	r1, r1, r3
 8085118:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808511c:	d502      	bpl.n	8085124 <__addsf3+0x78>
 808511e:	4249      	negs	r1, r1
 8085120:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8085124:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8085128:	d313      	bcc.n	8085152 <__addsf3+0xa6>
 808512a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808512e:	d306      	bcc.n	808513e <__addsf3+0x92>
 8085130:	0840      	lsrs	r0, r0, #1
 8085132:	ea4f 0131 	mov.w	r1, r1, rrx
 8085136:	f102 0201 	add.w	r2, r2, #1
 808513a:	2afe      	cmp	r2, #254	; 0xfe
 808513c:	d251      	bcs.n	80851e2 <__addsf3+0x136>
 808513e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8085142:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8085146:	bf08      	it	eq
 8085148:	f020 0001 	biceq.w	r0, r0, #1
 808514c:	ea40 0003 	orr.w	r0, r0, r3
 8085150:	4770      	bx	lr
 8085152:	0049      	lsls	r1, r1, #1
 8085154:	eb40 0000 	adc.w	r0, r0, r0
 8085158:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 808515c:	f1a2 0201 	sub.w	r2, r2, #1
 8085160:	d1ed      	bne.n	808513e <__addsf3+0x92>
 8085162:	fab0 fc80 	clz	ip, r0
 8085166:	f1ac 0c08 	sub.w	ip, ip, #8
 808516a:	ebb2 020c 	subs.w	r2, r2, ip
 808516e:	fa00 f00c 	lsl.w	r0, r0, ip
 8085172:	bfaa      	itet	ge
 8085174:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8085178:	4252      	neglt	r2, r2
 808517a:	4318      	orrge	r0, r3
 808517c:	bfbc      	itt	lt
 808517e:	40d0      	lsrlt	r0, r2
 8085180:	4318      	orrlt	r0, r3
 8085182:	4770      	bx	lr
 8085184:	f092 0f00 	teq	r2, #0
 8085188:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808518c:	bf06      	itte	eq
 808518e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8085192:	3201      	addeq	r2, #1
 8085194:	3b01      	subne	r3, #1
 8085196:	e7b5      	b.n	8085104 <__addsf3+0x58>
 8085198:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808519c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80851a0:	bf18      	it	ne
 80851a2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80851a6:	d021      	beq.n	80851ec <__addsf3+0x140>
 80851a8:	ea92 0f03 	teq	r2, r3
 80851ac:	d004      	beq.n	80851b8 <__addsf3+0x10c>
 80851ae:	f092 0f00 	teq	r2, #0
 80851b2:	bf08      	it	eq
 80851b4:	4608      	moveq	r0, r1
 80851b6:	4770      	bx	lr
 80851b8:	ea90 0f01 	teq	r0, r1
 80851bc:	bf1c      	itt	ne
 80851be:	2000      	movne	r0, #0
 80851c0:	4770      	bxne	lr
 80851c2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80851c6:	d104      	bne.n	80851d2 <__addsf3+0x126>
 80851c8:	0040      	lsls	r0, r0, #1
 80851ca:	bf28      	it	cs
 80851cc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80851d0:	4770      	bx	lr
 80851d2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80851d6:	bf3c      	itt	cc
 80851d8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80851dc:	4770      	bxcc	lr
 80851de:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80851e2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80851e6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80851ea:	4770      	bx	lr
 80851ec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80851f0:	bf16      	itet	ne
 80851f2:	4608      	movne	r0, r1
 80851f4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80851f8:	4601      	movne	r1, r0
 80851fa:	0242      	lsls	r2, r0, #9
 80851fc:	bf06      	itte	eq
 80851fe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8085202:	ea90 0f01 	teqeq	r0, r1
 8085206:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808520a:	4770      	bx	lr

0808520c <__aeabi_ui2f>:
 808520c:	f04f 0300 	mov.w	r3, #0
 8085210:	e004      	b.n	808521c <__aeabi_i2f+0x8>
 8085212:	bf00      	nop

08085214 <__aeabi_i2f>:
 8085214:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8085218:	bf48      	it	mi
 808521a:	4240      	negmi	r0, r0
 808521c:	ea5f 0c00 	movs.w	ip, r0
 8085220:	bf08      	it	eq
 8085222:	4770      	bxeq	lr
 8085224:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8085228:	4601      	mov	r1, r0
 808522a:	f04f 0000 	mov.w	r0, #0
 808522e:	e01c      	b.n	808526a <__aeabi_l2f+0x2a>

08085230 <__aeabi_ul2f>:
 8085230:	ea50 0201 	orrs.w	r2, r0, r1
 8085234:	bf08      	it	eq
 8085236:	4770      	bxeq	lr
 8085238:	f04f 0300 	mov.w	r3, #0
 808523c:	e00a      	b.n	8085254 <__aeabi_l2f+0x14>
 808523e:	bf00      	nop

08085240 <__aeabi_l2f>:
 8085240:	ea50 0201 	orrs.w	r2, r0, r1
 8085244:	bf08      	it	eq
 8085246:	4770      	bxeq	lr
 8085248:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808524c:	d502      	bpl.n	8085254 <__aeabi_l2f+0x14>
 808524e:	4240      	negs	r0, r0
 8085250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8085254:	ea5f 0c01 	movs.w	ip, r1
 8085258:	bf02      	ittt	eq
 808525a:	4684      	moveq	ip, r0
 808525c:	4601      	moveq	r1, r0
 808525e:	2000      	moveq	r0, #0
 8085260:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8085264:	bf08      	it	eq
 8085266:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808526a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808526e:	fabc f28c 	clz	r2, ip
 8085272:	3a08      	subs	r2, #8
 8085274:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8085278:	db10      	blt.n	808529c <__aeabi_l2f+0x5c>
 808527a:	fa01 fc02 	lsl.w	ip, r1, r2
 808527e:	4463      	add	r3, ip
 8085280:	fa00 fc02 	lsl.w	ip, r0, r2
 8085284:	f1c2 0220 	rsb	r2, r2, #32
 8085288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808528c:	fa20 f202 	lsr.w	r2, r0, r2
 8085290:	eb43 0002 	adc.w	r0, r3, r2
 8085294:	bf08      	it	eq
 8085296:	f020 0001 	biceq.w	r0, r0, #1
 808529a:	4770      	bx	lr
 808529c:	f102 0220 	add.w	r2, r2, #32
 80852a0:	fa01 fc02 	lsl.w	ip, r1, r2
 80852a4:	f1c2 0220 	rsb	r2, r2, #32
 80852a8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80852ac:	fa21 f202 	lsr.w	r2, r1, r2
 80852b0:	eb43 0002 	adc.w	r0, r3, r2
 80852b4:	bf08      	it	eq
 80852b6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80852ba:	4770      	bx	lr

080852bc <__aeabi_fmul>:
 80852bc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80852c0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80852c4:	bf1e      	ittt	ne
 80852c6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80852ca:	ea92 0f0c 	teqne	r2, ip
 80852ce:	ea93 0f0c 	teqne	r3, ip
 80852d2:	d06f      	beq.n	80853b4 <__aeabi_fmul+0xf8>
 80852d4:	441a      	add	r2, r3
 80852d6:	ea80 0c01 	eor.w	ip, r0, r1
 80852da:	0240      	lsls	r0, r0, #9
 80852dc:	bf18      	it	ne
 80852de:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80852e2:	d01e      	beq.n	8085322 <__aeabi_fmul+0x66>
 80852e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80852e8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80852ec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80852f0:	fba0 3101 	umull	r3, r1, r0, r1
 80852f4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80852f8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80852fc:	bf3e      	ittt	cc
 80852fe:	0049      	lslcc	r1, r1, #1
 8085300:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8085304:	005b      	lslcc	r3, r3, #1
 8085306:	ea40 0001 	orr.w	r0, r0, r1
 808530a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808530e:	2afd      	cmp	r2, #253	; 0xfd
 8085310:	d81d      	bhi.n	808534e <__aeabi_fmul+0x92>
 8085312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8085316:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808531a:	bf08      	it	eq
 808531c:	f020 0001 	biceq.w	r0, r0, #1
 8085320:	4770      	bx	lr
 8085322:	f090 0f00 	teq	r0, #0
 8085326:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808532a:	bf08      	it	eq
 808532c:	0249      	lsleq	r1, r1, #9
 808532e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8085332:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8085336:	3a7f      	subs	r2, #127	; 0x7f
 8085338:	bfc2      	ittt	gt
 808533a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808533e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8085342:	4770      	bxgt	lr
 8085344:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8085348:	f04f 0300 	mov.w	r3, #0
 808534c:	3a01      	subs	r2, #1
 808534e:	dc5d      	bgt.n	808540c <__aeabi_fmul+0x150>
 8085350:	f112 0f19 	cmn.w	r2, #25
 8085354:	bfdc      	itt	le
 8085356:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808535a:	4770      	bxle	lr
 808535c:	f1c2 0200 	rsb	r2, r2, #0
 8085360:	0041      	lsls	r1, r0, #1
 8085362:	fa21 f102 	lsr.w	r1, r1, r2
 8085366:	f1c2 0220 	rsb	r2, r2, #32
 808536a:	fa00 fc02 	lsl.w	ip, r0, r2
 808536e:	ea5f 0031 	movs.w	r0, r1, rrx
 8085372:	f140 0000 	adc.w	r0, r0, #0
 8085376:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808537a:	bf08      	it	eq
 808537c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8085380:	4770      	bx	lr
 8085382:	f092 0f00 	teq	r2, #0
 8085386:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808538a:	bf02      	ittt	eq
 808538c:	0040      	lsleq	r0, r0, #1
 808538e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8085392:	3a01      	subeq	r2, #1
 8085394:	d0f9      	beq.n	808538a <__aeabi_fmul+0xce>
 8085396:	ea40 000c 	orr.w	r0, r0, ip
 808539a:	f093 0f00 	teq	r3, #0
 808539e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80853a2:	bf02      	ittt	eq
 80853a4:	0049      	lsleq	r1, r1, #1
 80853a6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80853aa:	3b01      	subeq	r3, #1
 80853ac:	d0f9      	beq.n	80853a2 <__aeabi_fmul+0xe6>
 80853ae:	ea41 010c 	orr.w	r1, r1, ip
 80853b2:	e78f      	b.n	80852d4 <__aeabi_fmul+0x18>
 80853b4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80853b8:	ea92 0f0c 	teq	r2, ip
 80853bc:	bf18      	it	ne
 80853be:	ea93 0f0c 	teqne	r3, ip
 80853c2:	d00a      	beq.n	80853da <__aeabi_fmul+0x11e>
 80853c4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80853c8:	bf18      	it	ne
 80853ca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80853ce:	d1d8      	bne.n	8085382 <__aeabi_fmul+0xc6>
 80853d0:	ea80 0001 	eor.w	r0, r0, r1
 80853d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80853d8:	4770      	bx	lr
 80853da:	f090 0f00 	teq	r0, #0
 80853de:	bf17      	itett	ne
 80853e0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80853e4:	4608      	moveq	r0, r1
 80853e6:	f091 0f00 	teqne	r1, #0
 80853ea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80853ee:	d014      	beq.n	808541a <__aeabi_fmul+0x15e>
 80853f0:	ea92 0f0c 	teq	r2, ip
 80853f4:	d101      	bne.n	80853fa <__aeabi_fmul+0x13e>
 80853f6:	0242      	lsls	r2, r0, #9
 80853f8:	d10f      	bne.n	808541a <__aeabi_fmul+0x15e>
 80853fa:	ea93 0f0c 	teq	r3, ip
 80853fe:	d103      	bne.n	8085408 <__aeabi_fmul+0x14c>
 8085400:	024b      	lsls	r3, r1, #9
 8085402:	bf18      	it	ne
 8085404:	4608      	movne	r0, r1
 8085406:	d108      	bne.n	808541a <__aeabi_fmul+0x15e>
 8085408:	ea80 0001 	eor.w	r0, r0, r1
 808540c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8085410:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8085414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8085418:	4770      	bx	lr
 808541a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808541e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8085422:	4770      	bx	lr

08085424 <__aeabi_fdiv>:
 8085424:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8085428:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808542c:	bf1e      	ittt	ne
 808542e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8085432:	ea92 0f0c 	teqne	r2, ip
 8085436:	ea93 0f0c 	teqne	r3, ip
 808543a:	d069      	beq.n	8085510 <__aeabi_fdiv+0xec>
 808543c:	eba2 0203 	sub.w	r2, r2, r3
 8085440:	ea80 0c01 	eor.w	ip, r0, r1
 8085444:	0249      	lsls	r1, r1, #9
 8085446:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808544a:	d037      	beq.n	80854bc <__aeabi_fdiv+0x98>
 808544c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8085450:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8085454:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8085458:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808545c:	428b      	cmp	r3, r1
 808545e:	bf38      	it	cc
 8085460:	005b      	lslcc	r3, r3, #1
 8085462:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8085466:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808546a:	428b      	cmp	r3, r1
 808546c:	bf24      	itt	cs
 808546e:	1a5b      	subcs	r3, r3, r1
 8085470:	ea40 000c 	orrcs.w	r0, r0, ip
 8085474:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8085478:	bf24      	itt	cs
 808547a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808547e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8085482:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8085486:	bf24      	itt	cs
 8085488:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808548c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8085490:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8085494:	bf24      	itt	cs
 8085496:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808549a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808549e:	011b      	lsls	r3, r3, #4
 80854a0:	bf18      	it	ne
 80854a2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80854a6:	d1e0      	bne.n	808546a <__aeabi_fdiv+0x46>
 80854a8:	2afd      	cmp	r2, #253	; 0xfd
 80854aa:	f63f af50 	bhi.w	808534e <__aeabi_fmul+0x92>
 80854ae:	428b      	cmp	r3, r1
 80854b0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80854b4:	bf08      	it	eq
 80854b6:	f020 0001 	biceq.w	r0, r0, #1
 80854ba:	4770      	bx	lr
 80854bc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80854c0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80854c4:	327f      	adds	r2, #127	; 0x7f
 80854c6:	bfc2      	ittt	gt
 80854c8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80854cc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80854d0:	4770      	bxgt	lr
 80854d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80854d6:	f04f 0300 	mov.w	r3, #0
 80854da:	3a01      	subs	r2, #1
 80854dc:	e737      	b.n	808534e <__aeabi_fmul+0x92>
 80854de:	f092 0f00 	teq	r2, #0
 80854e2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80854e6:	bf02      	ittt	eq
 80854e8:	0040      	lsleq	r0, r0, #1
 80854ea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80854ee:	3a01      	subeq	r2, #1
 80854f0:	d0f9      	beq.n	80854e6 <__aeabi_fdiv+0xc2>
 80854f2:	ea40 000c 	orr.w	r0, r0, ip
 80854f6:	f093 0f00 	teq	r3, #0
 80854fa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80854fe:	bf02      	ittt	eq
 8085500:	0049      	lsleq	r1, r1, #1
 8085502:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8085506:	3b01      	subeq	r3, #1
 8085508:	d0f9      	beq.n	80854fe <__aeabi_fdiv+0xda>
 808550a:	ea41 010c 	orr.w	r1, r1, ip
 808550e:	e795      	b.n	808543c <__aeabi_fdiv+0x18>
 8085510:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8085514:	ea92 0f0c 	teq	r2, ip
 8085518:	d108      	bne.n	808552c <__aeabi_fdiv+0x108>
 808551a:	0242      	lsls	r2, r0, #9
 808551c:	f47f af7d 	bne.w	808541a <__aeabi_fmul+0x15e>
 8085520:	ea93 0f0c 	teq	r3, ip
 8085524:	f47f af70 	bne.w	8085408 <__aeabi_fmul+0x14c>
 8085528:	4608      	mov	r0, r1
 808552a:	e776      	b.n	808541a <__aeabi_fmul+0x15e>
 808552c:	ea93 0f0c 	teq	r3, ip
 8085530:	d104      	bne.n	808553c <__aeabi_fdiv+0x118>
 8085532:	024b      	lsls	r3, r1, #9
 8085534:	f43f af4c 	beq.w	80853d0 <__aeabi_fmul+0x114>
 8085538:	4608      	mov	r0, r1
 808553a:	e76e      	b.n	808541a <__aeabi_fmul+0x15e>
 808553c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8085540:	bf18      	it	ne
 8085542:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8085546:	d1ca      	bne.n	80854de <__aeabi_fdiv+0xba>
 8085548:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808554c:	f47f af5c 	bne.w	8085408 <__aeabi_fmul+0x14c>
 8085550:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8085554:	f47f af3c 	bne.w	80853d0 <__aeabi_fmul+0x114>
 8085558:	e75f      	b.n	808541a <__aeabi_fmul+0x15e>
 808555a:	bf00      	nop

0808555c <__gesf2>:
 808555c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8085560:	e006      	b.n	8085570 <__cmpsf2+0x4>
 8085562:	bf00      	nop

08085564 <__lesf2>:
 8085564:	f04f 0c01 	mov.w	ip, #1
 8085568:	e002      	b.n	8085570 <__cmpsf2+0x4>
 808556a:	bf00      	nop

0808556c <__cmpsf2>:
 808556c:	f04f 0c01 	mov.w	ip, #1
 8085570:	f84d cd04 	str.w	ip, [sp, #-4]!
 8085574:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8085578:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808557c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8085580:	bf18      	it	ne
 8085582:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8085586:	d011      	beq.n	80855ac <__cmpsf2+0x40>
 8085588:	b001      	add	sp, #4
 808558a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808558e:	bf18      	it	ne
 8085590:	ea90 0f01 	teqne	r0, r1
 8085594:	bf58      	it	pl
 8085596:	ebb2 0003 	subspl.w	r0, r2, r3
 808559a:	bf88      	it	hi
 808559c:	17c8      	asrhi	r0, r1, #31
 808559e:	bf38      	it	cc
 80855a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80855a4:	bf18      	it	ne
 80855a6:	f040 0001 	orrne.w	r0, r0, #1
 80855aa:	4770      	bx	lr
 80855ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80855b0:	d102      	bne.n	80855b8 <__cmpsf2+0x4c>
 80855b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80855b6:	d105      	bne.n	80855c4 <__cmpsf2+0x58>
 80855b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80855bc:	d1e4      	bne.n	8085588 <__cmpsf2+0x1c>
 80855be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80855c2:	d0e1      	beq.n	8085588 <__cmpsf2+0x1c>
 80855c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80855c8:	4770      	bx	lr
 80855ca:	bf00      	nop

080855cc <__aeabi_cfrcmple>:
 80855cc:	4684      	mov	ip, r0
 80855ce:	4608      	mov	r0, r1
 80855d0:	4661      	mov	r1, ip
 80855d2:	e7ff      	b.n	80855d4 <__aeabi_cfcmpeq>

080855d4 <__aeabi_cfcmpeq>:
 80855d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80855d6:	f7ff ffc9 	bl	808556c <__cmpsf2>
 80855da:	2800      	cmp	r0, #0
 80855dc:	bf48      	it	mi
 80855de:	f110 0f00 	cmnmi.w	r0, #0
 80855e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080855e4 <__aeabi_fcmpeq>:
 80855e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80855e8:	f7ff fff4 	bl	80855d4 <__aeabi_cfcmpeq>
 80855ec:	bf0c      	ite	eq
 80855ee:	2001      	moveq	r0, #1
 80855f0:	2000      	movne	r0, #0
 80855f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80855f6:	bf00      	nop

080855f8 <__aeabi_fcmplt>:
 80855f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80855fc:	f7ff ffea 	bl	80855d4 <__aeabi_cfcmpeq>
 8085600:	bf34      	ite	cc
 8085602:	2001      	movcc	r0, #1
 8085604:	2000      	movcs	r0, #0
 8085606:	f85d fb08 	ldr.w	pc, [sp], #8
 808560a:	bf00      	nop

0808560c <__aeabi_fcmple>:
 808560c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085610:	f7ff ffe0 	bl	80855d4 <__aeabi_cfcmpeq>
 8085614:	bf94      	ite	ls
 8085616:	2001      	movls	r0, #1
 8085618:	2000      	movhi	r0, #0
 808561a:	f85d fb08 	ldr.w	pc, [sp], #8
 808561e:	bf00      	nop

08085620 <__aeabi_fcmpge>:
 8085620:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085624:	f7ff ffd2 	bl	80855cc <__aeabi_cfrcmple>
 8085628:	bf94      	ite	ls
 808562a:	2001      	movls	r0, #1
 808562c:	2000      	movhi	r0, #0
 808562e:	f85d fb08 	ldr.w	pc, [sp], #8
 8085632:	bf00      	nop

08085634 <__aeabi_fcmpgt>:
 8085634:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085638:	f7ff ffc8 	bl	80855cc <__aeabi_cfrcmple>
 808563c:	bf34      	ite	cc
 808563e:	2001      	movcc	r0, #1
 8085640:	2000      	movcs	r0, #0
 8085642:	f85d fb08 	ldr.w	pc, [sp], #8
 8085646:	bf00      	nop

08085648 <__aeabi_f2iz>:
 8085648:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808564c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8085650:	d30f      	bcc.n	8085672 <__aeabi_f2iz+0x2a>
 8085652:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8085656:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808565a:	d90d      	bls.n	8085678 <__aeabi_f2iz+0x30>
 808565c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8085660:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8085664:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8085668:	fa23 f002 	lsr.w	r0, r3, r2
 808566c:	bf18      	it	ne
 808566e:	4240      	negne	r0, r0
 8085670:	4770      	bx	lr
 8085672:	f04f 0000 	mov.w	r0, #0
 8085676:	4770      	bx	lr
 8085678:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808567c:	d101      	bne.n	8085682 <__aeabi_f2iz+0x3a>
 808567e:	0242      	lsls	r2, r0, #9
 8085680:	d105      	bne.n	808568e <__aeabi_f2iz+0x46>
 8085682:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8085686:	bf08      	it	eq
 8085688:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808568c:	4770      	bx	lr
 808568e:	f04f 0000 	mov.w	r0, #0
 8085692:	4770      	bx	lr

08085694 <asctime>:
 8085694:	4b09      	ldr	r3, [pc, #36]	; (80856bc <asctime+0x28>)
 8085696:	b570      	push	{r4, r5, r6, lr}
 8085698:	681c      	ldr	r4, [r3, #0]
 808569a:	4606      	mov	r6, r0
 808569c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 808569e:	b93d      	cbnz	r5, 80856b0 <asctime+0x1c>
 80856a0:	201a      	movs	r0, #26
 80856a2:	f7fd f9c3 	bl	8082a2c <malloc>
 80856a6:	221a      	movs	r2, #26
 80856a8:	6420      	str	r0, [r4, #64]	; 0x40
 80856aa:	4629      	mov	r1, r5
 80856ac:	f000 f95e 	bl	808596c <memset>
 80856b0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80856b2:	4630      	mov	r0, r6
 80856b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80856b8:	f000 b802 	b.w	80856c0 <asctime_r>
 80856bc:	200000e4 	.word	0x200000e4

080856c0 <asctime_r>:
 80856c0:	b510      	push	{r4, lr}
 80856c2:	460c      	mov	r4, r1
 80856c4:	6941      	ldr	r1, [r0, #20]
 80856c6:	b086      	sub	sp, #24
 80856c8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80856cc:	6903      	ldr	r3, [r0, #16]
 80856ce:	6982      	ldr	r2, [r0, #24]
 80856d0:	9104      	str	r1, [sp, #16]
 80856d2:	6801      	ldr	r1, [r0, #0]
 80856d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80856d8:	9103      	str	r1, [sp, #12]
 80856da:	6841      	ldr	r1, [r0, #4]
 80856dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80856e0:	9102      	str	r1, [sp, #8]
 80856e2:	6881      	ldr	r1, [r0, #8]
 80856e4:	9101      	str	r1, [sp, #4]
 80856e6:	68c1      	ldr	r1, [r0, #12]
 80856e8:	4620      	mov	r0, r4
 80856ea:	9100      	str	r1, [sp, #0]
 80856ec:	4904      	ldr	r1, [pc, #16]	; (8085700 <asctime_r+0x40>)
 80856ee:	440b      	add	r3, r1
 80856f0:	4904      	ldr	r1, [pc, #16]	; (8085704 <asctime_r+0x44>)
 80856f2:	440a      	add	r2, r1
 80856f4:	4904      	ldr	r1, [pc, #16]	; (8085708 <asctime_r+0x48>)
 80856f6:	f7fd f9b1 	bl	8082a5c <siprintf>
 80856fa:	4620      	mov	r0, r4
 80856fc:	b006      	add	sp, #24
 80856fe:	bd10      	pop	{r4, pc}
 8085700:	08086c0a 	.word	0x08086c0a
 8085704:	08086bf5 	.word	0x08086bf5
 8085708:	08086c2e 	.word	0x08086c2e

0808570c <atoi>:
 808570c:	220a      	movs	r2, #10
 808570e:	2100      	movs	r1, #0
 8085710:	f000 ba40 	b.w	8085b94 <strtol>

08085714 <__cxa_atexit>:
 8085714:	b510      	push	{r4, lr}
 8085716:	4c05      	ldr	r4, [pc, #20]	; (808572c <__cxa_atexit+0x18>)
 8085718:	4613      	mov	r3, r2
 808571a:	b12c      	cbz	r4, 8085728 <__cxa_atexit+0x14>
 808571c:	460a      	mov	r2, r1
 808571e:	4601      	mov	r1, r0
 8085720:	2002      	movs	r0, #2
 8085722:	f3af 8000 	nop.w
 8085726:	bd10      	pop	{r4, pc}
 8085728:	4620      	mov	r0, r4
 808572a:	bd10      	pop	{r4, pc}
 808572c:	00000000 	.word	0x00000000

08085730 <localtime>:
 8085730:	b538      	push	{r3, r4, r5, lr}
 8085732:	4b07      	ldr	r3, [pc, #28]	; (8085750 <localtime+0x20>)
 8085734:	4605      	mov	r5, r0
 8085736:	681c      	ldr	r4, [r3, #0]
 8085738:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808573a:	b91b      	cbnz	r3, 8085744 <localtime+0x14>
 808573c:	2024      	movs	r0, #36	; 0x24
 808573e:	f7fd f975 	bl	8082a2c <malloc>
 8085742:	63e0      	str	r0, [r4, #60]	; 0x3c
 8085744:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8085746:	4628      	mov	r0, r5
 8085748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808574c:	f000 b802 	b.w	8085754 <localtime_r>
 8085750:	200000e4 	.word	0x200000e4

08085754 <localtime_r>:
 8085754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8085758:	460c      	mov	r4, r1
 808575a:	4680      	mov	r8, r0
 808575c:	f000 fd20 	bl	80861a0 <__gettzinfo>
 8085760:	4621      	mov	r1, r4
 8085762:	4607      	mov	r7, r0
 8085764:	4640      	mov	r0, r8
 8085766:	f000 fd1f 	bl	80861a8 <gmtime_r>
 808576a:	6946      	ldr	r6, [r0, #20]
 808576c:	4604      	mov	r4, r0
 808576e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8085772:	07b3      	lsls	r3, r6, #30
 8085774:	d105      	bne.n	8085782 <localtime_r+0x2e>
 8085776:	2264      	movs	r2, #100	; 0x64
 8085778:	fb96 f3f2 	sdiv	r3, r6, r2
 808577c:	fb02 6313 	mls	r3, r2, r3, r6
 8085780:	b94b      	cbnz	r3, 8085796 <localtime_r+0x42>
 8085782:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8085786:	fb96 f3f5 	sdiv	r3, r6, r5
 808578a:	fb05 6513 	mls	r5, r5, r3, r6
 808578e:	fab5 f385 	clz	r3, r5
 8085792:	095b      	lsrs	r3, r3, #5
 8085794:	e000      	b.n	8085798 <localtime_r+0x44>
 8085796:	2301      	movs	r3, #1
 8085798:	4a5f      	ldr	r2, [pc, #380]	; (8085918 <localtime_r+0x1c4>)
 808579a:	2530      	movs	r5, #48	; 0x30
 808579c:	fb05 2503 	mla	r5, r5, r3, r2
 80857a0:	f000 fb32 	bl	8085e08 <__tz_lock>
 80857a4:	f000 fb32 	bl	8085e0c <_tzset_unlocked>
 80857a8:	4b5c      	ldr	r3, [pc, #368]	; (808591c <localtime_r+0x1c8>)
 80857aa:	681b      	ldr	r3, [r3, #0]
 80857ac:	b1f3      	cbz	r3, 80857ec <localtime_r+0x98>
 80857ae:	687b      	ldr	r3, [r7, #4]
 80857b0:	429e      	cmp	r6, r3
 80857b2:	d105      	bne.n	80857c0 <localtime_r+0x6c>
 80857b4:	6839      	ldr	r1, [r7, #0]
 80857b6:	f8d8 3000 	ldr.w	r3, [r8]
 80857ba:	69fa      	ldr	r2, [r7, #28]
 80857bc:	b941      	cbnz	r1, 80857d0 <localtime_r+0x7c>
 80857be:	e00a      	b.n	80857d6 <localtime_r+0x82>
 80857c0:	4630      	mov	r0, r6
 80857c2:	f000 fa79 	bl	8085cb8 <__tzcalc_limits>
 80857c6:	2800      	cmp	r0, #0
 80857c8:	d1f4      	bne.n	80857b4 <localtime_r+0x60>
 80857ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80857ce:	e00d      	b.n	80857ec <localtime_r+0x98>
 80857d0:	4293      	cmp	r3, r2
 80857d2:	db08      	blt.n	80857e6 <localtime_r+0x92>
 80857d4:	e001      	b.n	80857da <localtime_r+0x86>
 80857d6:	4293      	cmp	r3, r2
 80857d8:	da07      	bge.n	80857ea <localtime_r+0x96>
 80857da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80857dc:	4293      	cmp	r3, r2
 80857de:	bfac      	ite	ge
 80857e0:	2300      	movge	r3, #0
 80857e2:	2301      	movlt	r3, #1
 80857e4:	e002      	b.n	80857ec <localtime_r+0x98>
 80857e6:	2300      	movs	r3, #0
 80857e8:	e000      	b.n	80857ec <localtime_r+0x98>
 80857ea:	2301      	movs	r3, #1
 80857ec:	6223      	str	r3, [r4, #32]
 80857ee:	6a23      	ldr	r3, [r4, #32]
 80857f0:	203c      	movs	r0, #60	; 0x3c
 80857f2:	2b01      	cmp	r3, #1
 80857f4:	bf0c      	ite	eq
 80857f6:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80857f8:	6a39      	ldrne	r1, [r7, #32]
 80857fa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80857fe:	fb91 f6f3 	sdiv	r6, r1, r3
 8085802:	fb03 1316 	mls	r3, r3, r6, r1
 8085806:	fb93 f2f0 	sdiv	r2, r3, r0
 808580a:	fb00 3012 	mls	r0, r0, r2, r3
 808580e:	6861      	ldr	r1, [r4, #4]
 8085810:	6823      	ldr	r3, [r4, #0]
 8085812:	1a89      	subs	r1, r1, r2
 8085814:	68a2      	ldr	r2, [r4, #8]
 8085816:	1a1b      	subs	r3, r3, r0
 8085818:	1b92      	subs	r2, r2, r6
 808581a:	2b3b      	cmp	r3, #59	; 0x3b
 808581c:	6023      	str	r3, [r4, #0]
 808581e:	6061      	str	r1, [r4, #4]
 8085820:	60a2      	str	r2, [r4, #8]
 8085822:	dd03      	ble.n	808582c <localtime_r+0xd8>
 8085824:	3101      	adds	r1, #1
 8085826:	6061      	str	r1, [r4, #4]
 8085828:	3b3c      	subs	r3, #60	; 0x3c
 808582a:	e004      	b.n	8085836 <localtime_r+0xe2>
 808582c:	2b00      	cmp	r3, #0
 808582e:	da03      	bge.n	8085838 <localtime_r+0xe4>
 8085830:	3901      	subs	r1, #1
 8085832:	6061      	str	r1, [r4, #4]
 8085834:	333c      	adds	r3, #60	; 0x3c
 8085836:	6023      	str	r3, [r4, #0]
 8085838:	6863      	ldr	r3, [r4, #4]
 808583a:	2b3b      	cmp	r3, #59	; 0x3b
 808583c:	dd03      	ble.n	8085846 <localtime_r+0xf2>
 808583e:	3201      	adds	r2, #1
 8085840:	60a2      	str	r2, [r4, #8]
 8085842:	3b3c      	subs	r3, #60	; 0x3c
 8085844:	e004      	b.n	8085850 <localtime_r+0xfc>
 8085846:	2b00      	cmp	r3, #0
 8085848:	da03      	bge.n	8085852 <localtime_r+0xfe>
 808584a:	3a01      	subs	r2, #1
 808584c:	60a2      	str	r2, [r4, #8]
 808584e:	333c      	adds	r3, #60	; 0x3c
 8085850:	6063      	str	r3, [r4, #4]
 8085852:	68a3      	ldr	r3, [r4, #8]
 8085854:	2b17      	cmp	r3, #23
 8085856:	dd22      	ble.n	808589e <localtime_r+0x14a>
 8085858:	69e2      	ldr	r2, [r4, #28]
 808585a:	3b18      	subs	r3, #24
 808585c:	3201      	adds	r2, #1
 808585e:	61e2      	str	r2, [r4, #28]
 8085860:	69a2      	ldr	r2, [r4, #24]
 8085862:	60a3      	str	r3, [r4, #8]
 8085864:	3201      	adds	r2, #1
 8085866:	2a06      	cmp	r2, #6
 8085868:	bfc8      	it	gt
 808586a:	2200      	movgt	r2, #0
 808586c:	61a2      	str	r2, [r4, #24]
 808586e:	68e2      	ldr	r2, [r4, #12]
 8085870:	6923      	ldr	r3, [r4, #16]
 8085872:	3201      	adds	r2, #1
 8085874:	60e2      	str	r2, [r4, #12]
 8085876:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 808587a:	428a      	cmp	r2, r1
 808587c:	dd46      	ble.n	808590c <localtime_r+0x1b8>
 808587e:	3301      	adds	r3, #1
 8085880:	2b0c      	cmp	r3, #12
 8085882:	bf08      	it	eq
 8085884:	6963      	ldreq	r3, [r4, #20]
 8085886:	eba2 0201 	sub.w	r2, r2, r1
 808588a:	60e2      	str	r2, [r4, #12]
 808588c:	bf05      	ittet	eq
 808588e:	3301      	addeq	r3, #1
 8085890:	2200      	moveq	r2, #0
 8085892:	6123      	strne	r3, [r4, #16]
 8085894:	6122      	streq	r2, [r4, #16]
 8085896:	bf04      	itt	eq
 8085898:	6163      	streq	r3, [r4, #20]
 808589a:	61e2      	streq	r2, [r4, #28]
 808589c:	e036      	b.n	808590c <localtime_r+0x1b8>
 808589e:	2b00      	cmp	r3, #0
 80858a0:	da34      	bge.n	808590c <localtime_r+0x1b8>
 80858a2:	69e2      	ldr	r2, [r4, #28]
 80858a4:	3318      	adds	r3, #24
 80858a6:	3a01      	subs	r2, #1
 80858a8:	61e2      	str	r2, [r4, #28]
 80858aa:	69a2      	ldr	r2, [r4, #24]
 80858ac:	60a3      	str	r3, [r4, #8]
 80858ae:	3a01      	subs	r2, #1
 80858b0:	bf48      	it	mi
 80858b2:	2206      	movmi	r2, #6
 80858b4:	61a2      	str	r2, [r4, #24]
 80858b6:	68e2      	ldr	r2, [r4, #12]
 80858b8:	3a01      	subs	r2, #1
 80858ba:	60e2      	str	r2, [r4, #12]
 80858bc:	bb32      	cbnz	r2, 808590c <localtime_r+0x1b8>
 80858be:	6923      	ldr	r3, [r4, #16]
 80858c0:	3b01      	subs	r3, #1
 80858c2:	d401      	bmi.n	80858c8 <localtime_r+0x174>
 80858c4:	6123      	str	r3, [r4, #16]
 80858c6:	e01d      	b.n	8085904 <localtime_r+0x1b0>
 80858c8:	230b      	movs	r3, #11
 80858ca:	6123      	str	r3, [r4, #16]
 80858cc:	6963      	ldr	r3, [r4, #20]
 80858ce:	1e5a      	subs	r2, r3, #1
 80858d0:	f012 0f03 	tst.w	r2, #3
 80858d4:	6162      	str	r2, [r4, #20]
 80858d6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80858da:	d105      	bne.n	80858e8 <localtime_r+0x194>
 80858dc:	2164      	movs	r1, #100	; 0x64
 80858de:	fb93 f2f1 	sdiv	r2, r3, r1
 80858e2:	fb01 3212 	mls	r2, r1, r2, r3
 80858e6:	b94a      	cbnz	r2, 80858fc <localtime_r+0x1a8>
 80858e8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80858ec:	fb93 f2f1 	sdiv	r2, r3, r1
 80858f0:	fb01 3312 	mls	r3, r1, r2, r3
 80858f4:	fab3 f383 	clz	r3, r3
 80858f8:	095b      	lsrs	r3, r3, #5
 80858fa:	e000      	b.n	80858fe <localtime_r+0x1aa>
 80858fc:	2301      	movs	r3, #1
 80858fe:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8085902:	61e3      	str	r3, [r4, #28]
 8085904:	6923      	ldr	r3, [r4, #16]
 8085906:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808590a:	60e3      	str	r3, [r4, #12]
 808590c:	f000 fa7d 	bl	8085e0a <__tz_unlock>
 8085910:	4620      	mov	r0, r4
 8085912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8085916:	bf00      	nop
 8085918:	08086db0 	.word	0x08086db0
 808591c:	2000094c 	.word	0x2000094c

08085920 <memcpy>:
 8085920:	b510      	push	{r4, lr}
 8085922:	1e43      	subs	r3, r0, #1
 8085924:	440a      	add	r2, r1
 8085926:	4291      	cmp	r1, r2
 8085928:	d004      	beq.n	8085934 <memcpy+0x14>
 808592a:	f811 4b01 	ldrb.w	r4, [r1], #1
 808592e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8085932:	e7f8      	b.n	8085926 <memcpy+0x6>
 8085934:	bd10      	pop	{r4, pc}

08085936 <memmove>:
 8085936:	4288      	cmp	r0, r1
 8085938:	b510      	push	{r4, lr}
 808593a:	eb01 0302 	add.w	r3, r1, r2
 808593e:	d801      	bhi.n	8085944 <memmove+0xe>
 8085940:	1e42      	subs	r2, r0, #1
 8085942:	e00b      	b.n	808595c <memmove+0x26>
 8085944:	4298      	cmp	r0, r3
 8085946:	d2fb      	bcs.n	8085940 <memmove+0xa>
 8085948:	1881      	adds	r1, r0, r2
 808594a:	1ad2      	subs	r2, r2, r3
 808594c:	42d3      	cmn	r3, r2
 808594e:	d004      	beq.n	808595a <memmove+0x24>
 8085950:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8085954:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8085958:	e7f8      	b.n	808594c <memmove+0x16>
 808595a:	bd10      	pop	{r4, pc}
 808595c:	4299      	cmp	r1, r3
 808595e:	d004      	beq.n	808596a <memmove+0x34>
 8085960:	f811 4b01 	ldrb.w	r4, [r1], #1
 8085964:	f802 4f01 	strb.w	r4, [r2, #1]!
 8085968:	e7f8      	b.n	808595c <memmove+0x26>
 808596a:	bd10      	pop	{r4, pc}

0808596c <memset>:
 808596c:	4603      	mov	r3, r0
 808596e:	4402      	add	r2, r0
 8085970:	4293      	cmp	r3, r2
 8085972:	d002      	beq.n	808597a <memset+0xe>
 8085974:	f803 1b01 	strb.w	r1, [r3], #1
 8085978:	e7fa      	b.n	8085970 <memset+0x4>
 808597a:	4770      	bx	lr

0808597c <srand>:
 808597c:	b538      	push	{r3, r4, r5, lr}
 808597e:	4b12      	ldr	r3, [pc, #72]	; (80859c8 <srand+0x4c>)
 8085980:	4605      	mov	r5, r0
 8085982:	681c      	ldr	r4, [r3, #0]
 8085984:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8085986:	b9d3      	cbnz	r3, 80859be <srand+0x42>
 8085988:	2018      	movs	r0, #24
 808598a:	f7fd f84f 	bl	8082a2c <malloc>
 808598e:	f243 330e 	movw	r3, #13070	; 0x330e
 8085992:	63a0      	str	r0, [r4, #56]	; 0x38
 8085994:	8003      	strh	r3, [r0, #0]
 8085996:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 808599a:	8043      	strh	r3, [r0, #2]
 808599c:	f241 2334 	movw	r3, #4660	; 0x1234
 80859a0:	8083      	strh	r3, [r0, #4]
 80859a2:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80859a6:	80c3      	strh	r3, [r0, #6]
 80859a8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80859ac:	8103      	strh	r3, [r0, #8]
 80859ae:	2305      	movs	r3, #5
 80859b0:	8143      	strh	r3, [r0, #10]
 80859b2:	230b      	movs	r3, #11
 80859b4:	8183      	strh	r3, [r0, #12]
 80859b6:	2201      	movs	r2, #1
 80859b8:	2300      	movs	r3, #0
 80859ba:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80859be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80859c0:	2200      	movs	r2, #0
 80859c2:	611d      	str	r5, [r3, #16]
 80859c4:	615a      	str	r2, [r3, #20]
 80859c6:	bd38      	pop	{r3, r4, r5, pc}
 80859c8:	200000e4 	.word	0x200000e4

080859cc <strcmp>:
 80859cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80859d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80859d4:	2a01      	cmp	r2, #1
 80859d6:	bf28      	it	cs
 80859d8:	429a      	cmpcs	r2, r3
 80859da:	d0f7      	beq.n	80859cc <strcmp>
 80859dc:	1ad0      	subs	r0, r2, r3
 80859de:	4770      	bx	lr

080859e0 <strcpy>:
 80859e0:	4603      	mov	r3, r0
 80859e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80859e6:	f803 2b01 	strb.w	r2, [r3], #1
 80859ea:	2a00      	cmp	r2, #0
 80859ec:	d1f9      	bne.n	80859e2 <strcpy+0x2>
 80859ee:	4770      	bx	lr

080859f0 <strdup>:
 80859f0:	4b02      	ldr	r3, [pc, #8]	; (80859fc <strdup+0xc>)
 80859f2:	4601      	mov	r1, r0
 80859f4:	6818      	ldr	r0, [r3, #0]
 80859f6:	f000 b803 	b.w	8085a00 <_strdup_r>
 80859fa:	bf00      	nop
 80859fc:	200000e4 	.word	0x200000e4

08085a00 <_strdup_r>:
 8085a00:	b570      	push	{r4, r5, r6, lr}
 8085a02:	4606      	mov	r6, r0
 8085a04:	4608      	mov	r0, r1
 8085a06:	460c      	mov	r4, r1
 8085a08:	f000 f80d 	bl	8085a26 <strlen>
 8085a0c:	1c45      	adds	r5, r0, #1
 8085a0e:	4629      	mov	r1, r5
 8085a10:	4630      	mov	r0, r6
 8085a12:	f7fd f843 	bl	8082a9c <_malloc_r>
 8085a16:	4606      	mov	r6, r0
 8085a18:	b118      	cbz	r0, 8085a22 <_strdup_r+0x22>
 8085a1a:	462a      	mov	r2, r5
 8085a1c:	4621      	mov	r1, r4
 8085a1e:	f7ff ff7f 	bl	8085920 <memcpy>
 8085a22:	4630      	mov	r0, r6
 8085a24:	bd70      	pop	{r4, r5, r6, pc}

08085a26 <strlen>:
 8085a26:	4603      	mov	r3, r0
 8085a28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8085a2c:	2a00      	cmp	r2, #0
 8085a2e:	d1fb      	bne.n	8085a28 <strlen+0x2>
 8085a30:	1a18      	subs	r0, r3, r0
 8085a32:	3801      	subs	r0, #1
 8085a34:	4770      	bx	lr

08085a36 <strncmp>:
 8085a36:	b530      	push	{r4, r5, lr}
 8085a38:	b182      	cbz	r2, 8085a5c <strncmp+0x26>
 8085a3a:	1e45      	subs	r5, r0, #1
 8085a3c:	3901      	subs	r1, #1
 8085a3e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8085a42:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8085a46:	42a3      	cmp	r3, r4
 8085a48:	d106      	bne.n	8085a58 <strncmp+0x22>
 8085a4a:	43ec      	mvns	r4, r5
 8085a4c:	4414      	add	r4, r2
 8085a4e:	42e0      	cmn	r0, r4
 8085a50:	d001      	beq.n	8085a56 <strncmp+0x20>
 8085a52:	2b00      	cmp	r3, #0
 8085a54:	d1f3      	bne.n	8085a3e <strncmp+0x8>
 8085a56:	461c      	mov	r4, r3
 8085a58:	1b18      	subs	r0, r3, r4
 8085a5a:	bd30      	pop	{r4, r5, pc}
 8085a5c:	4610      	mov	r0, r2
 8085a5e:	bd30      	pop	{r4, r5, pc}

08085a60 <strncpy>:
 8085a60:	4603      	mov	r3, r0
 8085a62:	b510      	push	{r4, lr}
 8085a64:	b142      	cbz	r2, 8085a78 <strncpy+0x18>
 8085a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8085a6a:	3a01      	subs	r2, #1
 8085a6c:	f803 4b01 	strb.w	r4, [r3], #1
 8085a70:	2c00      	cmp	r4, #0
 8085a72:	d1f7      	bne.n	8085a64 <strncpy+0x4>
 8085a74:	441a      	add	r2, r3
 8085a76:	e000      	b.n	8085a7a <strncpy+0x1a>
 8085a78:	bd10      	pop	{r4, pc}
 8085a7a:	4293      	cmp	r3, r2
 8085a7c:	d002      	beq.n	8085a84 <strncpy+0x24>
 8085a7e:	f803 4b01 	strb.w	r4, [r3], #1
 8085a82:	e7fa      	b.n	8085a7a <strncpy+0x1a>
 8085a84:	bd10      	pop	{r4, pc}
	...

08085a88 <_strtol_r>:
 8085a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085a8c:	460f      	mov	r7, r1
 8085a8e:	4680      	mov	r8, r0
 8085a90:	483f      	ldr	r0, [pc, #252]	; (8085b90 <_strtol_r+0x108>)
 8085a92:	f8d0 9000 	ldr.w	r9, [r0]
 8085a96:	463d      	mov	r5, r7
 8085a98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8085a9c:	eb09 0004 	add.w	r0, r9, r4
 8085aa0:	7840      	ldrb	r0, [r0, #1]
 8085aa2:	f000 0008 	and.w	r0, r0, #8
 8085aa6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8085aaa:	b108      	cbz	r0, 8085ab0 <_strtol_r+0x28>
 8085aac:	462f      	mov	r7, r5
 8085aae:	e7f2      	b.n	8085a96 <_strtol_r+0xe>
 8085ab0:	2c2d      	cmp	r4, #45	; 0x2d
 8085ab2:	d103      	bne.n	8085abc <_strtol_r+0x34>
 8085ab4:	1cbd      	adds	r5, r7, #2
 8085ab6:	787c      	ldrb	r4, [r7, #1]
 8085ab8:	2601      	movs	r6, #1
 8085aba:	e003      	b.n	8085ac4 <_strtol_r+0x3c>
 8085abc:	2c2b      	cmp	r4, #43	; 0x2b
 8085abe:	bf04      	itt	eq
 8085ac0:	787c      	ldrbeq	r4, [r7, #1]
 8085ac2:	1cbd      	addeq	r5, r7, #2
 8085ac4:	b113      	cbz	r3, 8085acc <_strtol_r+0x44>
 8085ac6:	2b10      	cmp	r3, #16
 8085ac8:	d10a      	bne.n	8085ae0 <_strtol_r+0x58>
 8085aca:	e05b      	b.n	8085b84 <_strtol_r+0xfc>
 8085acc:	2c30      	cmp	r4, #48	; 0x30
 8085ace:	d157      	bne.n	8085b80 <_strtol_r+0xf8>
 8085ad0:	7828      	ldrb	r0, [r5, #0]
 8085ad2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8085ad6:	2858      	cmp	r0, #88	; 0x58
 8085ad8:	d14d      	bne.n	8085b76 <_strtol_r+0xee>
 8085ada:	786c      	ldrb	r4, [r5, #1]
 8085adc:	2310      	movs	r3, #16
 8085ade:	3502      	adds	r5, #2
 8085ae0:	2e00      	cmp	r6, #0
 8085ae2:	bf14      	ite	ne
 8085ae4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8085ae8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8085aec:	fbbc faf3 	udiv	sl, ip, r3
 8085af0:	2700      	movs	r7, #0
 8085af2:	4638      	mov	r0, r7
 8085af4:	fb03 cc1a 	mls	ip, r3, sl, ip
 8085af8:	eb09 0e04 	add.w	lr, r9, r4
 8085afc:	f89e e001 	ldrb.w	lr, [lr, #1]
 8085b00:	f01e 0f04 	tst.w	lr, #4
 8085b04:	d001      	beq.n	8085b0a <_strtol_r+0x82>
 8085b06:	3c30      	subs	r4, #48	; 0x30
 8085b08:	e00b      	b.n	8085b22 <_strtol_r+0x9a>
 8085b0a:	f01e 0e03 	ands.w	lr, lr, #3
 8085b0e:	d01b      	beq.n	8085b48 <_strtol_r+0xc0>
 8085b10:	f1be 0f01 	cmp.w	lr, #1
 8085b14:	bf0c      	ite	eq
 8085b16:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8085b1a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8085b1e:	ebce 0404 	rsb	r4, lr, r4
 8085b22:	42a3      	cmp	r3, r4
 8085b24:	dd10      	ble.n	8085b48 <_strtol_r+0xc0>
 8085b26:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8085b2a:	d00a      	beq.n	8085b42 <_strtol_r+0xba>
 8085b2c:	4550      	cmp	r0, sl
 8085b2e:	d806      	bhi.n	8085b3e <_strtol_r+0xb6>
 8085b30:	d101      	bne.n	8085b36 <_strtol_r+0xae>
 8085b32:	4564      	cmp	r4, ip
 8085b34:	dc03      	bgt.n	8085b3e <_strtol_r+0xb6>
 8085b36:	fb03 4000 	mla	r0, r3, r0, r4
 8085b3a:	2701      	movs	r7, #1
 8085b3c:	e001      	b.n	8085b42 <_strtol_r+0xba>
 8085b3e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8085b42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8085b46:	e7d7      	b.n	8085af8 <_strtol_r+0x70>
 8085b48:	1c7b      	adds	r3, r7, #1
 8085b4a:	d10c      	bne.n	8085b66 <_strtol_r+0xde>
 8085b4c:	2e00      	cmp	r6, #0
 8085b4e:	f04f 0322 	mov.w	r3, #34	; 0x22
 8085b52:	bf14      	ite	ne
 8085b54:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8085b58:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8085b5c:	f8c8 3000 	str.w	r3, [r8]
 8085b60:	b92a      	cbnz	r2, 8085b6e <_strtol_r+0xe6>
 8085b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085b66:	b106      	cbz	r6, 8085b6a <_strtol_r+0xe2>
 8085b68:	4240      	negs	r0, r0
 8085b6a:	b172      	cbz	r2, 8085b8a <_strtol_r+0x102>
 8085b6c:	b107      	cbz	r7, 8085b70 <_strtol_r+0xe8>
 8085b6e:	1e69      	subs	r1, r5, #1
 8085b70:	6011      	str	r1, [r2, #0]
 8085b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085b76:	2430      	movs	r4, #48	; 0x30
 8085b78:	2b00      	cmp	r3, #0
 8085b7a:	d1b1      	bne.n	8085ae0 <_strtol_r+0x58>
 8085b7c:	2308      	movs	r3, #8
 8085b7e:	e7af      	b.n	8085ae0 <_strtol_r+0x58>
 8085b80:	230a      	movs	r3, #10
 8085b82:	e7ad      	b.n	8085ae0 <_strtol_r+0x58>
 8085b84:	2c30      	cmp	r4, #48	; 0x30
 8085b86:	d0a3      	beq.n	8085ad0 <_strtol_r+0x48>
 8085b88:	e7aa      	b.n	8085ae0 <_strtol_r+0x58>
 8085b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085b8e:	bf00      	nop
 8085b90:	20000080 	.word	0x20000080

08085b94 <strtol>:
 8085b94:	4613      	mov	r3, r2
 8085b96:	460a      	mov	r2, r1
 8085b98:	4601      	mov	r1, r0
 8085b9a:	4802      	ldr	r0, [pc, #8]	; (8085ba4 <strtol+0x10>)
 8085b9c:	6800      	ldr	r0, [r0, #0]
 8085b9e:	f7ff bf73 	b.w	8085a88 <_strtol_r>
 8085ba2:	bf00      	nop
 8085ba4:	200000e4 	.word	0x200000e4

08085ba8 <_strtoul_r>:
 8085ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085bac:	460e      	mov	r6, r1
 8085bae:	4680      	mov	r8, r0
 8085bb0:	483b      	ldr	r0, [pc, #236]	; (8085ca0 <_strtoul_r+0xf8>)
 8085bb2:	f8d0 9000 	ldr.w	r9, [r0]
 8085bb6:	4635      	mov	r5, r6
 8085bb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8085bbc:	eb09 0004 	add.w	r0, r9, r4
 8085bc0:	7840      	ldrb	r0, [r0, #1]
 8085bc2:	f000 0008 	and.w	r0, r0, #8
 8085bc6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8085bca:	b108      	cbz	r0, 8085bd0 <_strtoul_r+0x28>
 8085bcc:	462e      	mov	r6, r5
 8085bce:	e7f2      	b.n	8085bb6 <_strtoul_r+0xe>
 8085bd0:	2c2d      	cmp	r4, #45	; 0x2d
 8085bd2:	d103      	bne.n	8085bdc <_strtoul_r+0x34>
 8085bd4:	1cb5      	adds	r5, r6, #2
 8085bd6:	7874      	ldrb	r4, [r6, #1]
 8085bd8:	2701      	movs	r7, #1
 8085bda:	e003      	b.n	8085be4 <_strtoul_r+0x3c>
 8085bdc:	2c2b      	cmp	r4, #43	; 0x2b
 8085bde:	bf04      	itt	eq
 8085be0:	7874      	ldrbeq	r4, [r6, #1]
 8085be2:	1cb5      	addeq	r5, r6, #2
 8085be4:	b113      	cbz	r3, 8085bec <_strtoul_r+0x44>
 8085be6:	2b10      	cmp	r3, #16
 8085be8:	d10a      	bne.n	8085c00 <_strtoul_r+0x58>
 8085bea:	e053      	b.n	8085c94 <_strtoul_r+0xec>
 8085bec:	2c30      	cmp	r4, #48	; 0x30
 8085bee:	d14f      	bne.n	8085c90 <_strtoul_r+0xe8>
 8085bf0:	7828      	ldrb	r0, [r5, #0]
 8085bf2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8085bf6:	2858      	cmp	r0, #88	; 0x58
 8085bf8:	d145      	bne.n	8085c86 <_strtoul_r+0xde>
 8085bfa:	786c      	ldrb	r4, [r5, #1]
 8085bfc:	2310      	movs	r3, #16
 8085bfe:	3502      	adds	r5, #2
 8085c00:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8085c04:	fbbc fcf3 	udiv	ip, ip, r3
 8085c08:	fb03 fa0c 	mul.w	sl, r3, ip
 8085c0c:	2600      	movs	r6, #0
 8085c0e:	ea6f 0a0a 	mvn.w	sl, sl
 8085c12:	4630      	mov	r0, r6
 8085c14:	eb09 0e04 	add.w	lr, r9, r4
 8085c18:	f89e e001 	ldrb.w	lr, [lr, #1]
 8085c1c:	f01e 0f04 	tst.w	lr, #4
 8085c20:	d001      	beq.n	8085c26 <_strtoul_r+0x7e>
 8085c22:	3c30      	subs	r4, #48	; 0x30
 8085c24:	e00b      	b.n	8085c3e <_strtoul_r+0x96>
 8085c26:	f01e 0e03 	ands.w	lr, lr, #3
 8085c2a:	d01a      	beq.n	8085c62 <_strtoul_r+0xba>
 8085c2c:	f1be 0f01 	cmp.w	lr, #1
 8085c30:	bf0c      	ite	eq
 8085c32:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8085c36:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8085c3a:	ebce 0404 	rsb	r4, lr, r4
 8085c3e:	42a3      	cmp	r3, r4
 8085c40:	dd0f      	ble.n	8085c62 <_strtoul_r+0xba>
 8085c42:	2e00      	cmp	r6, #0
 8085c44:	db08      	blt.n	8085c58 <_strtoul_r+0xb0>
 8085c46:	4560      	cmp	r0, ip
 8085c48:	d806      	bhi.n	8085c58 <_strtoul_r+0xb0>
 8085c4a:	d101      	bne.n	8085c50 <_strtoul_r+0xa8>
 8085c4c:	4554      	cmp	r4, sl
 8085c4e:	dc03      	bgt.n	8085c58 <_strtoul_r+0xb0>
 8085c50:	fb03 4000 	mla	r0, r3, r0, r4
 8085c54:	2601      	movs	r6, #1
 8085c56:	e001      	b.n	8085c5c <_strtoul_r+0xb4>
 8085c58:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8085c5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8085c60:	e7d8      	b.n	8085c14 <_strtoul_r+0x6c>
 8085c62:	2e00      	cmp	r6, #0
 8085c64:	da07      	bge.n	8085c76 <_strtoul_r+0xce>
 8085c66:	2322      	movs	r3, #34	; 0x22
 8085c68:	f8c8 3000 	str.w	r3, [r8]
 8085c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8085c70:	b92a      	cbnz	r2, 8085c7e <_strtoul_r+0xd6>
 8085c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085c76:	b107      	cbz	r7, 8085c7a <_strtoul_r+0xd2>
 8085c78:	4240      	negs	r0, r0
 8085c7a:	b172      	cbz	r2, 8085c9a <_strtoul_r+0xf2>
 8085c7c:	b106      	cbz	r6, 8085c80 <_strtoul_r+0xd8>
 8085c7e:	1e69      	subs	r1, r5, #1
 8085c80:	6011      	str	r1, [r2, #0]
 8085c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085c86:	2430      	movs	r4, #48	; 0x30
 8085c88:	2b00      	cmp	r3, #0
 8085c8a:	d1b9      	bne.n	8085c00 <_strtoul_r+0x58>
 8085c8c:	2308      	movs	r3, #8
 8085c8e:	e7b7      	b.n	8085c00 <_strtoul_r+0x58>
 8085c90:	230a      	movs	r3, #10
 8085c92:	e7b5      	b.n	8085c00 <_strtoul_r+0x58>
 8085c94:	2c30      	cmp	r4, #48	; 0x30
 8085c96:	d0ab      	beq.n	8085bf0 <_strtoul_r+0x48>
 8085c98:	e7b2      	b.n	8085c00 <_strtoul_r+0x58>
 8085c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085c9e:	bf00      	nop
 8085ca0:	20000080 	.word	0x20000080

08085ca4 <strtoul>:
 8085ca4:	4613      	mov	r3, r2
 8085ca6:	460a      	mov	r2, r1
 8085ca8:	4601      	mov	r1, r0
 8085caa:	4802      	ldr	r0, [pc, #8]	; (8085cb4 <strtoul+0x10>)
 8085cac:	6800      	ldr	r0, [r0, #0]
 8085cae:	f7ff bf7b 	b.w	8085ba8 <_strtoul_r>
 8085cb2:	bf00      	nop
 8085cb4:	200000e4 	.word	0x200000e4

08085cb8 <__tzcalc_limits>:
 8085cb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085cbc:	4604      	mov	r4, r0
 8085cbe:	f000 fa6f 	bl	80861a0 <__gettzinfo>
 8085cc2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8085cc6:	429c      	cmp	r4, r3
 8085cc8:	f340 8096 	ble.w	8085df8 <__tzcalc_limits+0x140>
 8085ccc:	f240 156d 	movw	r5, #365	; 0x16d
 8085cd0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8085cd4:	18e3      	adds	r3, r4, r3
 8085cd6:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 8085cda:	109b      	asrs	r3, r3, #2
 8085cdc:	fb05 3502 	mla	r5, r5, r2, r3
 8085ce0:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 8085ce4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8085ce8:	fb92 f3f3 	sdiv	r3, r2, r3
 8085cec:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8085cf0:	442b      	add	r3, r5
 8085cf2:	18a5      	adds	r5, r4, r2
 8085cf4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8085cf8:	fb94 f7f2 	sdiv	r7, r4, r2
 8085cfc:	fb95 f5f2 	sdiv	r5, r5, r2
 8085d00:	fb02 4717 	mls	r7, r2, r7, r4
 8085d04:	441d      	add	r5, r3
 8085d06:	2364      	movs	r3, #100	; 0x64
 8085d08:	fb94 f6f3 	sdiv	r6, r4, r3
 8085d0c:	fab7 fe87 	clz	lr, r7
 8085d10:	4601      	mov	r1, r0
 8085d12:	fb03 4616 	mls	r6, r3, r6, r4
 8085d16:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8085d1a:	9301      	str	r3, [sp, #4]
 8085d1c:	f004 0303 	and.w	r3, r4, #3
 8085d20:	6044      	str	r4, [r0, #4]
 8085d22:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8085d26:	9300      	str	r3, [sp, #0]
 8085d28:	f04f 0c07 	mov.w	ip, #7
 8085d2c:	7a0b      	ldrb	r3, [r1, #8]
 8085d2e:	2b4a      	cmp	r3, #74	; 0x4a
 8085d30:	d10e      	bne.n	8085d50 <__tzcalc_limits+0x98>
 8085d32:	694b      	ldr	r3, [r1, #20]
 8085d34:	9a00      	ldr	r2, [sp, #0]
 8085d36:	18ec      	adds	r4, r5, r3
 8085d38:	b902      	cbnz	r2, 8085d3c <__tzcalc_limits+0x84>
 8085d3a:	b906      	cbnz	r6, 8085d3e <__tzcalc_limits+0x86>
 8085d3c:	b927      	cbnz	r7, 8085d48 <__tzcalc_limits+0x90>
 8085d3e:	2b3b      	cmp	r3, #59	; 0x3b
 8085d40:	bfd4      	ite	le
 8085d42:	2300      	movle	r3, #0
 8085d44:	2301      	movgt	r3, #1
 8085d46:	e000      	b.n	8085d4a <__tzcalc_limits+0x92>
 8085d48:	2300      	movs	r3, #0
 8085d4a:	4423      	add	r3, r4
 8085d4c:	3b01      	subs	r3, #1
 8085d4e:	e03f      	b.n	8085dd0 <__tzcalc_limits+0x118>
 8085d50:	2b44      	cmp	r3, #68	; 0x44
 8085d52:	d102      	bne.n	8085d5a <__tzcalc_limits+0xa2>
 8085d54:	694b      	ldr	r3, [r1, #20]
 8085d56:	442b      	add	r3, r5
 8085d58:	e03a      	b.n	8085dd0 <__tzcalc_limits+0x118>
 8085d5a:	9b00      	ldr	r3, [sp, #0]
 8085d5c:	b92b      	cbnz	r3, 8085d6a <__tzcalc_limits+0xb2>
 8085d5e:	2e00      	cmp	r6, #0
 8085d60:	bf0c      	ite	eq
 8085d62:	46f0      	moveq	r8, lr
 8085d64:	f04f 0801 	movne.w	r8, #1
 8085d68:	e000      	b.n	8085d6c <__tzcalc_limits+0xb4>
 8085d6a:	46f0      	mov	r8, lr
 8085d6c:	46a9      	mov	r9, r5
 8085d6e:	4b24      	ldr	r3, [pc, #144]	; (8085e00 <__tzcalc_limits+0x148>)
 8085d70:	2230      	movs	r2, #48	; 0x30
 8085d72:	fb02 3808 	mla	r8, r2, r8, r3
 8085d76:	68cc      	ldr	r4, [r1, #12]
 8085d78:	f1a8 0a04 	sub.w	sl, r8, #4
 8085d7c:	2301      	movs	r3, #1
 8085d7e:	42a3      	cmp	r3, r4
 8085d80:	da04      	bge.n	8085d8c <__tzcalc_limits+0xd4>
 8085d82:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8085d86:	3301      	adds	r3, #1
 8085d88:	44d9      	add	r9, fp
 8085d8a:	e7f8      	b.n	8085d7e <__tzcalc_limits+0xc6>
 8085d8c:	f109 0304 	add.w	r3, r9, #4
 8085d90:	fb93 fbfc 	sdiv	fp, r3, ip
 8085d94:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 8085d98:	ebca 0a03 	rsb	sl, sl, r3
 8085d9c:	694b      	ldr	r3, [r1, #20]
 8085d9e:	2c01      	cmp	r4, #1
 8085da0:	bfb8      	it	lt
 8085da2:	2401      	movlt	r4, #1
 8085da4:	ebb3 0a0a 	subs.w	sl, r3, sl
 8085da8:	690b      	ldr	r3, [r1, #16]
 8085daa:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8085dae:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8085db2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8085db6:	bf48      	it	mi
 8085db8:	f10a 0a07 	addmi.w	sl, sl, #7
 8085dbc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8085dc0:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8085dc4:	4453      	add	r3, sl
 8085dc6:	42a3      	cmp	r3, r4
 8085dc8:	db01      	blt.n	8085dce <__tzcalc_limits+0x116>
 8085dca:	3b07      	subs	r3, #7
 8085dcc:	e7fb      	b.n	8085dc6 <__tzcalc_limits+0x10e>
 8085dce:	444b      	add	r3, r9
 8085dd0:	698c      	ldr	r4, [r1, #24]
 8085dd2:	4a0c      	ldr	r2, [pc, #48]	; (8085e04 <__tzcalc_limits+0x14c>)
 8085dd4:	fb02 4303 	mla	r3, r2, r3, r4
 8085dd8:	6a0c      	ldr	r4, [r1, #32]
 8085dda:	4423      	add	r3, r4
 8085ddc:	f841 3f1c 	str.w	r3, [r1, #28]!
 8085de0:	9b01      	ldr	r3, [sp, #4]
 8085de2:	4299      	cmp	r1, r3
 8085de4:	d1a2      	bne.n	8085d2c <__tzcalc_limits+0x74>
 8085de6:	69c3      	ldr	r3, [r0, #28]
 8085de8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8085dea:	4293      	cmp	r3, r2
 8085dec:	bfac      	ite	ge
 8085dee:	2300      	movge	r3, #0
 8085df0:	2301      	movlt	r3, #1
 8085df2:	6003      	str	r3, [r0, #0]
 8085df4:	2001      	movs	r0, #1
 8085df6:	e000      	b.n	8085dfa <__tzcalc_limits+0x142>
 8085df8:	2000      	movs	r0, #0
 8085dfa:	b003      	add	sp, #12
 8085dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085e00:	08086db0 	.word	0x08086db0
 8085e04:	00015180 	.word	0x00015180

08085e08 <__tz_lock>:
 8085e08:	4770      	bx	lr

08085e0a <__tz_unlock>:
 8085e0a:	4770      	bx	lr

08085e0c <_tzset_unlocked>:
 8085e0c:	4b01      	ldr	r3, [pc, #4]	; (8085e14 <_tzset_unlocked+0x8>)
 8085e0e:	6818      	ldr	r0, [r3, #0]
 8085e10:	f000 b802 	b.w	8085e18 <_tzset_unlocked_r>
 8085e14:	200000e4 	.word	0x200000e4

08085e18 <_tzset_unlocked_r>:
 8085e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085e1c:	b08d      	sub	sp, #52	; 0x34
 8085e1e:	4607      	mov	r7, r0
 8085e20:	f000 f9be 	bl	80861a0 <__gettzinfo>
 8085e24:	49b0      	ldr	r1, [pc, #704]	; (80860e8 <_tzset_unlocked_r+0x2d0>)
 8085e26:	4604      	mov	r4, r0
 8085e28:	4638      	mov	r0, r7
 8085e2a:	f000 f9b1 	bl	8086190 <_getenv_r>
 8085e2e:	4eaf      	ldr	r6, [pc, #700]	; (80860ec <_tzset_unlocked_r+0x2d4>)
 8085e30:	4605      	mov	r5, r0
 8085e32:	b960      	cbnz	r0, 8085e4e <_tzset_unlocked_r+0x36>
 8085e34:	4bae      	ldr	r3, [pc, #696]	; (80860f0 <_tzset_unlocked_r+0x2d8>)
 8085e36:	4aaf      	ldr	r2, [pc, #700]	; (80860f4 <_tzset_unlocked_r+0x2dc>)
 8085e38:	6018      	str	r0, [r3, #0]
 8085e3a:	4baf      	ldr	r3, [pc, #700]	; (80860f8 <_tzset_unlocked_r+0x2e0>)
 8085e3c:	6018      	str	r0, [r3, #0]
 8085e3e:	4baf      	ldr	r3, [pc, #700]	; (80860fc <_tzset_unlocked_r+0x2e4>)
 8085e40:	6830      	ldr	r0, [r6, #0]
 8085e42:	601a      	str	r2, [r3, #0]
 8085e44:	605a      	str	r2, [r3, #4]
 8085e46:	f7fc fdf9 	bl	8082a3c <free>
 8085e4a:	6035      	str	r5, [r6, #0]
 8085e4c:	e148      	b.n	80860e0 <_tzset_unlocked_r+0x2c8>
 8085e4e:	6831      	ldr	r1, [r6, #0]
 8085e50:	b979      	cbnz	r1, 8085e72 <_tzset_unlocked_r+0x5a>
 8085e52:	6830      	ldr	r0, [r6, #0]
 8085e54:	f7fc fdf2 	bl	8082a3c <free>
 8085e58:	4628      	mov	r0, r5
 8085e5a:	f7ff fde4 	bl	8085a26 <strlen>
 8085e5e:	1c41      	adds	r1, r0, #1
 8085e60:	4638      	mov	r0, r7
 8085e62:	f7fc fe1b 	bl	8082a9c <_malloc_r>
 8085e66:	6030      	str	r0, [r6, #0]
 8085e68:	b148      	cbz	r0, 8085e7e <_tzset_unlocked_r+0x66>
 8085e6a:	4629      	mov	r1, r5
 8085e6c:	f7ff fdb8 	bl	80859e0 <strcpy>
 8085e70:	e005      	b.n	8085e7e <_tzset_unlocked_r+0x66>
 8085e72:	f7ff fdab 	bl	80859cc <strcmp>
 8085e76:	2800      	cmp	r0, #0
 8085e78:	f000 8132 	beq.w	80860e0 <_tzset_unlocked_r+0x2c8>
 8085e7c:	e7e9      	b.n	8085e52 <_tzset_unlocked_r+0x3a>
 8085e7e:	782b      	ldrb	r3, [r5, #0]
 8085e80:	ae0a      	add	r6, sp, #40	; 0x28
 8085e82:	2b3a      	cmp	r3, #58	; 0x3a
 8085e84:	bf08      	it	eq
 8085e86:	3501      	addeq	r5, #1
 8085e88:	4633      	mov	r3, r6
 8085e8a:	4a9d      	ldr	r2, [pc, #628]	; (8086100 <_tzset_unlocked_r+0x2e8>)
 8085e8c:	499d      	ldr	r1, [pc, #628]	; (8086104 <_tzset_unlocked_r+0x2ec>)
 8085e8e:	4628      	mov	r0, r5
 8085e90:	f7fc fdec 	bl	8082a6c <siscanf>
 8085e94:	2800      	cmp	r0, #0
 8085e96:	f340 8123 	ble.w	80860e0 <_tzset_unlocked_r+0x2c8>
 8085e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085e9c:	18ef      	adds	r7, r5, r3
 8085e9e:	5ceb      	ldrb	r3, [r5, r3]
 8085ea0:	2b2d      	cmp	r3, #45	; 0x2d
 8085ea2:	d103      	bne.n	8085eac <_tzset_unlocked_r+0x94>
 8085ea4:	3701      	adds	r7, #1
 8085ea6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8085eaa:	e003      	b.n	8085eb4 <_tzset_unlocked_r+0x9c>
 8085eac:	2b2b      	cmp	r3, #43	; 0x2b
 8085eae:	bf08      	it	eq
 8085eb0:	3701      	addeq	r7, #1
 8085eb2:	2501      	movs	r5, #1
 8085eb4:	f10d 0a20 	add.w	sl, sp, #32
 8085eb8:	f10d 0b1e 	add.w	fp, sp, #30
 8085ebc:	f04f 0800 	mov.w	r8, #0
 8085ec0:	9603      	str	r6, [sp, #12]
 8085ec2:	f8cd a008 	str.w	sl, [sp, #8]
 8085ec6:	9601      	str	r6, [sp, #4]
 8085ec8:	f8cd b000 	str.w	fp, [sp]
 8085ecc:	4633      	mov	r3, r6
 8085ece:	aa07      	add	r2, sp, #28
 8085ed0:	498d      	ldr	r1, [pc, #564]	; (8086108 <_tzset_unlocked_r+0x2f0>)
 8085ed2:	4638      	mov	r0, r7
 8085ed4:	f8ad 801e 	strh.w	r8, [sp, #30]
 8085ed8:	f8ad 8020 	strh.w	r8, [sp, #32]
 8085edc:	f7fc fdc6 	bl	8082a6c <siscanf>
 8085ee0:	4540      	cmp	r0, r8
 8085ee2:	f340 80fd 	ble.w	80860e0 <_tzset_unlocked_r+0x2c8>
 8085ee6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8085eea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8085eee:	213c      	movs	r1, #60	; 0x3c
 8085ef0:	fb01 3302 	mla	r3, r1, r2, r3
 8085ef4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8085ef8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8085efc:	fb01 3302 	mla	r3, r1, r2, r3
 8085f00:	435d      	muls	r5, r3
 8085f02:	4b7f      	ldr	r3, [pc, #508]	; (8086100 <_tzset_unlocked_r+0x2e8>)
 8085f04:	6225      	str	r5, [r4, #32]
 8085f06:	4d7d      	ldr	r5, [pc, #500]	; (80860fc <_tzset_unlocked_r+0x2e4>)
 8085f08:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8086114 <_tzset_unlocked_r+0x2fc>
 8085f0c:	602b      	str	r3, [r5, #0]
 8085f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085f10:	464a      	mov	r2, r9
 8085f12:	441f      	add	r7, r3
 8085f14:	497b      	ldr	r1, [pc, #492]	; (8086104 <_tzset_unlocked_r+0x2ec>)
 8085f16:	4633      	mov	r3, r6
 8085f18:	4638      	mov	r0, r7
 8085f1a:	f7fc fda7 	bl	8082a6c <siscanf>
 8085f1e:	4540      	cmp	r0, r8
 8085f20:	dc08      	bgt.n	8085f34 <_tzset_unlocked_r+0x11c>
 8085f22:	682b      	ldr	r3, [r5, #0]
 8085f24:	6a22      	ldr	r2, [r4, #32]
 8085f26:	606b      	str	r3, [r5, #4]
 8085f28:	4b71      	ldr	r3, [pc, #452]	; (80860f0 <_tzset_unlocked_r+0x2d8>)
 8085f2a:	601a      	str	r2, [r3, #0]
 8085f2c:	4b72      	ldr	r3, [pc, #456]	; (80860f8 <_tzset_unlocked_r+0x2e0>)
 8085f2e:	f8c3 8000 	str.w	r8, [r3]
 8085f32:	e0d5      	b.n	80860e0 <_tzset_unlocked_r+0x2c8>
 8085f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085f36:	f8c5 9004 	str.w	r9, [r5, #4]
 8085f3a:	18fd      	adds	r5, r7, r3
 8085f3c:	5cfb      	ldrb	r3, [r7, r3]
 8085f3e:	2b2d      	cmp	r3, #45	; 0x2d
 8085f40:	d103      	bne.n	8085f4a <_tzset_unlocked_r+0x132>
 8085f42:	3501      	adds	r5, #1
 8085f44:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8085f48:	e003      	b.n	8085f52 <_tzset_unlocked_r+0x13a>
 8085f4a:	2b2b      	cmp	r3, #43	; 0x2b
 8085f4c:	bf08      	it	eq
 8085f4e:	3501      	addeq	r5, #1
 8085f50:	2701      	movs	r7, #1
 8085f52:	2300      	movs	r3, #0
 8085f54:	f8ad 301c 	strh.w	r3, [sp, #28]
 8085f58:	f8ad 301e 	strh.w	r3, [sp, #30]
 8085f5c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8085f60:	930a      	str	r3, [sp, #40]	; 0x28
 8085f62:	9603      	str	r6, [sp, #12]
 8085f64:	f8cd a008 	str.w	sl, [sp, #8]
 8085f68:	9601      	str	r6, [sp, #4]
 8085f6a:	f8cd b000 	str.w	fp, [sp]
 8085f6e:	4633      	mov	r3, r6
 8085f70:	aa07      	add	r2, sp, #28
 8085f72:	4965      	ldr	r1, [pc, #404]	; (8086108 <_tzset_unlocked_r+0x2f0>)
 8085f74:	4628      	mov	r0, r5
 8085f76:	f7fc fd79 	bl	8082a6c <siscanf>
 8085f7a:	2800      	cmp	r0, #0
 8085f7c:	dc04      	bgt.n	8085f88 <_tzset_unlocked_r+0x170>
 8085f7e:	6a23      	ldr	r3, [r4, #32]
 8085f80:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8085f84:	63e3      	str	r3, [r4, #60]	; 0x3c
 8085f86:	e00e      	b.n	8085fa6 <_tzset_unlocked_r+0x18e>
 8085f88:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8085f8c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8085f90:	213c      	movs	r1, #60	; 0x3c
 8085f92:	fb01 3302 	mla	r3, r1, r2, r3
 8085f96:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8085f9a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8085f9e:	fb01 3302 	mla	r3, r1, r2, r3
 8085fa2:	435f      	muls	r7, r3
 8085fa4:	63e7      	str	r7, [r4, #60]	; 0x3c
 8085fa6:	4627      	mov	r7, r4
 8085fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085faa:	f04f 0900 	mov.w	r9, #0
 8085fae:	441d      	add	r5, r3
 8085fb0:	782b      	ldrb	r3, [r5, #0]
 8085fb2:	2b2c      	cmp	r3, #44	; 0x2c
 8085fb4:	bf08      	it	eq
 8085fb6:	3501      	addeq	r5, #1
 8085fb8:	f895 8000 	ldrb.w	r8, [r5]
 8085fbc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8085fc0:	d126      	bne.n	8086010 <_tzset_unlocked_r+0x1f8>
 8085fc2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8085fc6:	9302      	str	r3, [sp, #8]
 8085fc8:	ab09      	add	r3, sp, #36	; 0x24
 8085fca:	9300      	str	r3, [sp, #0]
 8085fcc:	9603      	str	r6, [sp, #12]
 8085fce:	9601      	str	r6, [sp, #4]
 8085fd0:	4633      	mov	r3, r6
 8085fd2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8085fd6:	494d      	ldr	r1, [pc, #308]	; (808610c <_tzset_unlocked_r+0x2f4>)
 8085fd8:	4628      	mov	r0, r5
 8085fda:	f7fc fd47 	bl	8082a6c <siscanf>
 8085fde:	2803      	cmp	r0, #3
 8085fe0:	d17e      	bne.n	80860e0 <_tzset_unlocked_r+0x2c8>
 8085fe2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8085fe6:	1e4b      	subs	r3, r1, #1
 8085fe8:	2b0b      	cmp	r3, #11
 8085fea:	d879      	bhi.n	80860e0 <_tzset_unlocked_r+0x2c8>
 8085fec:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8085ff0:	1e53      	subs	r3, r2, #1
 8085ff2:	2b04      	cmp	r3, #4
 8085ff4:	d874      	bhi.n	80860e0 <_tzset_unlocked_r+0x2c8>
 8085ff6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8085ffa:	2b06      	cmp	r3, #6
 8085ffc:	d870      	bhi.n	80860e0 <_tzset_unlocked_r+0x2c8>
 8085ffe:	f887 8008 	strb.w	r8, [r7, #8]
 8086002:	60f9      	str	r1, [r7, #12]
 8086004:	613a      	str	r2, [r7, #16]
 8086006:	617b      	str	r3, [r7, #20]
 8086008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808600a:	eb05 0803 	add.w	r8, r5, r3
 808600e:	e02a      	b.n	8086066 <_tzset_unlocked_r+0x24e>
 8086010:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8086014:	bf06      	itte	eq
 8086016:	4643      	moveq	r3, r8
 8086018:	3501      	addeq	r5, #1
 808601a:	2344      	movne	r3, #68	; 0x44
 808601c:	220a      	movs	r2, #10
 808601e:	a90b      	add	r1, sp, #44	; 0x2c
 8086020:	4628      	mov	r0, r5
 8086022:	9305      	str	r3, [sp, #20]
 8086024:	f7ff fe3e 	bl	8085ca4 <strtoul>
 8086028:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 808602c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8086030:	4545      	cmp	r5, r8
 8086032:	9b05      	ldr	r3, [sp, #20]
 8086034:	d114      	bne.n	8086060 <_tzset_unlocked_r+0x248>
 8086036:	234d      	movs	r3, #77	; 0x4d
 8086038:	f1b9 0f00 	cmp.w	r9, #0
 808603c:	d107      	bne.n	808604e <_tzset_unlocked_r+0x236>
 808603e:	7223      	strb	r3, [r4, #8]
 8086040:	2303      	movs	r3, #3
 8086042:	60e3      	str	r3, [r4, #12]
 8086044:	2302      	movs	r3, #2
 8086046:	6123      	str	r3, [r4, #16]
 8086048:	f8c4 9014 	str.w	r9, [r4, #20]
 808604c:	e00b      	b.n	8086066 <_tzset_unlocked_r+0x24e>
 808604e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8086052:	230b      	movs	r3, #11
 8086054:	62a3      	str	r3, [r4, #40]	; 0x28
 8086056:	2301      	movs	r3, #1
 8086058:	62e3      	str	r3, [r4, #44]	; 0x2c
 808605a:	2300      	movs	r3, #0
 808605c:	6323      	str	r3, [r4, #48]	; 0x30
 808605e:	e002      	b.n	8086066 <_tzset_unlocked_r+0x24e>
 8086060:	b280      	uxth	r0, r0
 8086062:	723b      	strb	r3, [r7, #8]
 8086064:	6178      	str	r0, [r7, #20]
 8086066:	2302      	movs	r3, #2
 8086068:	f8ad 301c 	strh.w	r3, [sp, #28]
 808606c:	2300      	movs	r3, #0
 808606e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8086072:	f8ad 3020 	strh.w	r3, [sp, #32]
 8086076:	930a      	str	r3, [sp, #40]	; 0x28
 8086078:	f898 3000 	ldrb.w	r3, [r8]
 808607c:	2b2f      	cmp	r3, #47	; 0x2f
 808607e:	d10b      	bne.n	8086098 <_tzset_unlocked_r+0x280>
 8086080:	9603      	str	r6, [sp, #12]
 8086082:	f8cd a008 	str.w	sl, [sp, #8]
 8086086:	9601      	str	r6, [sp, #4]
 8086088:	f8cd b000 	str.w	fp, [sp]
 808608c:	4633      	mov	r3, r6
 808608e:	aa07      	add	r2, sp, #28
 8086090:	491f      	ldr	r1, [pc, #124]	; (8086110 <_tzset_unlocked_r+0x2f8>)
 8086092:	4640      	mov	r0, r8
 8086094:	f7fc fcea 	bl	8082a6c <siscanf>
 8086098:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808609c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80860a0:	213c      	movs	r1, #60	; 0x3c
 80860a2:	fb01 3302 	mla	r3, r1, r2, r3
 80860a6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80860aa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80860ae:	fb01 3302 	mla	r3, r1, r2, r3
 80860b2:	61bb      	str	r3, [r7, #24]
 80860b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80860b6:	f109 0901 	add.w	r9, r9, #1
 80860ba:	f1b9 0f02 	cmp.w	r9, #2
 80860be:	4445      	add	r5, r8
 80860c0:	f107 071c 	add.w	r7, r7, #28
 80860c4:	f47f af74 	bne.w	8085fb0 <_tzset_unlocked_r+0x198>
 80860c8:	6860      	ldr	r0, [r4, #4]
 80860ca:	f7ff fdf5 	bl	8085cb8 <__tzcalc_limits>
 80860ce:	6a22      	ldr	r2, [r4, #32]
 80860d0:	4b07      	ldr	r3, [pc, #28]	; (80860f0 <_tzset_unlocked_r+0x2d8>)
 80860d2:	601a      	str	r2, [r3, #0]
 80860d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80860d6:	1a9b      	subs	r3, r3, r2
 80860d8:	4a07      	ldr	r2, [pc, #28]	; (80860f8 <_tzset_unlocked_r+0x2e0>)
 80860da:	bf18      	it	ne
 80860dc:	2301      	movne	r3, #1
 80860de:	6013      	str	r3, [r2, #0]
 80860e0:	b00d      	add	sp, #52	; 0x34
 80860e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80860e6:	bf00      	nop
 80860e8:	08086e10 	.word	0x08086e10
 80860ec:	20000948 	.word	0x20000948
 80860f0:	20000950 	.word	0x20000950
 80860f4:	08086e13 	.word	0x08086e13
 80860f8:	2000094c 	.word	0x2000094c
 80860fc:	200000e8 	.word	0x200000e8
 8086100:	2000093b 	.word	0x2000093b
 8086104:	08086e17 	.word	0x08086e17
 8086108:	08086e3a 	.word	0x08086e3a
 808610c:	08086e26 	.word	0x08086e26
 8086110:	08086e39 	.word	0x08086e39
 8086114:	20000930 	.word	0x20000930

08086118 <_findenv_r>:
 8086118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808611c:	4607      	mov	r7, r0
 808611e:	468b      	mov	fp, r1
 8086120:	4690      	mov	r8, r2
 8086122:	f000 f8d7 	bl	80862d4 <__env_lock>
 8086126:	4b19      	ldr	r3, [pc, #100]	; (808618c <_findenv_r+0x74>)
 8086128:	681d      	ldr	r5, [r3, #0]
 808612a:	469a      	mov	sl, r3
 808612c:	b13d      	cbz	r5, 808613e <_findenv_r+0x26>
 808612e:	465c      	mov	r4, fp
 8086130:	4623      	mov	r3, r4
 8086132:	f813 2b01 	ldrb.w	r2, [r3], #1
 8086136:	b142      	cbz	r2, 808614a <_findenv_r+0x32>
 8086138:	2a3d      	cmp	r2, #61	; 0x3d
 808613a:	461c      	mov	r4, r3
 808613c:	d1f8      	bne.n	8086130 <_findenv_r+0x18>
 808613e:	4638      	mov	r0, r7
 8086140:	f000 f8c9 	bl	80862d6 <__env_unlock>
 8086144:	2000      	movs	r0, #0
 8086146:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808614a:	ebcb 0404 	rsb	r4, fp, r4
 808614e:	46a9      	mov	r9, r5
 8086150:	f859 0b04 	ldr.w	r0, [r9], #4
 8086154:	2800      	cmp	r0, #0
 8086156:	d0f2      	beq.n	808613e <_findenv_r+0x26>
 8086158:	4622      	mov	r2, r4
 808615a:	4659      	mov	r1, fp
 808615c:	f7ff fc6b 	bl	8085a36 <strncmp>
 8086160:	b988      	cbnz	r0, 8086186 <_findenv_r+0x6e>
 8086162:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8086166:	191e      	adds	r6, r3, r4
 8086168:	5d1b      	ldrb	r3, [r3, r4]
 808616a:	2b3d      	cmp	r3, #61	; 0x3d
 808616c:	d10b      	bne.n	8086186 <_findenv_r+0x6e>
 808616e:	f8da 3000 	ldr.w	r3, [sl]
 8086172:	4638      	mov	r0, r7
 8086174:	1aed      	subs	r5, r5, r3
 8086176:	10ad      	asrs	r5, r5, #2
 8086178:	f8c8 5000 	str.w	r5, [r8]
 808617c:	f000 f8ab 	bl	80862d6 <__env_unlock>
 8086180:	1c70      	adds	r0, r6, #1
 8086182:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086186:	464d      	mov	r5, r9
 8086188:	e7e1      	b.n	808614e <_findenv_r+0x36>
 808618a:	bf00      	nop
 808618c:	20000130 	.word	0x20000130

08086190 <_getenv_r>:
 8086190:	b507      	push	{r0, r1, r2, lr}
 8086192:	aa01      	add	r2, sp, #4
 8086194:	f7ff ffc0 	bl	8086118 <_findenv_r>
 8086198:	b003      	add	sp, #12
 808619a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080861a0 <__gettzinfo>:
 80861a0:	4800      	ldr	r0, [pc, #0]	; (80861a4 <__gettzinfo+0x4>)
 80861a2:	4770      	bx	lr
 80861a4:	200000f0 	.word	0x200000f0

080861a8 <gmtime_r>:
 80861a8:	6802      	ldr	r2, [r0, #0]
 80861aa:	4b46      	ldr	r3, [pc, #280]	; (80862c4 <gmtime_r+0x11c>)
 80861ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80861ae:	fb92 f4f3 	sdiv	r4, r2, r3
 80861b2:	fb03 2214 	mls	r2, r3, r4, r2
 80861b6:	2a00      	cmp	r2, #0
 80861b8:	bfbc      	itt	lt
 80861ba:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80861be:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80861c2:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80861c6:	fb92 f3f0 	sdiv	r3, r2, r0
 80861ca:	fb00 2213 	mls	r2, r0, r3, r2
 80861ce:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80861d2:	608b      	str	r3, [r1, #8]
 80861d4:	fb92 f3f0 	sdiv	r3, r2, r0
 80861d8:	fb00 2213 	mls	r2, r0, r3, r2
 80861dc:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80861e0:	bfac      	ite	ge
 80861e2:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80861e6:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80861ea:	604b      	str	r3, [r1, #4]
 80861ec:	600a      	str	r2, [r1, #0]
 80861ee:	2307      	movs	r3, #7
 80861f0:	1ce2      	adds	r2, r4, #3
 80861f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80861f6:	4d34      	ldr	r5, [pc, #208]	; (80862c8 <gmtime_r+0x120>)
 80861f8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80861fc:	fb94 f5f5 	sdiv	r5, r4, r5
 8086200:	1ad3      	subs	r3, r2, r3
 8086202:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8086206:	f240 57b4 	movw	r7, #1460	; 0x5b4
 808620a:	618b      	str	r3, [r1, #24]
 808620c:	4b2f      	ldr	r3, [pc, #188]	; (80862cc <gmtime_r+0x124>)
 808620e:	4830      	ldr	r0, [pc, #192]	; (80862d0 <gmtime_r+0x128>)
 8086210:	fb03 4405 	mla	r4, r3, r5, r4
 8086214:	fbb4 f2f2 	udiv	r2, r4, r2
 8086218:	fbb4 f3f7 	udiv	r3, r4, r7
 808621c:	fbb4 f0f0 	udiv	r0, r4, r0
 8086220:	4422      	add	r2, r4
 8086222:	1ad2      	subs	r2, r2, r3
 8086224:	f648 6694 	movw	r6, #36500	; 0x8e94
 8086228:	1a13      	subs	r3, r2, r0
 808622a:	f240 126d 	movw	r2, #365	; 0x16d
 808622e:	fbb3 f6f6 	udiv	r6, r3, r6
 8086232:	fbb3 f0f2 	udiv	r0, r3, r2
 8086236:	fbb3 f3f7 	udiv	r3, r3, r7
 808623a:	4434      	add	r4, r6
 808623c:	1ae3      	subs	r3, r4, r3
 808623e:	fb02 3310 	mls	r3, r2, r0, r3
 8086242:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8086246:	2499      	movs	r4, #153	; 0x99
 8086248:	3202      	adds	r2, #2
 808624a:	fbb2 f2f4 	udiv	r2, r2, r4
 808624e:	4354      	muls	r4, r2
 8086250:	1ca6      	adds	r6, r4, #2
 8086252:	2405      	movs	r4, #5
 8086254:	fbb6 f4f4 	udiv	r4, r6, r4
 8086258:	2a0a      	cmp	r2, #10
 808625a:	bf34      	ite	cc
 808625c:	2602      	movcc	r6, #2
 808625e:	f06f 0609 	mvncs.w	r6, #9
 8086262:	4416      	add	r6, r2
 8086264:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8086268:	fb02 0505 	mla	r5, r2, r5, r0
 808626c:	1c5f      	adds	r7, r3, #1
 808626e:	2e01      	cmp	r6, #1
 8086270:	bf98      	it	ls
 8086272:	3501      	addls	r5, #1
 8086274:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8086278:	eba7 0704 	sub.w	r7, r7, r4
 808627c:	d302      	bcc.n	8086284 <gmtime_r+0xdc>
 808627e:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 8086282:	e014      	b.n	80862ae <gmtime_r+0x106>
 8086284:	0782      	lsls	r2, r0, #30
 8086286:	d105      	bne.n	8086294 <gmtime_r+0xec>
 8086288:	2464      	movs	r4, #100	; 0x64
 808628a:	fbb0 f2f4 	udiv	r2, r0, r4
 808628e:	fb04 0212 	mls	r2, r4, r2, r0
 8086292:	b94a      	cbnz	r2, 80862a8 <gmtime_r+0x100>
 8086294:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8086298:	fbb0 f4f2 	udiv	r4, r0, r2
 808629c:	fb02 0014 	mls	r0, r2, r4, r0
 80862a0:	fab0 f280 	clz	r2, r0
 80862a4:	0952      	lsrs	r2, r2, #5
 80862a6:	e000      	b.n	80862aa <gmtime_r+0x102>
 80862a8:	2201      	movs	r2, #1
 80862aa:	333b      	adds	r3, #59	; 0x3b
 80862ac:	441a      	add	r2, r3
 80862ae:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80862b2:	2300      	movs	r3, #0
 80862b4:	61ca      	str	r2, [r1, #28]
 80862b6:	614d      	str	r5, [r1, #20]
 80862b8:	610e      	str	r6, [r1, #16]
 80862ba:	60cf      	str	r7, [r1, #12]
 80862bc:	620b      	str	r3, [r1, #32]
 80862be:	4608      	mov	r0, r1
 80862c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80862c2:	bf00      	nop
 80862c4:	00015180 	.word	0x00015180
 80862c8:	00023ab1 	.word	0x00023ab1
 80862cc:	fffdc54f 	.word	0xfffdc54f
 80862d0:	00023ab0 	.word	0x00023ab0

080862d4 <__env_lock>:
 80862d4:	4770      	bx	lr

080862d6 <__env_unlock>:
 80862d6:	4770      	bx	lr

080862d8 <dynalib_user>:
 80862d8:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 80862e8:	0000 0000                                   ....

080862ec <_ZTV8MB85RC64>:
	...
 80862f4:	0151 0808 0165 0808 1c39 0808 1ce5 0808     Q...e...9.......
 8086304:	1d5f 0808                                   _...

08086308 <_ZTV17PublishQueueAsync>:
	...
 8086310:	0129 0808 013d 0808 1e89 0808 2029 0808     )...=.......) ..
 8086320:	1fe5 0808 1fc3 0808 216f 0808 200b 0808     ........o!... ..
 8086330:	6749 0808 6784 0808 6789 0808 678e 0808     Ig...g...g...g..
 8086340:	6792 0808 6797 0808 679c 0808 67a0 0808     .g...g...g...g..
 8086350:	67ab 0808 67b6 0808 6749 0808 6751 0808     .g...g..Ig..Qg..
 8086360:	6755 0808 675e 0808 6766 0808 6772 0808     Ug..^g..fg..rg..
 8086370:	6778 0808 6f4e 4420 7461 0061 6255 6469     xg..No Data.Ubid
 8086380:	746f 2073 6f48 6b6f 5200 7365 6f70 736e     ots Hook.Respons
 8086390:	2065 6552 6563 7669 6465 5500 6b6e 6f6e     e Received.Unkno
 80863a0:	6e77 7220 7365 6f70 736e 2065 6572 6563     wn response rece
 80863b0:	6976 6465 2520 0069 6148 6472 5220 7365     vied %i.Hard Res
 80863c0:	7465 6920 206e 2032 6573 6f63 646e 0073     et in 2 seconds.
 80863d0:	6553 2074 6556 6272 736f 2065 6f4d 6564     Set Verbose Mode
 80863e0:	3000 4300 656c 7261 6465 5620 7265 6f62     .0.Cleared Verbo
 80863f0:	6573 4d20 646f 0065 3225 312e 2066 5455     se Mode.%2.1f UT
 8086400:	0043 6954 656d 7a20 6e6f 2065 666f 7366     C.Time zone offs
 8086410:	7465 2520 0069 704f 6e65 7420 6d69 2065     et %i.Open time 
 8086420:	6573 2074 6f74 2520 0069 6c43 736f 6e69     set to %i.Closin
 8086430:	2067 6974 656d 7320 7465 7420 206f 6925     g time set to %i
 8086440:	4300 756f 746e 202c 6f68 7275 796c 203a     .Count, hourly: 
 8086450:	6925 202c 6164 6c69 3a79 2520 0069 227b     %i, daily: %i.{"
 8086460:	6f68 7275 796c 3a22 6925 202c 6422 6961     hourly":%i, "dai
 8086470:	796c 3a22 6925 222c 6162 7474 7265 2279     ly":%i,"battery"
 8086480:	253a 2c69 2020 6b22 7965 2231 223a 7325     :%i,  "key1":"%s
 8086490:	2c22 2220 6574 706d 3a22 6925 202c 7222     ", "temp":%i, "r
 80864a0:	7365 7465 2273 253a 2c69 2220 6c61 7265     esets":%i, "aler
 80864b0:	7374 3a22 6925 202c 6d22 7861 696d 226e     ts":%i, "maxmin"
 80864c0:	253a 2c69 2220 6974 656d 7473 6d61 2270     :%i, "timestamp"
 80864d0:	253a 756c 3030 7d30 4500 656c 7463 6f72     :%lu000}.Electro
 80864e0:	2d6e 6f43 6e6e 6365 6574 2d64 6f43 6e75     n-Connected-Coun
 80864f0:	6574 2d72 6255 6469 746f 0073 7325 5320     ter-Ubidots.%s S
 8086500:	253a 2e32 6630 2525 202c 3a51 3225 302e     :%2.0f%%, Q:%2.0
 8086510:	2566 2025 5300 7465 5320 6c6f 7261 5020     f%% .Set Solar P
 8086520:	776f 7265 6465 4d20 646f 0065 6c43 6165     owered Mode.Clea
 8086530:	6572 2064 6f53 616c 2072 6f50 6577 6572     red Solar Powere
 8086540:	2064 6f4d 6564 4c00 776f 5020 776f 7265     d Mode.Low Power
 8086550:	4d20 646f 0065 7254 6575 4e00 726f 616d      Mode.True.Norma
 8086560:	206c 704f 7265 7461 6f69 736e 4600 6c61     l Operations.Fal
 8086570:	6573 4600 6f72 206d 7325 7420 206f 7325     se.From %s to %s
 8086580:	5300 6174 6574 5420 6172 736e 7469 6f69     .State Transitio
 8086590:	006e 5441 432b 5546 3d4e 3631 0a0d 5200     n.AT+CFUN=16...R
 80865a0:	6e75 696e 676e 4400 6961 796c 4320 656c     unning.Daily Cle
 80865b0:	6e61 7075 4400 5453 6f20 6666 6573 2074     anup.DST offset 
 80865c0:	3225 312e 0066 6f4c 6461 6e69 2067 7953     %2.1f.Loading Sy
 80865d0:	7473 6d65 4420 6665 7561 746c 0073 7073     stem Defaults.sp
 80865e0:	7261 2f6b 6564 6976 6563 732f 7365 6973     ark/device/sessi
 80865f0:	6e6f 652f 646e 4500 7272 726f 5320 6174     on/end.Error Sta
 8086600:	6574 2d20 5220 7365 7465 5300 6174 6574     te - Reset.State
 8086610:	4500 7272 726f 5320 6174 6574 2d20 5020     .Error State - P
 8086620:	776f 7265 4320 6379 656c 4500 7272 726f     ower Cycle.Error
 8086630:	5320 6174 6574 2d20 4620 6c75 206c 6f4d      State - Full Mo
 8086640:	6564 206d 6552 6573 0074 6f48 7275 796c     dem Reset.Hourly
 8086650:	6f43 6e75 0074 6144 6c69 4379 756f 746e     Count.DailyCount
 8086660:	5300 6769 616e 006c 6552 6573 4374 756f     .Signal.ResetCou
 8086670:	746e 5400 6d65 6570 6172 7574 6572 5200     nt.Temperature.R
 8086680:	6c65 6165 6573 7300 6174 6574 664f 6843     elease.stateOfCh
 8086690:	0067 6f6c 5077 776f 7265 6f4d 6564 4300     g.lowPowerMode.C
 80866a0:	6f6c 6573 6954 656d 4100 656c 7472 0073     loseTime.Alerts.
 80866b0:	6954 656d 664f 7366 7465 4200 7461 6574     TimeOffset.Batte
 80866c0:	7972 6f43 746e 7865 0074 6572 6573 4674     ryContext.resetF
 80866d0:	4152 004d 6572 6573 4374 756f 746e 0073     RAM.resetCounts.
 80866e0:	6148 6472 6552 6573 0074 6553 646e 6f4e     HardReset.SendNo
 80866f0:	0077 6f4c 5077 776f 7265 6f4d 6564 5300     w.LowPowerMode.S
 8086700:	6c6f 7261 4d2d 646f 0065 6556 6272 736f     olar-Mode.Verbos
 8086710:	2d65 6f4d 6564 5300 7465 542d 6d69 7a65     e-Mode.Set-Timez
 8086720:	6e6f 0065 6553 2d74 5344 4f54 6666 6573     one.Set-DSTOffse
 8086730:	0074 6553 2d74 704f 6e65 6954 656d 5300     t.Set-OpenTime.S
 8086740:	7465 432d 6f6c 6573 5500 6b6e 6f6e 6e77     et-Close.Unknown
 8086750:	4e00 746f 4320 6168 6772 6e69 0067 6843     .Not Charging.Ch
 8086760:	7261 6567 0064 6944 6373 6168 6772 6e69     arged.Dischargin
 8086770:	0067 6146 6c75 0074 6944 6f63 6e6e 6365     g.Fault.Diconnec
 8086780:	6574 0064 6f4e 656e 5700 4669 0069 5347     ted.None.WiFi.GS
 8086790:	004d 4d55 5354 4300 4d44 0041 544c 0045     M.UMTS.CDMA.LTE.
 80867a0:	4549 4545 3038 3132 3435 4c00 4554 435f     IEEE802154.LTE_C
 80867b0:	5441 4d5f 0031 544c 5f45 4143 5f54 424e     AT_M1.LTE_CAT_NB
 80867c0:	0031 0000                                   1...

080867c4 <_ZL17FRAMversionNumber>:
 80867c4:	0002 0000 7277 7469 4465 7461 2061 6166     ....writeData fa
 80867d4:	6c69 6465 6420 7275 6e69 2067 7265 7361     iled during eras
 80867e4:	2065 7266 6d61 6441 7264 253d 0075 6572     e framAddr=%u.re
 80867f4:	6461 7320 7465 6120 6464 6572 7373 6620     ad set address f
 8086804:	6961 656c 2064 6425 6400 6469 276e 2074     ailed %d.didn't 
 8086814:	6572 6563 7669 2065 6e65 756f 6867 6220     receive enough b
 8086824:	7479 7365 6320 756f 746e 253d 0075 7277     ytes count=%u.wr
 8086834:	7469 2065 6166 6c69 6465 2520 0064 0000     ite failed %d...

08086844 <_ZTV6MB85RC>:
	...
 808684c:	1b59 0808 1b5b 0808 1c39 0808 1ce5 0808     Y...[...9.......
 808685c:	1d5f 0808                                   _...

08086860 <_ZTV25PublishQueueAsyncRetained>:
	...
 8086868:	1f81 0808 1f95 0808 1e89 0808 2029 0808     ............) ..
 8086878:	1fe5 0808 1fc3 0808 216f 0808 200b 0808     ........o!... ..
 8086888:	7550 6c62 7369 5168 6575 6575 7341 6e79     PublishQueueAsyn
 8086898:	0063 7571 7565 6965 676e 6520 6576 746e     c.queueing event
 80868a8:	614e 656d 253d 2073 6164 6174 253d 2073     Name=%s data=%s 
 80868b8:	7474 3d6c 6425 6620 616c 7367 3d31 6425     ttl=%d flags1=%d
 80868c8:	6620 616c 7367 3d32 6425 7320 7a69 3d65      flags2=%d size=
 80868d8:	6425 7000 6275 696c 6873 6e69 2067 7325     %d.publishing %s
 80868e8:	2520 2073 7474 3d6c 6425 6620 616c 7367      %s ttl=%d flags
 80868f8:	253d 0078 7570 6c62 7369 6568 2064 7573     =%x.published su
 8086908:	6363 7365 6673 6c75 796c 7000 6275 696c     ccessfully.publi
 8086918:	6873 6465 6620 6961 656c 2c64 7720 6c69     shed failed, wil
 8086928:	206c 6572 7274 2079 6e69 2520 756c 6d20     l retry in %lu m
 8086938:	0073 7061 2e70 7570 7162 0000               s.app.pubq..

08086944 <_ZTV21PublishQueueAsyncBase>:
	...
 8086954:	1e89 0808 00a9 0808 00a9 0808 00a9 0808     ................
 8086964:	00a9 0808 00a9 0808                         ........

0808696c <_ZTVN5spark13CellularClassE>:
	...
 8086974:	2b7d 0808 2b73 0808 2b69 0808 2adb 0808     }+..s+..i+...*..
 8086984:	2b5d 0808 2b51 0808 2b45 0808 2b3d 0808     ]+..Q+..E+..=+..
 8086994:	2b33 0808 2b29 0808 2ae5 0808               3+..)+...*..

080869a0 <_ZTV14CellularSignal>:
	...
 80869a8:	2c2d 0808 2c7d 0808 2c2f 0808 2cbd 0808     -,..},../,...,..
 80869b8:	2c35 0808 2c8d 0808 2c59 0808 2d43 0808     5,...,..Y,..C-..
 80869c8:	fffc ffff 0000 0000 2d6d 0808               ........m-..

080869d4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80869dc:	2d75 0808 2d7b 0808 2dbf 0808 2d89 0808     u-..{-...-...-..
 80869ec:	2d77 0808                                   w-..

080869f0 <_ZTV7TwoWire>:
	...
 80869f8:	33b1 0808 33fb 0808 33d3 0808 33b3 0808     .3...3...3...3..
 8086a08:	33db 0808 33e3 0808 33eb 0808 33f3 0808     .3...3...3...3..

08086a18 <_ZTV9IPAddress>:
	...
 8086a20:	356d 0808 355d 0808 355f 0808 6162 6475     m5..]5.._5..baud
 8086a30:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 8086a40:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 8086a50:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 8086a60:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 8086a70:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 8086a80:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 8086a90:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 8086aa0:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 8086ab0:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 8086ac0:	203d 6400 7465 6961 736c 3d20 0020 6e6c     = .details = .ln
 8086ad0:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 8086ae0:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
 8086af0:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
 8086b00:	6100 6c6c 0000 0000                         .all....

08086b08 <_ZTVN5spark12NetworkClassE>:
	...
 8086b10:	360d 0808 3617 0808 3621 0808 362b 0808     .6...6..!6..+6..
 8086b20:	3635 0808 3641 0808 364d 0808 3659 0808     56..A6..M6..Y6..
 8086b30:	3661 0808 366b 0808 3675 0808 6977 6972     a6..k6..u6..wiri
 8086b40:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
 8086b50:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
 8086b60:	6920 766e 6c61 6469 002e 2b25 3330 3a64      invalid..%+03d:
 8086b70:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 8086b80:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 8086b90:	0000 0000                                   ....

08086b94 <_ZTV11USARTSerial>:
	...
 8086b9c:	3edd 0808 3f2d 0808 3f3b 0808 381d 0808     .>..-?..;?...8..
 8086bac:	3ef1 0808 3f13 0808 3eff 0808 3f27 0808     .>...?...>..'?..
 8086bbc:	3edf 0808 3ee3 0808                         .>...>..

08086bc4 <_ZTV9USBSerial>:
	...
 8086bcc:	3fe5 0808 4035 0808 4043 0808 381d 0808     .?..5@..C@...8..
 8086bdc:	4021 0808 3fe7 0808 3ffd 0808 402f 0808     !@...?...?../@..
 8086bec:	4013 0808 3fe1 0808                         .@...?..

08086bf4 <_ZSt7nothrow>:
	...

08086bf5 <day_name.4723>:
 8086bf5:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8086c05:	6972 6153 4a74                                   riSat

08086c0a <mon_name.4724>:
 8086c0a:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8086c1a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8086c2a:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 8086c3a:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 8086c4a:	6425 000a                                   %d..

08086c4e <_ctype_>:
 8086c4e:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8086c5e:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8086c6e:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8086c7e:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8086c8e:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8086c9e:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8086cae:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8086cbe:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8086cce:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08086d50 <__sf_fake_stdin>:
	...

08086d70 <__sf_fake_stdout>:
	...

08086d90 <__sf_fake_stderr>:
	...

08086db0 <__month_lengths>:
 8086db0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 8086dc0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8086dd0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8086de0:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 8086df0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8086e00:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8086e10:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 8086e20:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 8086e30:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 8086e40:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

08086e4c <link_const_variable_data_end>:
 8086e4c:	08081a41 	.word	0x08081a41
 8086e50:	08081e11 	.word	0x08081e11
 8086e54:	080823f1 	.word	0x080823f1
 8086e58:	08082bfd 	.word	0x08082bfd
 8086e5c:	080835fd 	.word	0x080835fd
 8086e60:	080836c1 	.word	0x080836c1
 8086e64:	080838e5 	.word	0x080838e5
 8086e68:	08083c39 	.word	0x08083c39
 8086e6c:	08083ec9 	.word	0x08083ec9
 8086e70:	08084515 	.word	0x08084515
 8086e74:	0808458d 	.word	0x0808458d
 8086e78:	08084651 	.word	0x08084651
 8086e7c:	080846d5 	.word	0x080846d5
 8086e80:	08084759 	.word	0x08084759

08086e84 <link_constructors_end>:
	...
